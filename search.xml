<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Big-O Notation</title>
    <url>/2018/08/04/Big-O/</url>
    <content><![CDATA[<p>Some common algorithms and their big-O noations</p>
<table>
<thead>
<tr>
<th align="left">constant time</th>
<th align="left">logarithmic time</th>
<th align="left">linear time</th>
<th align="left">linear-multiply-log</th>
<th align="left">square time</th>
<th align="left">factorial time</th>
</tr>
</thead>
<tbody><tr>
<td align="left">O(1)</td>
<td align="left">O(log2n)</td>
<td align="left">O(n)</td>
<td align="left">O(nlog2n)</td>
<td align="left">O(n2)</td>
<td align="left">O(n!)</td>
</tr>
<tr>
<td align="left">hash</td>
<td align="left">binary search</td>
<td align="left">simple search</td>
<td align="left">quik/merge sort</td>
<td align="left">selection sort</td>
<td align="left">traveling salesperson</td>
</tr>
</tbody></table>
<h3 id="O-log2n"><a href="#O-log2n" class="headerlink" title="O(log2n)"></a>O(log2n)</h3><ul>
<li><p>logarithmic time<br><img src="log2n.png" alt="logarithmic time"></p>
</li>
<li><p>code of binary search</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">static int array[] = &#123;9, 15, 21, 23, 57, 98, 101, 111&#125;;</span><br><span class="line">static int asize = sizeof(array) / sizeof(int);</span><br><span class="line"></span><br><span class="line">static void dump_array(int array[], int size, const char *prefix)</span><br><span class="line">&#123;</span><br><span class="line">  int i;</span><br><span class="line"></span><br><span class="line">  if (NULL != prefix) &#123;</span><br><span class="line">    printf(&quot;%s: &quot;, prefix);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for (i = 0; i &lt; asize; i++) &#123;</span><br><span class="line">    printf(&quot;array[%d] = %d, &quot;, i, array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int bsearch(int array[], int size, int key)</span><br><span class="line">&#123;</span><br><span class="line">  int i, low, high, guess;</span><br><span class="line"> </span><br><span class="line">  low = 0; high = size - 1;</span><br><span class="line"></span><br><span class="line">  while (low &lt;= high) &#123;</span><br><span class="line">    guess = (low + high) / 2;</span><br><span class="line"></span><br><span class="line">    if (key &gt; array[guess]) &#123;</span><br><span class="line">      low = guess + 1;</span><br><span class="line">    &#125; else if (key &lt; array[guess]) &#123;</span><br><span class="line">      high = guess - 1;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      printf(&quot;key %d index is %d\n&quot;, key, guess);</span><br><span class="line">      return guess;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  int i, key[] = &#123;0, 9, 15, 57, 98, 101, 111, 230&#125;;</span><br><span class="line"></span><br><span class="line">  dump_array(array, asize, &quot;Array&quot;);</span><br><span class="line"></span><br><span class="line">  for (i = 0; i &lt; sizeof(key) / sizeof(int); i++) &#123;</span><br><span class="line">    if (bsearch(array, asize, key[i]) &lt; 0) &#123;</span><br><span class="line">      printf(&quot;key %d is not in array\n&quot;, key[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h3><ul>
<li><p>linear time<br><img src="n.png" alt="linear time"></p>
</li>
<li><p>code of simple search</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">static int array[] = &#123;9, 15, 21, 23, 57, 98, 101, 111&#125;;</span><br><span class="line">static int asize = sizeof(array) / sizeof(int);</span><br><span class="line"></span><br><span class="line">static void dump_array(int array[], int size, const char *prefix)</span><br><span class="line">&#123;</span><br><span class="line">  int i;</span><br><span class="line"></span><br><span class="line">  if (NULL != prefix) &#123;</span><br><span class="line">    printf(&quot;%s: &quot;, prefix);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for (i = 0; i &lt; asize; i++) &#123;</span><br><span class="line">    printf(&quot;array[%d] = %d, &quot;, i, array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int ssearch(int array[], int size, int key)</span><br><span class="line">&#123;</span><br><span class="line">  int i;</span><br><span class="line"> </span><br><span class="line">  for (i = 0; i &lt; size; i++) &#123;</span><br><span class="line">    if (key == array[i]) &#123;</span><br><span class="line">      printf(&quot;key %d index is %d\n&quot;, key, i);</span><br><span class="line">      return i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  int i, key[] = &#123;0, 9, 15, 57, 98, 101, 111, 230&#125;;</span><br><span class="line"></span><br><span class="line">  dump_array(array, asize, &quot;Array&quot;);</span><br><span class="line"></span><br><span class="line">  for (i = 0; i &lt; sizeof(key) / sizeof(int); i++) &#123;</span><br><span class="line">    if (ssearch(array, asize, key[i]) &lt; 0) &#123;</span><br><span class="line">      printf(&quot;key %d is not in array\n&quot;, key[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="O-nlog2n"><a href="#O-nlog2n" class="headerlink" title="O(nlog2n)"></a>O(nlog2n)</h3><ul>
<li>linear-multiply-log<br><img src="nlog2n.png" alt="linear-multiply-log"></li>
</ul>
<h3 id="O-n2"><a href="#O-n2" class="headerlink" title="O(n2)"></a>O(n2)</h3><ul>
<li><p>square time<br><img src="n2.png" alt="square time"></p>
</li>
<li><p>code of selection sort</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">static int array[] = &#123;15, 9, 23, 21, 111, 101, 98&#125;;</span><br><span class="line">static int asize = sizeof(array) / sizeof(int);</span><br><span class="line"></span><br><span class="line">static void dump_array(int array[], int size, const char *prefix)</span><br><span class="line">&#123;</span><br><span class="line">  int i;</span><br><span class="line"></span><br><span class="line">  if (NULL != prefix) &#123;</span><br><span class="line">    printf(&quot;%s: &quot;, prefix);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for (i = 0; i &lt; asize; i++) &#123;</span><br><span class="line">    printf(&quot;array[%d] = %d, &quot;, i, array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void ssort(int array[], int size)</span><br><span class="line">&#123;</span><br><span class="line">  int i, j, hit;</span><br><span class="line"> </span><br><span class="line">  for (i = 0; i &lt; size; i++) &#123;</span><br><span class="line"></span><br><span class="line">    hit = i;</span><br><span class="line">    for (j = i; j &lt; size; j++) &#123;</span><br><span class="line">      if (array[j] &lt; array[hit]) &#123;</span><br><span class="line">        hit = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (i != hit) &#123;</span><br><span class="line">      int swap;</span><br><span class="line"></span><br><span class="line">      swap = array[i];</span><br><span class="line">      array[i] = array[hit];</span><br><span class="line">      array[hit] = swap;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  dump_array(array, asize, &quot;Before sort&quot;);</span><br><span class="line"></span><br><span class="line">  ssort(array, asize);</span><br><span class="line"></span><br><span class="line">  dump_array(array, asize, &quot; After sort&quot;);</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="O-n-1"><a href="#O-n-1" class="headerlink" title="O(n!)"></a>O(n!)</h3><ul>
<li>factorial time<br><img src="n!.png" alt="factorial time"></li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a class="link"   href="https://algs4.cs.princeton.edu/home/" >Algorithms, 4th Edition<i class="fas fa-external-link-alt"></i></a><br>Grokking Algorithms: An illustrated guide for programmers and other curious people</p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>simple search</tag>
        <tag>binary search</tag>
        <tag>selection sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Building EDK2 Qemu From Scratch On Raspberry Pi</title>
    <url>/2021/07/29/Building-EDK2-Qemu-From-Scratch-On-Raspberry-Pi/</url>
    <content><![CDATA[<h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul>
<li>a Raspberry PI 4B</li>
<li>a SD Card, has installed <a class="link"   href="https://ubuntu.com/raspberry-pi" >Ubuntu for Raspberry Pi<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Building-EDK2"><a href="#Building-EDK2" class="headerlink" title="Building EDK2"></a>Building EDK2</h3><ul>
<li><p>Install required packages</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential git uuid-dev iasl nasm python</span><br></pre></td></tr></table></figure></li>
<li><p>Get the latest source for EDKII</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir code; cd code</span><br><span class="line">git clone https://github.com/tianocore/edk2.git</span><br><span class="line">cd edk2; git submodule update --init</span><br></pre></td></tr></table></figure></li>
<li><p>Config and building</p>
<ul>
<li>Compile base tools<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make -C BaseTools</span><br></pre></td></tr></table></figure></li>
<li>Set up build environment<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. ./edksetup.sh</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Set up build target</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi Conf/target.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>set ACTIVE_PLATFORM = <strong>ArmVirtPkg/ArmVirtQemu.dsc</strong></li>
<li>set TARGET = <strong>DEBUG</strong></li>
<li>set TARGET_ARCH = <strong>AARCH64</strong></li>
<li>set TOOL_CHAIN_TAG = <strong>GCC5</strong></li>
</ul>
</li>
<li><p>Building MdeModulePkg module package</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">build</span><br></pre></td></tr></table></figure>
<p>  Note: <em>build</em>, which is exported by edksetup.sh, is not a system command</p>
</li>
<li><p>Get the UEFI bin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls Build/ArmVirtQemu-AARCH64/DEBUG_GCC5/FV/QEMU_EFI.fd</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Building-Qemu"><a href="#Building-Qemu" class="headerlink" title="Building Qemu"></a>Building Qemu</h3><ul>
<li><p>Get the latest source for Qemu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ..</span><br><span class="line">wget https://download.qemu.org/qemu-6.0.0.tar.xz</span><br><span class="line">tar -xvf qemu-6.0.0.tar.xz</span><br></pre></td></tr></table></figure></li>
<li><p>Install required packages</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt install libaio1 libaio-dev</span><br></pre></td></tr></table></figure></li>
<li><p>Config and building</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd qemu-6.0.0</span><br><span class="line">./configure --enable-trace-backend=simple --enable-debug --target-list=aarch64-softmmu --prefix=/usr/local --without-default-features --enable-kvm --enable-linux-aio --enable-vhost-net --enable-vhost-vsock --enable-vhost-scsi --enable-vhost-kernel --enable-vnc --enable-tools</span><br><span class="line">make -j 3</span><br></pre></td></tr></table></figure>
<p>  Note: type <strong>./configure –help</strong> to set your own configurations</p>
</li>
<li><p>Get the Qemu bin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./build/qemu-system-aarch64 --version</span><br><span class="line">./build/qemu-img --version</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a class="link"   href="https://www.raspberrypi.org/software/" >Install Raspberry Pi OS using Raspberry Pi Imager<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://wiki.ubuntu.com/UEFI/EDK2" >Ubuntu EDK2<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/qemu/QEMU" >Git Qemu<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>PRACTICE</category>
      </categories>
      <tags>
        <tag>EDK2</tag>
        <tag>Qemu</tag>
        <tag>Raspberry Pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Run OvS with ovs-sandbox</title>
    <url>/2018/09/02/Run-Ovs-with-ovs-sandbox/</url>
    <content><![CDATA[<p>Prepare the Linux environment, you can run a virtual machine, a centos 7.4 image, with <a class="link"   href="https://www.virtualbox.org/" >virtual box<i class="fas fa-external-link-alt"></i></a>.</p>
<h4 id="Install-development-enviroment"><a href="#Install-development-enviroment" class="headerlink" title="Install development enviroment"></a>Install development enviroment</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install git</span><br><span class="line">$ yum groupinstall &quot;Development tools&quot;</span><br></pre></td></tr></table></figure>

<h4 id="Download-Open-vSwitch-source-code"><a href="#Download-Open-vSwitch-source-code" class="headerlink" title="Download Open vSwitch source code"></a>Download Open vSwitch source code</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/openvswitch/ovs.git</span><br><span class="line">$ git branch --remote</span><br><span class="line">$ git branch branch-2.10</span><br></pre></td></tr></table></figure>

<h4 id="Compile-Open-vSwitch"><a href="#Compile-Open-vSwitch" class="headerlink" title="Compile Open vSwitch"></a>Compile Open vSwitch</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ./ovs</span><br><span class="line">$ sh ./boot.sh</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ ./tutorial/ovs-sandbox</span><br></pre></td></tr></table></figure>

<h3 id="Open-vSwitch-Advanced-Features"><a href="#Open-vSwitch-Advanced-Features" class="headerlink" title="Open vSwitch Advanced Features"></a>Open vSwitch Advanced Features</h3><h4 id="We-will-construct-Open-vSwitch-flow-tables-for-a-VLAN-capable-MAC-learning-switch-that-has-four-ports"><a href="#We-will-construct-Open-vSwitch-flow-tables-for-a-VLAN-capable-MAC-learning-switch-that-has-four-ports" class="headerlink" title="We will construct Open vSwitch flow tables for a VLAN-capable, MAC-learning switch that has four ports:"></a>We will construct Open vSwitch flow tables for a VLAN-capable, MAC-learning switch that has four ports:</h4><ul>
<li>p1: a trunk port that carries all VLANs, on OpenFlow port 1.</li>
<li>p2: an access port for VLAN 20, on OpenFlow port 2.</li>
<li>p3, p4: both access ports for VLAN 30, on OpenFlow ports 3 and 4, respectively.</li>
</ul>
<h4 id="Our-switch-design-will-consist-of-five-main-flow-tables-each-of-which-implements-one-stage-in-the-switch-pipeline"><a href="#Our-switch-design-will-consist-of-five-main-flow-tables-each-of-which-implements-one-stage-in-the-switch-pipeline" class="headerlink" title="Our switch design will consist of five main flow tables, each of which implements one stage in the switch pipeline:"></a>Our switch design will consist of five main flow tables, each of which implements one stage in the switch pipeline:</h4><ul>
<li>Table 0: Admission control.</li>
<li>Table 1: VLAN input processing.</li>
<li>Table 2: Learn source MAC and VLAN for ingress port.</li>
<li>Table 3: Look up learned port for destination MAC and VLAN.</li>
<li>Table 4: Output processing.</li>
</ul>
<h4 id="Setup-the-switch-and-ports"><a href="#Setup-the-switch-and-ports" class="headerlink" title="Setup the switch and ports"></a>Setup the switch and ports</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl add-br br0 -- set Bridge br0 fail-mode=secure \</span><br><span class="line">$ ovs-vsctl add-port br0 p1 -- set Interface p1 ofport_request=1; ovs-ofctl mod-port br0 p1 up</span><br><span class="line">$ ovs-vsctl add-port br0 p2 -- set Interface p2 ofport_request=2; ovs-ofctl mod-port br0 p2 up</span><br><span class="line">$ ovs-vsctl add-port br0 p3 -- set Interface p3 ofport_request=3; ovs-ofctl mod-port br0 p3 up</span><br><span class="line">$ ovs-vsctl add-port br0 p4 -- set Interface p4 ofport_request=4; ovs-ofctl mod-port br0 p4 up</span><br></pre></td></tr></table></figure>

<h3 id="Implementing-tables"><a href="#Implementing-tables" class="headerlink" title="Implementing tables"></a>Implementing tables</h3><h4 id="Table-0-Multicase-source-address-and-stp-packets-are-not-forwarded-the-others-are-valid"><a href="#Table-0-Multicase-source-address-and-stp-packets-are-not-forwarded-the-others-are-valid" class="headerlink" title="Table 0: Multicase source address and stp packets are not forwarded, the others are valid."></a>Table 0: Multicase source address and stp packets are not forwarded, the others are valid.</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 &quot;table=0, dl_src=01:00:00:00:00:00/01:00:00:00:00:00, actions=drop&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 &quot;table=0, dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0, actions=drop&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 &quot;table=0, priority=0, actions=resubmit(,1)&quot;</span><br></pre></td></tr></table></figure>
<h4 id="Table-1-vlan-input-processing-the-default-policy-is-“drop”"><a href="#Table-1-vlan-input-processing-the-default-policy-is-“drop”" class="headerlink" title="Table 1: vlan input processing, the default policy is “drop”."></a>Table 1: vlan input processing, the default policy is “drop”.</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 &quot;table=1, priority=0, actions=drop&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 &quot;table=1, priority=99, in_port=1, actions=resubmit(,2)&quot;</span><br><span class="line">$ ovs-ofctl add-flows br0 - &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">table=1, priority=99, in_port=2, vlan_tci=0, actions=mod_vlan_vid:20, resubmit(,2)</span><br><span class="line">table=1, priority=99, in_port=3, vlan_tci=0, actions=mod_vlan_vid:30, resubmit(,2)</span><br><span class="line">table=1, priority=99, in_port=4, vlan_tci=0, actions=mod_vlan_vid:30, resubmit(,2)</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="Table-2-MAC-VLAN-Learning-for-Ingress-Port"><a href="#Table-2-MAC-VLAN-Learning-for-Ingress-Port" class="headerlink" title="Table 2: MAC+VLAN Learning for Ingress Port"></a>Table 2: MAC+VLAN Learning for Ingress Port</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=2 actions=learn(table=10, NXM_OF_VLAN_TCI[0..11], \</span><br><span class="line">                           NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[], \</span><br><span class="line">                           load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15]), \</span><br><span class="line">                     resubmit(,3)&quot;</span><br></pre></td></tr></table></figure>

<h4 id="Table-3-Look-Up-Destination-Port"><a href="#Table-3-Look-Up-Destination-Port" class="headerlink" title="Table 3: Look Up Destination Port"></a>Table 3: Look Up Destination Port</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=3 priority=50 actions=resubmit(,10), resubmit(,4)&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=3 priority=99 dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 actions=resubmit(,4)&quot;</span><br></pre></td></tr></table></figure>

<h4 id="Table-4-Output-Processing"><a href="#Table-4-Output-Processing" class="headerlink" title="Table 4: Output Processing"></a>Table 4: Output Processing</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 &quot;table=4 reg0=1 actions=1&quot;</span><br><span class="line">$ ovs-ofctl add-flows br0 - &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">table=4 reg0=2 actions=strip_vlan,2</span><br><span class="line">table=4 reg0=3 actions=strip_vlan,3</span><br><span class="line">table=4 reg0=4 actions=strip_vlan,4</span><br><span class="line">EOF</span><br><span class="line">$ ovs-ofctl add-flows br0 - &lt;&lt;&#x27;EOF&#x27;</span><br><span class="line">table=4 reg0=0 priority=99 dl_vlan=20 actions=1,strip_vlan,2</span><br><span class="line">table=4 reg0=0 priority=99 dl_vlan=30 actions=1,strip_vlan,3,4</span><br><span class="line">table=4 reg0=0 priority=50            actions=1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="Dump-all-the-table-flows"><a href="#Dump-all-the-table-flows" class="headerlink" title="Dump all the table flows"></a>Dump all the table flows</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ovs-ofctl dump-flows br0</span><br><span class="line"> cookie=0x0, duration=4157.126s, table=0, n_packets=0, n_bytes=0, dl_src=01:00:00:00:00:00/01:00:00:00:00:00 actions=drop</span><br><span class="line"> cookie=0x0, duration=4146.396s, table=0, n_packets=0, n_bytes=0, dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0 actions=drop</span><br><span class="line"> cookie=0x0, duration=4136.741s, table=0, n_packets=0, n_bytes=0, priority=0 actions=resubmit(,1)</span><br><span class="line"> cookie=0x0, duration=4073.263s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p1 actions=resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=3829.544s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p2,vlan_tci=0x0000 actions=mod_vlan_vid:20,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=3829.468s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p3,vlan_tci=0x0000 actions=mod_vlan_vid:30,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=3829.468s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p4,vlan_tci=0x0000 actions=mod_vlan_vid:30,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=4089.873s, table=1, n_packets=0, n_bytes=0, priority=0 actions=drop</span><br><span class="line"> cookie=0x0, duration=3682.963s, table=2, n_packets=0, n_bytes=0, actions=learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15]),resubmit(,3)</span><br><span class="line"> cookie=0x0, duration=3645.636s, table=3, n_packets=0, n_bytes=0, priority=99,dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 actions=resubmit(,4)</span><br><span class="line"> cookie=0x0, duration=3549.407s, table=3, n_packets=0, n_bytes=0, priority=50 actions=resubmit(,10),resubmit(,4)</span><br><span class="line"> cookie=0x0, duration=3512.926s, table=4, n_packets=0, n_bytes=0, reg0=0x1 actions=output:p1</span><br><span class="line"> cookie=0x0, duration=1534.991s, table=4, n_packets=0, n_bytes=0, reg0=0x2 actions=strip_vlan,output:p2</span><br><span class="line"> cookie=0x0, duration=1534.990s, table=4, n_packets=0, n_bytes=0, reg0=0x3 actions=strip_vlan,output:p3</span><br><span class="line"> cookie=0x0, duration=1534.990s, table=4, n_packets=0, n_bytes=0, reg0=0x4 actions=strip_vlan,output:p4</span><br><span class="line"> cookie=0x0, duration=1515.987s, table=4, n_packets=0, n_bytes=0, priority=50,reg0=0 actions=output:p1</span><br><span class="line"> cookie=0x0, duration=1515.987s, table=4, n_packets=0, n_bytes=0, priority=99,reg0=0,dl_vlan=20 actions=output:p1,strip_vlan,output:p2</span><br><span class="line"> cookie=0x0, duration=1515.987s, table=4, n_packets=0, n_bytes=0, priority=99,reg0=0,dl_vlan=30 actions=output:p1,strip_vlan,output:p3,output:p4</span><br></pre></td></tr></table></figure>

<h3 id="Testing-Tables"><a href="#Testing-Tables" class="headerlink" title="Testing Tables"></a>Testing Tables</h3><h4 id="Testing-Table-0"><a href="#Testing-Table-0" class="headerlink" title="Testing Table 0"></a>Testing Table 0</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ovs-appctl ofproto/trace br0 in_port=1,dl_dst=01:80:c2:00:00:05</span><br><span class="line">Flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:05,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0, priority 32768</span><br><span class="line">    drop</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 in_port=1,dl_dst=01:80:c2:00:00:10</span><br><span class="line">Flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:10,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0, priority 50</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,vlan_tci=0x0000/0x1fff,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:10/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br></pre></td></tr></table></figure>

<h4 id="Testing-Table-1"><a href="#Testing-Table-1" class="headerlink" title="Testing Table 1"></a>Testing Table 1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ovs-appctl ofproto/trace br0 in_port=1,vlan_tci=5</span><br><span class="line">Flow: in_port=1,vlan_tci=0x0005,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0, priority 50</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,vlan_tci=0x0005/0x1fff,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 in_port=2</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=2,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:20</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=20,pcp=0),1</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 in_port=2</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=2,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:20</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=20,pcp=0),1</span><br><span class="line">[root@localhost ovs]# </span><br><span class="line">[root@localhost ovs]# </span><br><span class="line">[root@localhost ovs]# ovs-appctl ofproto/trace br0 in_port=2,vlan_tci=5</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0005,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. priority 0</span><br><span class="line">    drop</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0005,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br></pre></td></tr></table></figure>

<h4 id="Testing-Table-2"><a href="#Testing-Table-2" class="headerlink" title="Testing Table 2"></a>Testing Table 2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,vlan_tci=20,dl_src=50:00:00:00:00:01 -generate</span><br><span class="line">Flow: in_port=1,vlan_tci=0x0014,vlan_tci1=0x0000,dl_src=50:00:00:00:00:01,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x0014/0x0fff,dl_dst=50:00:00:00:00:01 priority=32768 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0, priority 50</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,vlan_tci=0x0014/0x1fff,dl_src=50:00:00:00:00:01,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=2,dl_src=50:00:00:00:00:01 -generate</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0000,dl_src=50:00:00:00:00:01,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=2,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:20</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x0014/0x0fff,dl_dst=50:00:00:00:00:01 priority=32768 actions=load:0x2-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000,dl_src=50:00:00:00:00:01,dl_dst=00:00:00:00:00:00,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=20,pcp=0),1</span><br></pre></td></tr></table></figure>

<h4 id="Testing-Table-3"><a href="#Testing-Table-3" class="headerlink" title="Testing Table 3"></a>Testing Table 3</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_vlan=20,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01 \</span><br><span class="line">&gt;     -generate</span><br><span class="line">Flow: in_port=1,dl_vlan=20,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x0014/0x0fff,dl_dst=f0:00:00:00:00:01 priority=32768 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=20,dl_vlan_pcp=0,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,2</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=2,dl_src=90:00:00:00:00:01,dl_dst=f0:00:00:00:00:01 -generate</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0000,dl_src=90:00:00:00:00:01,dl_dst=f0:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=2,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:20</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x0014/0x0fff,dl_dst=90:00:00:00:00:01 priority=32768 actions=load:0x2-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. vlan_tci=0x0014/0x0fff,dl_dst=f0:00:00:00:00:01, priority 32768</span><br><span class="line">            load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0x1, priority 32768</span><br><span class="line">    output:1</span><br><span class="line"></span><br><span class="line">Final flow: reg0=0x1,in_port=2,dl_vlan=20,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=90:00:00:00:00:01,dl_dst=f0:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000,dl_src=90:00:00:00:00:01,dl_dst=f0:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=20,pcp=0),1</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_vlan=20,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01 \</span><br><span class="line">&gt;     -generate</span><br><span class="line">Flow: in_port=1,dl_vlan=20,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x0014/0x0fff,dl_dst=f0:00:00:00:00:01 priority=32768 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. vlan_tci=0x0014/0x0fff,dl_dst=90:00:00:00:00:01, priority 32768</span><br><span class="line">            load:0x2-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0x2, priority 32768</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line"></span><br><span class="line">Final flow: reg0=0x2,in_port=1,vlan_tci=0x0000,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=20,dl_vlan_pcp=0,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,2</span><br></pre></td></tr></table></figure>

<h4 id="Testing-Table-4"><a href="#Testing-Table-4" class="headerlink" title="Testing Table 4"></a>Testing Table 4</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=30</span><br><span class="line">Flow: in_port=1,dl_vlan=30,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">    output:4</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=30,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,3,4</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 in_port=3,dl_dst=ff:ff:ff:ff:ff:ff</span><br><span class="line">Flow: in_port=3,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=3,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:30</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    output:4</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=3,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=30,pcp=0),1,pop_vlan,4</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=ff:ff:ff:ff:ff:ff</span><br><span class="line">Flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0, priority 50</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,vlan_tci=0x0000/0x1fff,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=55</span><br><span class="line">Flow: in_port=1,dl_vlan=55,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0, priority 50</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=55,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: drop</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=20</span><br><span class="line">Flow: in_port=1,dl_vlan=20,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=20,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,2</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=2,dl_dst=ff:ff:ff:ff:ff:ff</span><br><span class="line">Flow: in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=2,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:20</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=20,pcp=0),1</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=4,dl_dst=ff:ff:ff:ff:ff:ff</span><br><span class="line">Flow: in_port=4,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:ff,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=4,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:30</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">    output:4</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=4,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=ff:ff:ff:ff:ff:f0/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=30,pcp=0),1,pop_vlan,3</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=4,dl_dst=01:00:00:00:00:00</span><br><span class="line">Flow: in_port=4,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:00:00:00:00:00,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=4,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:30</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. dl_dst=01:00:00:00:00:00/01:00:00:00:00:00, priority 99</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">    output:4</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line"></span><br><span class="line">Final flow: unchanged</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=4,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=30,pcp=0),1,pop_vlan,3</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=90:12:34:56:78:90,dl_vlan=20</span><br><span class="line">Flow: in_port=1,dl_vlan=20,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=20, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:2</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=20,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,2</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_dst=90:12:34:56:78:90,dl_vlan=30</span><br><span class="line">Flow: in_port=1,dl_vlan=30,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     &gt;&gt; suppressing side effects, so learn action ignored</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">    output:4</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=30,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=90:12:34:56:78:90,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,3,4</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_vlan=30,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01 \</span><br><span class="line">&gt;     -generate</span><br><span class="line">Flow: in_port=1,dl_vlan=30,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x001e/0x0fff,dl_dst=10:00:00:00:00:01 priority=32768 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. No match.</span><br><span class="line">            drop</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0,dl_vlan=30, priority 99</span><br><span class="line">    output:1</span><br><span class="line">     &gt;&gt; skipping output to input port</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:3</span><br><span class="line">    output:4</span><br><span class="line"></span><br><span class="line">Final flow: in_port=1,vlan_tci=0x0000,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=30,dl_vlan_pcp=0,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,3,4</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=4,dl_src=20:00:00:00:00:01,dl_dst=10:00:00:00:00:01 -generate</span><br><span class="line">Flow: in_port=4,vlan_tci=0x0000,dl_src=20:00:00:00:00:01,dl_dst=10:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=4,vlan_tci=0x0000, priority 99</span><br><span class="line">    mod_vlan_vid:30</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x001e/0x0fff,dl_dst=20:00:00:00:00:01 priority=32768 actions=load:0x4-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. vlan_tci=0x001e/0x0fff,dl_dst=10:00:00:00:00:01, priority 32768</span><br><span class="line">            load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0x1, priority 32768</span><br><span class="line">    output:1</span><br><span class="line"></span><br><span class="line">Final flow: reg0=0x1,in_port=4,dl_vlan=30,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=20:00:00:00:00:01,dl_dst=10:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=4,vlan_tci=0x0000,dl_src=20:00:00:00:00:01,dl_dst=10:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: push_vlan(vid=30,pcp=0),1</span><br><span class="line"></span><br><span class="line"># ovs-appctl ofproto/trace br0 \</span><br><span class="line">&gt;     in_port=1,dl_vlan=30,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01 \</span><br><span class="line">&gt;     -generate</span><br><span class="line">Flow: in_port=1,dl_vlan=30,dl_vlan_pcp=0,vlan_tci1=0x0000,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line"></span><br><span class="line">bridge(&quot;br0&quot;)</span><br><span class="line">-------------</span><br><span class="line"> 0. priority 0</span><br><span class="line">    resubmit(,1)</span><br><span class="line"> 1. in_port=1, priority 99</span><br><span class="line">    resubmit(,2)</span><br><span class="line"> 2. priority 32768</span><br><span class="line">    learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15])</span><br><span class="line">     -&gt; table=10 vlan_tci=0x001e/0x0fff,dl_dst=10:00:00:00:00:01 priority=32768 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,3)</span><br><span class="line"> 3. priority 50</span><br><span class="line">    resubmit(,10)</span><br><span class="line">    10. vlan_tci=0x001e/0x0fff,dl_dst=20:00:00:00:00:01, priority 32768</span><br><span class="line">            load:0x4-&gt;NXM_NX_REG0[0..15]</span><br><span class="line">    resubmit(,4)</span><br><span class="line"> 4. reg0=0x4, priority 32768</span><br><span class="line">    strip_vlan</span><br><span class="line">    output:4</span><br><span class="line"></span><br><span class="line">Final flow: reg0=0x4,in_port=1,vlan_tci=0x0000,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Megaflow: recirc_id=0,eth,in_port=1,dl_vlan=30,dl_vlan_pcp=0,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01,dl_type=0x0000</span><br><span class="line">Datapath actions: pop_vlan,4</span><br></pre></td></tr></table></figure>
<h3 id="The-learning-tables-table-10"><a href="#The-learning-tables-table-10" class="headerlink" title="The learning tables: table 10"></a>The learning tables: table 10</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ovs-ofctl dump-flows br0</span><br><span class="line"> cookie=0x0, duration=5216.779s, table=0, n_packets=0, n_bytes=0, dl_src=01:00:00:00:00:00/01:00:00:00:00:00 actions=drop</span><br><span class="line"> cookie=0x0, duration=5206.049s, table=0, n_packets=0, n_bytes=0, dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0 actions=drop</span><br><span class="line"> cookie=0x0, duration=5196.394s, table=0, n_packets=0, n_bytes=0, priority=0 actions=resubmit(,1)</span><br><span class="line"> cookie=0x0, duration=5132.916s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p1 actions=resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=4889.197s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p2,vlan_tci=0x0000 actions=mod_vlan_vid:20,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=4889.121s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p3,vlan_tci=0x0000 actions=mod_vlan_vid:30,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=4889.121s, table=1, n_packets=0, n_bytes=0, priority=99,in_port=p4,vlan_tci=0x0000 actions=mod_vlan_vid:30,resubmit(,2)</span><br><span class="line"> cookie=0x0, duration=5149.526s, table=1, n_packets=0, n_bytes=0, priority=0 actions=drop</span><br><span class="line"> cookie=0x0, duration=4742.616s, table=2, n_packets=0, n_bytes=0, actions=learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]-&gt;NXM_NX_REG0[0..15]),resubmit(,3)</span><br><span class="line"> cookie=0x0, duration=4705.289s, table=3, n_packets=0, n_bytes=0, priority=99,dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 actions=resubmit(,4)</span><br><span class="line"> cookie=0x0, duration=4609.060s, table=3, n_packets=0, n_bytes=0, priority=50 actions=resubmit(,10),resubmit(,4)</span><br><span class="line"> cookie=0x0, duration=4572.579s, table=4, n_packets=0, n_bytes=0, reg0=0x1 actions=output:p1</span><br><span class="line"> cookie=0x0, duration=2594.644s, table=4, n_packets=0, n_bytes=0, reg0=0x2 actions=strip_vlan,output:p2</span><br><span class="line"> cookie=0x0, duration=2594.643s, table=4, n_packets=0, n_bytes=0, reg0=0x3 actions=strip_vlan,output:p3</span><br><span class="line"> cookie=0x0, duration=2594.643s, table=4, n_packets=0, n_bytes=0, reg0=0x4 actions=strip_vlan,output:p4</span><br><span class="line"> cookie=0x0, duration=2575.640s, table=4, n_packets=0, n_bytes=0, priority=50,reg0=0 actions=output:p1</span><br><span class="line"> cookie=0x0, duration=2575.640s, table=4, n_packets=0, n_bytes=0, priority=99,reg0=0,dl_vlan=20 actions=output:p1,strip_vlan,output:p2</span><br><span class="line"> cookie=0x0, duration=2575.640s, table=4, n_packets=0, n_bytes=0, priority=99,reg0=0,dl_vlan=30 actions=output:p1,strip_vlan,output:p3,output:p4</span><br><span class="line"> cookie=0x0, duration=602.623s, table=10, n_packets=0, n_bytes=0, vlan_tci=0x0014/0x0fff,dl_dst=50:00:00:00:00:01 actions=load:0x2-&gt;NXM_NX_REG0[0..15]</span><br><span class="line"> cookie=0x0, duration=537.283s, table=10, n_packets=0, n_bytes=0, vlan_tci=0x0014/0x0fff,dl_dst=f0:00:00:00:00:01 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line"> cookie=0x0, duration=494.330s, table=10, n_packets=0, n_bytes=0, vlan_tci=0x0014/0x0fff,dl_dst=90:00:00:00:00:01 actions=load:0x2-&gt;NXM_NX_REG0[0..15]</span><br><span class="line"> cookie=0x0, duration=134.061s, table=10, n_packets=0, n_bytes=0, vlan_tci=0x001e/0x0fff,dl_dst=10:00:00:00:00:01 actions=load:0x1-&gt;NXM_NX_REG0[0..15]</span><br><span class="line"> cookie=0x0, duration=101.484s, table=10, n_packets=0, n_bytes=0, vlan_tci=0x001e/0x0fff,dl_dst=20:00:00:00:00:01 actions=load:0x4-&gt;NXM_NX_REG0[0..15]</span><br></pre></td></tr></table></figure>

<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a class="link"   href="http://docs.openvswitch.org/en/latest/intro/install/general/" >Open vSwitch on Linux<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="http://docs.openvswitch.org/en/latest/tutorials/ovs-advanced/" >Open vSwitch Advanced Features<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>PRACTICE</category>
      </categories>
      <tags>
        <tag>Open vSwitch</tag>
        <tag>ovs-sandbox</tag>
        <tag>flow table</tag>
        <tag>ofprot/trace</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm Graph</title>
    <url>/2019/12/01/algorithm-graph/</url>
    <content><![CDATA[<h1 id="DFS-and-BFS"><a href="#DFS-and-BFS" class="headerlink" title="DFS and BFS"></a>DFS and BFS</h1><p>DFS with recursive, while BFS with queue, caution for loops.</p>
<p>DFS pseudocode steps:<br>I. if node is Null return<br>II. access node<br>III. access left node, recursive<br>IV. access right node, recursive<br><img src="DFS.png" alt="DFS"></p>
<p>BFS pseudocode steps:<br>I. create queue<br>II. if node is not Null<br>III. push left/right node in queue<br>IV. pop queue, goto step II<br><img src="BFS.png" alt="BFS"></p>
<h1 id="Shortest-Path-Algorithm"><a href="#Shortest-Path-Algorithm" class="headerlink" title="Shortest Path Algorithm"></a>Shortest Path Algorithm</h1><ul>
<li><a class="link"   href="https://www.geeksforgeeks.org/floyd-warshall-algorithm-dp-16/" >Floyd Warshall Algorithm<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p><strong>All Pairs Shortest Path problem</strong><br>We initialize the solution matrix same as the input graph matrix as a first step. Then we update the solution matrix by considering all vertices as an intermediate vertex. The idea is to one by one pick all vertices and updates all shortest paths which include the picked vertex as an intermediate vertex in the shortest path. When we pick vertex number k as an intermediate vertex, we already have considered vertices {0, 1, 2, .. k-1} as intermediate vertices. For every pair (i, j) of the source and destination vertices respectively, there are two possible cases.</p>
<ol>
<li>k is not an intermediate vertex in shortest path from i to j. We keep the value of dist[i][j] as it is.</li>
<li>k is an intermediate vertex in shortest path from i to j. We update the value of dist[i][j] as dist[i][k] + dist[k][j] if dist[i][j] &gt; dist[i][k] + dist[k][j]<br>The following figure shows the above optimal substructure property in the all-pairs shortest path problem.<br>![Floyd Warshall Algorithm](Floyd Warshall Algorithm.jpg)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Solves the all-pairs shortest path problem using Floyd Warshall algorithm </span><br><span class="line">void floydWarshall (int graph[][V]) </span><br><span class="line">&#123; </span><br><span class="line">    /* dist[][] will be the output matrix that will finally have the shortest  </span><br><span class="line">      distances between every pair of vertices */</span><br><span class="line">    int dist[V][V], i, j, k; </span><br><span class="line">  </span><br><span class="line">    /* Initialize the solution matrix same as input graph matrix. Or  </span><br><span class="line">       we can say the initial values of shortest distances are based </span><br><span class="line">       on shortest paths considering no intermediate vertex. */</span><br><span class="line">    for (i = 0; i &lt; V; i++) </span><br><span class="line">        for (j = 0; j &lt; V; j++) </span><br><span class="line">            dist[i][j] = graph[i][j]; </span><br><span class="line">  </span><br><span class="line">    /* Add all vertices one by one to the set of intermediate vertices. </span><br><span class="line">      ---&gt; Before start of an iteration, we have shortest distances between all </span><br><span class="line">      pairs of vertices such that the shortest distances consider only the </span><br><span class="line">      vertices in set &#123;0, 1, 2, .. k-1&#125; as intermediate vertices. </span><br><span class="line">      ----&gt; After the end of an iteration, vertex no. k is added to the set of </span><br><span class="line">      intermediate vertices and the set becomes &#123;0, 1, 2, .. k&#125; */</span><br><span class="line">    for (k = 0; k &lt; V; k++) </span><br><span class="line">    &#123; </span><br><span class="line">        // Pick all vertices as source one by one </span><br><span class="line">        for (i = 0; i &lt; V; i++) </span><br><span class="line">        &#123; </span><br><span class="line">            // Pick all vertices as destination for the </span><br><span class="line">            // above picked source </span><br><span class="line">            for (j = 0; j &lt; V; j++) </span><br><span class="line">            &#123; </span><br><span class="line">                // If vertex k is on the shortest path from </span><br><span class="line">                // i to j, then update the value of dist[i][j] </span><br><span class="line">                if (dist[i][k] + dist[k][j] &lt; dist[i][j]) &#123;</span><br><span class="line">                    // here we can add an array to record the path</span><br><span class="line">                    // path[j] = k;</span><br><span class="line">                    dist[i][j] = dist[i][k] + dist[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    // Print the shortest distance matrix </span><br><span class="line">    printSolution(dist); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><a class="link"   href="https://www.geeksforgeeks.org/bellman-ford-algorithm-dp-23/" >Bellman–Ford Algorithm<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p><strong>Single Source Shortest Path</strong></p>
<ol>
<li>This step initializes distances from source to all vertices as infinite and distance to source itself as 0. Create an array dist[] of size |V| with all values as infinite except dist[src] where src is source vertex.</li>
<li>This step calculates shortest distances. Do following |V|-1 times where |V| is the number of vertices in given graph.<br>…..a) Do following for each edge u-v<br>………………If dist[v] &gt; dist[u] + weight of edge uv, then update dist[v]<br>………………….dist[v] = dist[u] + weight of edge uv</li>
<li>This step reports if there is a negative weight cycle in graph. Do following for each edge u-v<br>……If dist[v] &gt; dist[u] + weight of edge uv, then “Graph contains negative weight cycle”<br>The idea of step 3 is, step 2 guarantees shortest distances if graph doesn’t contain negative weight cycle. If we iterate through all edges one more time and get a shorter path for any vertex, then there is a negative weight cycle<br>How does this work? Like other Dynamic Programming Problems, the algorithm calculate shortest paths in bottom-up manner. It first calculates the shortest distances which have at-most one edge in the path. Then, it calculates shortest paths with at-most 2 edges, and so on. After the i-th iteration of outer loop, the shortest paths with at most i edges are calculated. There can be maximum |V| – 1 edges in any simple path, that is why the outer loop runs |v| – 1 times. The idea is, assuming that there is no negative weight cycle, if we have calculated shortest paths with at most i edges, then an iteration over all edges guarantees to give shortest path with at-most (i+1) edges (Proof is simple, you can refer <a class="link"   href="http://courses.csail.mit.edu/6.006/spring11/lectures/lec15.pdf" >this<i class="fas fa-external-link-alt"></i></a> or <a class="link"   href="https://www.youtube.com/watch?v=Ttezuzs39nk" >MIT Video Lecture<i class="fas fa-external-link-alt"></i></a>)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// The main function that finds shortest distances from src to </span><br><span class="line">// all other vertices using Bellman-Ford algorithm.  The function </span><br><span class="line">// also detects negative weight cycle </span><br><span class="line">void BellmanFord(struct Graph* graph, int src) </span><br><span class="line">&#123; </span><br><span class="line">    int V = graph-&gt;V; </span><br><span class="line">    int E = graph-&gt;E; </span><br><span class="line">    int dist[V]; </span><br><span class="line">  </span><br><span class="line">    // Step 1: Initialize distances from src to all other vertices </span><br><span class="line">    // as INFINITE </span><br><span class="line">    for (int i = 0; i &lt; V; i++) </span><br><span class="line">        dist[i] = INT_MAX; </span><br><span class="line">    dist[src] = 0; </span><br><span class="line">  </span><br><span class="line">    // Step 2: Relax all edges |V| - 1 times. A simple shortest </span><br><span class="line">    // path from src to any other vertex can have at-most |V| - 1 </span><br><span class="line">    // edges </span><br><span class="line">    for (int i = 1; i &lt;= V - 1; i++) &#123; </span><br><span class="line">        for (int j = 0; j &lt; E; j++) &#123; </span><br><span class="line">            int u = graph-&gt;edge[j].src; </span><br><span class="line">            int v = graph-&gt;edge[j].dest; </span><br><span class="line">            int weight = graph-&gt;edge[j].weight; </span><br><span class="line">            if (dist[u] != INT_MAX &amp;&amp; dist[u] + weight &lt; dist[v]) &#123;</span><br><span class="line">                // here we can add an array to record the path</span><br><span class="line">                // path[v] = u;</span><br><span class="line">                dist[v] = dist[u] + weight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    // Step 3: check for negative-weight cycles.  The above step </span><br><span class="line">    // guarantees shortest distances if graph doesn&#x27;t contain </span><br><span class="line">    // negative weight cycle.  If we get a shorter path, then there </span><br><span class="line">    // is a cycle. </span><br><span class="line">    for (int i = 0; i &lt; E; i++) &#123; </span><br><span class="line">        int u = graph-&gt;edge[i].src; </span><br><span class="line">        int v = graph-&gt;edge[i].dest; </span><br><span class="line">        int weight = graph-&gt;edge[i].weight; </span><br><span class="line">        if (dist[u] != INT_MAX &amp;&amp; dist[u] + weight &lt; dist[v]) &#123; </span><br><span class="line">            printf(&quot;Graph contains negative weight cycle&quot;); </span><br><span class="line">            return; // If negative cycle is detected, simply return </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">  </span><br><span class="line">    printArr(dist, V); </span><br><span class="line">  </span><br><span class="line">    return; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><a class="link"   href="https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/" >Dijkstra’s shortest path algorithm<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h1 id="Detect-Cycle"><a href="#Detect-Cycle" class="headerlink" title="Detect Cycle"></a>Detect Cycle</h1><ul>
<li><a class="link"   href="https://www.geeksforgeeks.org/topological-sorting-indegree-based-solution/" >Kahn’s algorithm<i class="fas fa-external-link-alt"></i></a><br>Steps involved in finding the topological ordering of a DAG(Directed Acyclic Graph):</li>
</ul>
<p><em>Step-1:</em> Compute in-degree (number of incoming edges) for each of the vertex present in the DAG and initialize the count of visited nodes as 0.<br><em>Step-2:</em> Pick all the vertices with in-degree as 0 and add them into a queue (Enqueue operation)<br><em>Step-3:</em> Remove a vertex from the queue (Dequeue operation) and then.</p>
<ul>
<li>Increment count of visited nodes by 1.</li>
<li>Decrease in-degree by 1 for all its neighboring nodes.</li>
<li>If in-degree of a neighboring nodes is reduced to zero, then add it to the queue.</li>
</ul>
<p>  <em>Step 5:</em> Repeat Step 3 until the queue is empty.<br>  <em>Step 5:</em> If count of visited nodes is not equal to the number of nodes in the graph then the topological sort is not possible for the given graph. <em>There is a loop when the queue size not equal the vertices.</em></p>
<ul>
<li>union–find data structure<br>A disjoint-set data structure is a data structure that keeps track of a set of elements partitioned into a number of disjoint (non-overlapping) subsets. A union-find algorithm is an algorithm that performs two useful operations on such a data structure:<br>Find: Determine which subset a particular element is in. This can be used for determining if two elements are in the same subset.<br>Union: Join two subsets into a single subset.</li>
</ul>
<ul>
<li>naive way<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// A utility function to find the subset of an element i </span><br><span class="line">int find(int parent[], int i) </span><br><span class="line">&#123; </span><br><span class="line">    if (parent[i] == -1) </span><br><span class="line">        return i; </span><br><span class="line">    return find(parent, parent[i]); </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">// A utility function to do union of two subsets  </span><br><span class="line">void Union(int parent[], int x, int y) </span><br><span class="line">&#123; </span><br><span class="line">    int xset = find(parent, x); </span><br><span class="line">    int yset = find(parent, y); </span><br><span class="line">    if(xset!=yset)&#123; </span><br><span class="line">       parent[xset] = yset; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">// The main function to check whether a given graph contains  </span><br><span class="line">// cycle or not </span><br><span class="line">int isCycle( struct Graph* graph ) </span><br><span class="line">&#123; </span><br><span class="line">    // Allocate memory for creating V subsets </span><br><span class="line">    int *parent = (int*) malloc( graph-&gt;V * sizeof(int) ); </span><br><span class="line">  </span><br><span class="line">    // Initialize all subsets as single element sets </span><br><span class="line">    memset(parent, -1, sizeof(int) * graph-&gt;V); </span><br><span class="line">  </span><br><span class="line">    // Iterate through all edges of graph, find subset of both </span><br><span class="line">    // vertices of every edge, if both subsets are same, then  </span><br><span class="line">    // there is cycle in graph. </span><br><span class="line">    for(int i = 0; i &lt; graph-&gt;E; ++i) </span><br><span class="line">    &#123; </span><br><span class="line">        int x = find(parent, graph-&gt;edge[i].src); </span><br><span class="line">        int y = find(parent, graph-&gt;edge[i].dest); </span><br><span class="line">  </span><br><span class="line">        if (x == y) </span><br><span class="line">            return 1; </span><br><span class="line">  </span><br><span class="line">        Union(parent, x, y); </span><br><span class="line">    &#125; </span><br><span class="line">    return 0; </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li>
<li>optimize with rank and path compression<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct subset </span><br><span class="line">&#123; </span><br><span class="line">    int parent; </span><br><span class="line">    int rank; </span><br><span class="line">&#125;; </span><br><span class="line">  </span><br><span class="line">// Creates a graph with V vertices and E edges </span><br><span class="line">struct Graph* createGraph(int V, int E) </span><br><span class="line">&#123; </span><br><span class="line">    struct Graph* graph = (struct Graph*) malloc( sizeof(struct Graph) ); </span><br><span class="line">    graph-&gt;V = V; </span><br><span class="line">    graph-&gt;E = E; </span><br><span class="line">  </span><br><span class="line">    graph-&gt;edge = (struct Edge*) malloc( graph-&gt;E * sizeof( struct Edge ) ); </span><br><span class="line">  </span><br><span class="line">    return graph; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">// A utility function to find set of an element i </span><br><span class="line">// (uses path compression technique) </span><br><span class="line">int find(struct subset subsets[], int i) </span><br><span class="line">&#123; </span><br><span class="line">    // find root and make root as parent of i (path compression) </span><br><span class="line">    if (subsets[i].parent != i) </span><br><span class="line">        subsets[i].parent = find(subsets, subsets[i].parent); </span><br><span class="line">  </span><br><span class="line">    return subsets[i].parent; </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line">// A function that does union of two sets of x and y </span><br><span class="line">// (uses union by rank) </span><br><span class="line">void Union(struct subset subsets[], int x, int y) </span><br><span class="line">&#123; </span><br><span class="line">    int xroot = find(subsets, x); </span><br><span class="line">    int yroot = find(subsets, y); </span><br><span class="line">  </span><br><span class="line">    // Attach smaller rank tree under root of high rank tree </span><br><span class="line">    // (Union by Rank) </span><br><span class="line">    if (subsets[xroot].rank &lt; subsets[yroot].rank) </span><br><span class="line">        subsets[xroot].parent = yroot; </span><br><span class="line">    else if (subsets[xroot].rank &gt; subsets[yroot].rank) </span><br><span class="line">        subsets[yroot].parent = xroot; </span><br><span class="line">  </span><br><span class="line">    // If ranks are same, then make one as root and increment </span><br><span class="line">    // its rank by one </span><br><span class="line">    else</span><br><span class="line">    &#123; </span><br><span class="line">        subsets[yroot].parent = xroot; </span><br><span class="line">        subsets[xroot].rank++; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a class="link"   href="https://www.geeksforgeeks.org/fundamentals-of-algorithms/" >Geeks Algorithms<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>graph</tag>
        <tag>shortest path</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm the last but not the least</title>
    <url>/2018/08/31/algorithm-the-last/</url>
    <content><![CDATA[<h3 id="Dynamic-Programing"><a href="#Dynamic-Programing" class="headerlink" title="Dynamic Programing"></a>Dynamic Programing</h3><h4 id="knapsack-problem"><a href="#knapsack-problem" class="headerlink" title="knapsack problem"></a>knapsack problem</h4><ul>
<li>You’re a thief with a knapsack that can carry 4 lb of goods, You have four items that you can put into the knapsack.</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Stereo</th>
<th align="left">Laptop</th>
<th align="left">Guitar</th>
<th align="left">Iphone</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$3000</td>
<td align="left">$2000</td>
<td align="left">$1500</td>
<td align="left">$2000</td>
</tr>
<tr>
<td align="left">4lbs</td>
<td align="left">3lbs</td>
<td align="left">1lbs</td>
<td align="left">1lbs</td>
</tr>
</tbody></table>
<ul>
<li>solution of knapsack problem<br><img src="knapsack-problem.png" alt="solution of knapsack problem"></li>
</ul>
<h4 id="longest-common-substring"><a href="#longest-common-substring" class="headerlink" title="longest common substring"></a>longest common substring</h4><ul>
<li>calculate the longest common substring between <em>blue</em> and <em>clues</em>, <em>fosh</em> compare with <em>fish</em>, <em>fort</em>, longest common substring is used for word wrap.</li>
<li>solution of longest common substring<br><img src="longest-common-substring.png" alt="solution of longest common substring"></li>
</ul>
<h3 id="K-Nearest-Neighbors"><a href="#K-Nearest-Neighbors" class="headerlink" title="K-Nearest-Neighbors"></a>K-Nearest-Neighbors</h3><ul>
<li>Classification, categorization into a group.</li>
<li>Regression, predicting a response (like a number).</li>
<li>Feature extraction means converting an item (like a fruit or a user) into a list of numbers that can be compared.</li>
<li>Picking good features is an important part of a successful KNN algorithm.</li>
</ul>
<h3 id="Algorithms-Go-Next"><a href="#Algorithms-Go-Next" class="headerlink" title="Algorithms, Go Next"></a>Algorithms, Go Next</h3><ul>
<li><strong>Trees</strong>, self-banlance tree, B-trees, Red-black trees, Heaps, Splay trees.</li>
<li><strong>Inverted indexes</strong>, a hash that maps words to places where they appear.</li>
<li><strong>The Fourier transform</strong>, given a smoothie, the Fourier transform will tell you the ingredients in the smoothie.</li>
<li><strong>Parallel algorithms</strong>, consider for overhead of managing the parallelism and load balancing.</li>
<li><strong>Map Reduce</strong>, the map function and the reduce function.</li>
<li><strong>Bloom filters</strong>, Bloom filters are probabilistic data structures. Bloom filters are great because they take up very little space.<ul>
<li>False positives are possible. Google might say, “You’ve already crawled this site,” even though you haven’t.</li>
<li>False negatives aren’t possible. If the bloom filter says, “You haven’t crawled this site,” then you definitely haven’t crawled this site.</li>
</ul>
</li>
<li><strong>HyperLogLog</strong>, HyperLogLog approximates the number of unique elements in a set. Just like bloom filters, it won’t give you an exact answer, but it comes very close and uses only a fraction of the memory a task like this would otherwise take.</li>
<li><strong>The SHA algorithms</strong>, a one-way hash, can’t convert those hashes back to the original, and it’s locality insensitive, opposite with Simhash.</li>
<li><strong>Diffie-Hellman key exchange</strong>, private key and public key.</li>
<li><strong>Linear programming</strong>, is used to maximize something given some constraints, such as the knapsack problem.</li>
</ul>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a class="link"   href="https://www.geeksforgeeks.org/" >GeeksforGeeks<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>dynamic programing</tag>
        <tag>k-nearest-neighbors</tag>
        <tag>more algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Virtualization Nitro</title>
    <url>/2020/08/02/aws-virtualization/</url>
    <content><![CDATA[<h3 id="AWS-Virtualization-Evolution-History"><a href="#AWS-Virtualization-Evolution-History" class="headerlink" title="AWS Virtualization Evolution History"></a>AWS Virtualization Evolution History</h3><p>AWS virtualization evolution history: cpu/memory, io(network, storage), hypervisor.<br><img src="aws-ec2-types.png" alt="AWS Virtualization Evolution History"></p>
<h3 id="AWS-Nitro-System"><a href="#AWS-Nitro-System" class="headerlink" title="AWS Nitro System"></a>AWS Nitro System</h3><p>AWS nitro system: nitro card, nitro security chip, nitro hypervisor.</p>
<ul>
<li>Nitro System<br><img src="aws-nitro-three-parts.png" alt="AWS Nitro System"></li>
<li>Nitro Diagram：simple and clean<br><img src="nitro-diagram.png" alt="AWS Nitro Diagram：simple and clean"></li>
<li>Nitro hypervisor based on KVM<br><img src="c5-nitro-hypervisor-based-on-kvm-with-custom-vmm.png" alt="Nitro hypervisor"></li>
<li>Nitro hypervisor jitter：close to bare metal performance<br><img src="nitro-hypervisor-jitter.png" alt="Nitro hypervisor jitter"></li>
<li>Nitro next: has published Graviton(arm) and amd instance, closed-loop of public cloud ecology</li>
</ul>
<h3 id="A-Tip-of-AWS-Ecosystem-Strategy"><a href="#A-Tip-of-AWS-Ecosystem-Strategy" class="headerlink" title="A Tip of AWS Ecosystem Strategy"></a>A Tip of AWS Ecosystem Strategy</h3><ul>
<li>Alliance with vmware, seize traditional IT customers, and lead the data to AWS(Data is the portal)<br><img src="alliance-with-vmware.png" alt="Alliance with vmware"></li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="http://www.brendangregg.com/blog/2017-11-29/aws-ec2-virtualization-2017.html" >AWS EC2 Virtualization 2017: Introducing Nitro<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.youtube.com/watch?v=LabltEXk0VQ" >AWS re:Invent 2017: C5 Instances and the Evolution of Amazon EC2 Virtualization (CMP332)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://aws-de-media.s3.amazonaws.com/images/AWS_Summit_2018/June7/Alexandria/Introducing-Nitro.pdf" >AWS EC2 Virtualization: Introducing Nitro<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.youtube.com/watch?v=rUY-00yFlE4" >AWS re:Invent 2019: Powering next-gen Amazon EC2: Deep dive into the Nitro system (CMP303-R2)<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>aws nitro</tag>
        <tag>virtualization</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary Index Tree</title>
    <url>/2020/01/10/binary-index-tree/</url>
    <content><![CDATA[<h3 id="Binary-Index-Tree"><a href="#Binary-Index-Tree" class="headerlink" title="Binary Index Tree"></a>Binary Index Tree</h3><p>Binary Indexed Tree also called Fenwick Tree provides a way to represent an array of numbers in an array, allowing prefix sums to be calculated efficiently. For example, an array [2, 3, -1, 0, 6] is given, then the prefix sum of first 3 elements [2, 3, -1] is 2 + 3 + -1 = 4. Calculating prefix sum efficiently is useful in various scenarios. Let’s start with a simple problem.</p>
<pre><code>Problem:
Description of GCD Sum
Function F is defined as,
F(x) = GCD(1,x) + GCD(2,x) + ... + GCD(x,x)
where GCD is the Greatest Common Divisor.

Given an array A of size N, there are 2 types of queries:
1. C X Y : Compute the value of (F(A[X]) + F(A[X+1]) + F(A[X+2]) + ... + F(A[Y])) (mod(10^9 + 7))
2. U X Y: Update the element of array A[X] = Y

Input:
First line of input contains integer N, size of the array.
Next line contains N space separated integers the elements of A.
Next line contains integer Q, number of queries.
Next Q lines contains one of the two queries.

Output:
For each of the first type of query, output the required sum mod(10^9 + 7).

Constraints:
1&lt;=N&lt;=10^6
1&lt;=Q&lt;=10^5
1&lt;=A[i]&lt;=5*10^5

For update,
1&lt;=X&lt;=N
1&lt;=Y&lt;5*10^5

For compute,
1&lt;=X&lt;=Y&lt;=N

SAMPLE INTPU:
3
3 4 3
6
C 1 2
C 1 3
C 3 3
U 1 4
C 1 3
C 1 2

SAMPLE OUTPUT:
13
18
5
21
16
</code></pre>
<h3 id="Binarty-Index-Tree-Layout"><a href="#Binarty-Index-Tree-Layout" class="headerlink" title="Binarty Index Tree Layout"></a>Binarty Index Tree Layout</h3><p>//for ease, we make sure our given array is 1-based indexed<br>int a[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};<br><img src="binary-index-tree.jpg" alt="Binary Index Tree Layout"></p>
<h3 id="Code-Implementation"><a href="#Code-Implementation" class="headerlink" title="Code Implementation"></a>Code Implementation</h3><ul>
<li><p>Main</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">#define V_MAX (500000 + 1)</span><br><span class="line">#define MOD_BASE (1000000000 + 7)</span><br><span class="line"></span><br><span class="line">//#define DBG(f_, ...) do &#123; printf((f_), ##__VA_ARGS__); &#125; while(0)</span><br><span class="line">#define DBG(f_, ...)</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int *arr;</span><br><span class="line">    long long *BIT;</span><br><span class="line">    int i, size, opts, value;</span><br><span class="line">    long long phi[V_MAX], sums[V_MAX];</span><br><span class="line">    char opt;</span><br><span class="line">    int x, y;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d\n&quot;, &amp;size);</span><br><span class="line">    arr = malloc(sizeof(int) * (size + 1));</span><br><span class="line">    if (!arr) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    BIT = malloc(sizeof(long long) * (size + 1));</span><br><span class="line">    if (!BIT) &#123;</span><br><span class="line">        free(arr);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    memset(arr, 0, sizeof(int) * (size + 1));</span><br><span class="line">    memset(BIT, 0, sizeof(int) * (size + 1));</span><br><span class="line">    </span><br><span class="line">    memset(phi, 0, sizeof(phi));</span><br><span class="line">    memset(sums, 0, sizeof(sums));</span><br><span class="line">    SumOfGCDs(sums, phi, V_MAX);</span><br><span class="line">    </span><br><span class="line">    DBG(&quot;Array size %d\n&quot;, size);</span><br><span class="line">    i = 0;</span><br><span class="line">    while ((++i) &lt;= size &amp;&amp; (scanf(&quot;%d&quot;, &amp;value) != EOF)) &#123;</span><br><span class="line">        if (value &gt;= V_MAX) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[i] = sums[value];</span><br><span class="line">        Update(BIT, i, arr[i], size);</span><br><span class="line">        </span><br><span class="line">        DBG(&quot;arr[%d] = %d, gcdsum=%d\n&quot;, i, value, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d\n&quot;, &amp;opts);</span><br><span class="line">    DBG(&quot;Options %d\n&quot;, opts);</span><br><span class="line">    i = 0;</span><br><span class="line">    while ((++i) &lt;= opts &amp;&amp; (scanf(&quot;%c %d %d\n&quot;, &amp;opt, &amp;x, &amp;y) != EOF)) &#123;</span><br><span class="line">        int nValue;</span><br><span class="line">        </span><br><span class="line">        DBG(&quot;Opt: %c %d %d\n&quot;, opt, x, y);</span><br><span class="line">        switch (opt) &#123;</span><br><span class="line">            case &#x27;C&#x27;:</span><br><span class="line">                printf(&quot;%d\n&quot;, (Query(BIT, y) - Query(BIT, x - 1)) % MOD_BASE);</span><br><span class="line">                break;</span><br><span class="line">            case &#x27;U&#x27;:</span><br><span class="line">                nValue = sums[y];</span><br><span class="line">                Update(BIT, x, -arr[x], size);</span><br><span class="line">                Update(BIT, x, nValue, size);</span><br><span class="line">                arr[x] = nValue;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    free(arr);</span><br><span class="line">    free(BIT);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Construct&amp;Update</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Update(long long *BIT, int idx, long long diff, int n)</span><br><span class="line">&#123;</span><br><span class="line">    for (; idx &lt;= n; idx += (idx &amp; (-idx))) &#123;</span><br><span class="line">        BIT[idx] += diff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Query</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">long long Query(long long *BIT, int idx)</span><br><span class="line">&#123;</span><br><span class="line">    long long sum = 0;</span><br><span class="line">    </span><br><span class="line">    for (; idx &gt; 0; idx -= (idx &amp; (-idx))) &#123;</span><br><span class="line">        sum += BIT[idx];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Euler’s Totient function</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Precomputation of phi[] numbers. Refer below link </span><br><span class="line">// for details : https://goo.gl/LUqdtY </span><br><span class="line">void ComputeTotient(long long *phi, int size) </span><br><span class="line">&#123;</span><br><span class="line">    int i, j;</span><br><span class="line">    </span><br><span class="line">    // Refer https://goo.gl/LUqdtY </span><br><span class="line">    phi[1] = 1; </span><br><span class="line">    for (i = 2; i &lt; size; i++) &#123;</span><br><span class="line">        if (!phi[i]) &#123;</span><br><span class="line">            phi[i] = i - 1; </span><br><span class="line">            </span><br><span class="line">            for (j = (i &lt;&lt; 1); j &lt; size; j += i) &#123;</span><br><span class="line">                if (!phi[j])</span><br><span class="line">                    phi[j] = j;</span><br><span class="line">  </span><br><span class="line">                phi[j] = (phi[j]/i) * (i - 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SumOfGCDs(long long *sums, long long *phi, int size)</span><br><span class="line">&#123;</span><br><span class="line">    int i, j, k;</span><br><span class="line">    </span><br><span class="line">    ComputeTotient(phi, size);</span><br><span class="line">    </span><br><span class="line">    for (i = 1; i &lt; size; i++) &#123;</span><br><span class="line">        // Iterate throght all the divisors </span><br><span class="line">        // of i. </span><br><span class="line">        for (j = i, k = 1; j &lt; size; j += i, k++) &#123;</span><br><span class="line">            sums[j] += (i*phi[k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Cautions</p>
</li>
</ul>
<p>– sum overflow, so with long long<br>– index 0 is ommited of BIT array</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://www.hackerearth.com/zh/practice/" >HackerEarth Practice<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.hackerearth.com/zh/practice/algorithms/searching/linear-search/tutorial/" >HackerEarth Algorithms<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.hackerearth.com/zh/practice/data-structures/advanced-data-structures/segment-trees/tutorial/" >HackerEarth Data Structure<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.geeksforgeeks.org/summation-gcd-pairs-n/" >Summation of GCD of all the pairs up to N<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>fenwick tree</tag>
        <tag>binary index tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Block IO Path in Kernel</title>
    <url>/2018/04/01/bio-path/</url>
    <content><![CDATA[<h3 id="Block-io-Path"><a href="#Block-io-Path" class="headerlink" title="Block io Path"></a>Block io Path</h3><ul>
<li><p>Block io Path Overview<br><img src="bio-path.jpg" alt="Block io Path Overview"></p>
</li>
<li><p>Linux VFS cache path, submit_bh –&gt; submit_bio.</p>
</li>
</ul>
<h3 id="Chanllenges"><a href="#Chanllenges" class="headerlink" title="Chanllenges"></a>Chanllenges</h3><ul>
<li>Single-queue contend between multi-cpus and multi-threads, <a class="link"   href="https://events.static.linuxfound.org/sites/events/files/slides/scsi.pdf" >High Performance Storage with blk-mq and scsi-mq(Christoph Hellwig)<i class="fas fa-external-link-alt"></i></a>.</li>
</ul>
<h3 id="Related-Books"><a href="#Related-Books" class="headerlink" title="Related Books"></a>Related Books</h3><ul>
<li>存储技术原理分析 作者：敖青云</li>
<li>EMC’s Information Storage and Management</li>
</ul>
<h3 id="Extended-Reading-Articles"><a href="#Extended-Reading-Articles" class="headerlink" title="Extended Reading Articles"></a>Extended Reading Articles</h3><ul>
<li><a class="link"   href="https://lwn.net/Articles/336224/" >Linux kernel design patterns - part 1<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://lwn.net/Articles/336255/" >Linux kernel design patterns - part 2<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://lwn.net/Articles/336262/" >Linux kernel design patterns - part 3<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>KERNEL</category>
      </categories>
      <tags>
        <tag>storage</tag>
        <tag>block io</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploy k3s on RaspberryPi4B</title>
    <url>/2021/09/12/deploy-k3s-on-raspberrypi4b/</url>
    <content><![CDATA[<h3 id="Download-k3s-v1-21-4-k3s1"><a href="#Download-k3s-v1-21-4-k3s1" class="headerlink" title="Download k3s, v1.21.4+k3s1"></a>Download k3s, v1.21.4+k3s1</h3><ul>
<li>get the binary<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/k3s-io/k3s/releases/download/v1.21.4%2Bk3s1/k3s-arm64</span><br><span class="line">sudo chmod +x k3s-arm64</span><br><span class="line">sudo cp k3s-arm64 /usr/sbin/</span><br><span class="line">sudo ln -s /usr/sbin/k3s-arm64 /usr/sbin/k3s</span><br></pre></td></tr></table></figure></li>
<li>check config<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo k3s check-config</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Delploy-the-server-and-agent"><a href="#Delploy-the-server-and-agent" class="headerlink" title="Delploy the server and agent"></a>Delploy the server and agent</h3><ul>
<li>run the server <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># opntion, sudo ifconfig eth0 192.168.168.1/24</span><br><span class="line"># su root</span><br><span class="line">sudo nohup k3s server --node-ip 192.168.168.1 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li>
<li>run the agent on a different node<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># opntion, sudo ifconfig eth0 192.168.168.2/24</span><br><span class="line"># replace the *192.168.168.1* with your own server ip</span><br><span class="line"># NODE_TOKEN comes from /var/lib/rancher/k3s/server/node-token on your server</span><br><span class="line"># sudo cat /var/lib/rancher/k3s/server/node-token</span><br><span class="line">sudo k3s agent --server https://192.168.168.1:6443 --token $&#123;NODE_TOKEN&#125;</span><br></pre></td></tr></table></figure></li>
<li>change node role<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo k3s kubectl get nodes</span><br><span class="line">NAME      STATUS   ROLES                  AGE   VERSION</span><br><span class="line">up-pi     Ready    &lt;none&gt;                 17m   v1.21.4+k3s1</span><br><span class="line">down-pi   Ready    control-plane,master   50m   v1.21.4+k3s1</span><br><span class="line"></span><br><span class="line">$ sudo k3s kubectl label --overwrite nodes up-pi kubernetes.io/role=worker</span><br><span class="line"></span><br><span class="line">$ sudo k3s kubectl get nodes</span><br><span class="line">NAME      STATUS   ROLES                  AGE     VERSION</span><br><span class="line">down-pi   Ready    control-plane,master   5h8m    v1.21.4+k3s1</span><br><span class="line">up-pi     Ready    worker                 4h36m   v1.21.4+k3s1</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Delploy-prometheus-operator-Not-complete"><a href="#Delploy-prometheus-operator-Not-complete" class="headerlink" title="Delploy prometheus-operator(Not complete)"></a>Delploy prometheus-operator(Not complete)</h3><ul>
<li>download prometheus, 0.50.0<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/prometheus-operator/prometheus-operator/archive/refs/tags/v0.50.0.tar.gz</span><br><span class="line">tar -xvf prometheus-operator-0.50.0.tar.gz</span><br><span class="line">cd prometheus-operator-0.50.0</span><br><span class="line">sed -i &#x27;s/namespace: default/namespace: monitoring/g&#x27; bundle.yaml</span><br></pre></td></tr></table></figure></li>
<li>deploy and query<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo k3s kubectl create namespace monitoring</span><br><span class="line">sudo k3s kubectl get namespaces</span><br><span class="line"># sudo k3s kubectl delete namespace monitoring</span><br><span class="line">sudo k3s kubectl apply -n monitoring -f bundle.yaml</span><br><span class="line"># sudo k3s kubectl delete -n monitoring -f bundle.yaml</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo k3s kubectl get pods -n monitoring</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">prometheus-operator-54c4665c6b-vqbfk   1/1     Running   0          78s</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Deploy-prometheus-operator-kube-prometheus"><a href="#Deploy-prometheus-operator-kube-prometheus" class="headerlink" title="Deploy prometheus-operator/kube-prometheus"></a>Deploy prometheus-operator/kube-prometheus</h3><ul>
<li>deploy <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo k3s kubectl create -f manifests/setup</span><br><span class="line">sudo k3s kubectl create -f manifests/</span><br><span class="line"># sudo k3s kubectl delete --ignore-not-found=true -f manifests/ -f manifests/setup</span><br><span class="line">$ sudo k3s kubectl get pods -n monitoring</span><br></pre></td></tr></table></figure></li>
<li>debug<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo k3s kubectl logs -f -n monitoring prometheus-operator-7775c66ccf-fdqsq</span><br><span class="line">error: a container name must be specified for pod prometheus-operator-7775c66ccf-fdqsq, choose one of: [prometheus-operator kube-rbac-proxy]</span><br><span class="line"></span><br><span class="line">$ sudo k3s kubectl logs -f -n monitoring prometheus-operator-7775c66ccf-fdqsq -c prometheus-operator</span><br></pre></td></tr></table></figure></li>
<li>access<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo k3s kubectl --namespace monitoring port-forward svc/prometheus-k8s 9090</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Deploy-carlosedp-cluster-monitoring"><a href="#Deploy-carlosedp-cluster-monitoring" class="headerlink" title="Deploy carlosedp/cluster-monitoring"></a>Deploy carlosedp/cluster-monitoring</h3><ul>
<li><p>download and set config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/carlosedp/cluster-monitoring.git</span><br></pre></td></tr></table></figure>
<p>modify config file <em>vars.jsonnet</em>: k3s.enabled, k3s.master_ip, suffixDomain, traefikExporter, armExporter</p>
</li>
<li><p>deploy and query status</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ make vendor</span><br><span class="line">$ make</span><br><span class="line">$ kubectl apply -f manifests/setup/</span><br><span class="line">$ kubectl apply -f manifests/</span><br><span class="line"># sudo k3s kubectl delete --ignore-not-found=true -f manifests/ -f manifests/setup</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo k3s kubectl get pods -n monitoring</span><br><span class="line">NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class="line">prometheus-operator-67755f959-kp9jn   2/2     Running   0          30m</span><br><span class="line">kube-state-metrics-6cb6df5d4-xcb22    3/3     Running   0          30m</span><br><span class="line">node-exporter-twbjr                   2/2     Running   0          30m</span><br><span class="line">node-exporter-k84g2                   2/2     Running   0          30m</span><br><span class="line">prometheus-adapter-585b57857b-b7mw7   1/1     Running   0          30m</span><br><span class="line">arm-exporter-flm96                    2/2     Running   0          30m</span><br><span class="line">arm-exporter-svvpm                    2/2     Running   0          30m</span><br><span class="line">grafana-7bc4784744-w9wk4              1/1     Running   0          30m</span><br><span class="line">alertmanager-main-0                   2/2     Running   0          30m</span><br><span class="line">prometheus-k8s-0                      3/3     Running   1          30m</span><br></pre></td></tr></table></figure></li>
<li><p>access grafana</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo k3s kubectl get ingress -n monitoring</span><br><span class="line">[sudo] password for down: </span><br><span class="line">NAME                CLASS    HOSTS                               ADDRESS                        PORTS     AGE</span><br><span class="line">alertmanager-main   &lt;none&gt;   alertmanager.192.168.168.1.nip.io   192.168.124.20,192.168.168.1   80, 443   30m</span><br><span class="line">grafana             &lt;none&gt;   grafana.192.168.168.1.nip.io        192.168.124.20,192.168.168.1   80, 443   30m</span><br><span class="line">prometheus-k8s      &lt;none&gt;   prometheus.192.168.168.1.nip.io     192.168.124.20,192.168.168.1   80, 443   30m</span><br></pre></td></tr></table></figure>
<p><img src="./grafana.jpg" alt="grafana console"></p>
</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a class="link"   href="https://github.com/k3s-io/k3s" >k3s github README<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://rancher.com/docs/k3s/latest/en/installation/install-options/server-config/" >K3s Server Configuration Reference<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/prometheus-operator/kube-prometheus#quickstart" >prometheus-operator/kube-prometheus Quickstart<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/carlosedp/cluster-monitoring" >carlosedp/cluster-monitoring Quickstart for K3s<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://rpi4cluster.com/monitoring/monitor-intro/" >rpi4cluster monitoring k3s<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>PRACTICE</category>
      </categories>
      <tags>
        <tag>k3s</tag>
        <tag>raspberry pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Design Patterns and UML</title>
    <url>/2019/10/02/design-patterns/</url>
    <content><![CDATA[<h1 id="Princinples"><a href="#Princinples" class="headerlink" title="Princinples"></a>Princinples</h1><ul>
<li><p>The Open Closed Princinple(OCP)<br>A module should be open for extension but closed for modification. In other words, modules can be extened, without requiring them to be modified in existing source codes. This means that, with a llitle forethought, wd can add new features to existing code, without changing the existing code and by only adding new code. Symptoms of Rotting Design, rigidity, fragility, immobility, vicosity.</p>
</li>
<li><p>The Liskov Substitution Princile(LSP)<br>Subclasses should be substitutable for their base classes. It alse derives freom the concept of Design by Contract(DBC), e.g. circle/ellipse dilemma.</p>
</li>
<li><p>The Dependency Inversion Principle(DIP)<br>Denpand upon abstractions, do not depend upon concretions.</p>
</li>
<li><p>The Interface Segregation Principle(ISP)<br>Many client specific interfaces are better than on general purpose interface.</p>
</li>
<li><p>Principles of Package architecture</p>
</li>
</ul>
<p>– The release reuse equivalency principle(REP), the granule of reuse is the granule of release.<br>– The common closure principle(CCP), classes that change together, belong together.<br>– The common reuse principle(CRP), classed that are not reused together should not be grouped together.<br>– The acyclic dependencies principle(ADP), the dependencies between packages must not form cycles.<br>– The stable dependencies principle(SDP), depend in the direction of stability.</p>
<h1 id="Patterns-of-Object-Oriented-Architecture"><a href="#Patterns-of-Object-Oriented-Architecture" class="headerlink" title="Patterns of Object Oriented Architecture"></a>Patterns of Object Oriented Architecture</h1><ul>
<li><p>Creational Patterns</p>
<ul>
<li>Abstract Factory, Factory Method<br>The DIP strongly recommends that modules not depend upon concrete classed. However, in order to create an instane fo a class, you must depend upon the concrete class. Abstract factory is a pattern that allows that dependency upon the concreate class to exist in on, and only one, place.</li>
<li>Template(extend), Builder(implement)</li>
<li>Singleton<br>Avoid creating an object everytime.</li>
<li>Decorator, Prototype</li>
</ul>
</li>
<li><p>Structural Patterns</p>
<ul>
<li>Adapter, Facade<br>When inserting an abstract interface is infeasible because the server is third party software, or is so heavily depended upon that it can not easily be changed, and ADAPTER can be used to bind the abstract interface to the server.<br>The adapter is an object that implements the abstract interface to delegate to the server. Every methon of the adpater simply translates and then delegates.</li>
<li>Bridge<br>One of the problems with implementing an abstract class with inheritance is that the derived class is so tightly coupled to the base classes. This can lead to problems when other clients want to use the derived class functions without draging along the bagae of the base hiearchy, decouple an abstraction from its implementation.<br>Adapter makes things work after they’re designed, bridge makes them work before they are.</li>
<li>Proxy, Abstract Server<br>When a client depends directly on a server, the DIP is violated. Changes to the server will propogate to the client, and the client will be unable to easily use similar servers. This can be recified by inserting an interface between the client and the server, to produce a unified interface for a number of underlying and unrelated objects.</li>
<li>Flyweight, Composite, Decorator</li>
</ul>
</li>
<li><p>Behavioral Patterns</p>
<ul>
<li>Observer<br>It often occurs that one element of a design needs to take some form of action when another element in the design dicovers that an event has occurred. However, we frequently donot want the detector to know about the actor.</li>
<li>Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Mememnto</li>
<li>State, Strategy, Visitor</li>
<li>Template Method</li>
</ul>
</li>
</ul>
<h1 id="UML-Unified-Modeling-Language"><a href="#UML-Unified-Modeling-Language" class="headerlink" title="UML(Unified Modeling Language)"></a>UML(Unified Modeling Language)</h1><ul>
<li>UML Diagrams</li>
</ul>
<p>– Behavioral UML Diagram: Sequence Diagram: Activity diagram, Use Case diagram, Interaction Overview Diagram, Timing Diagram, State Machine Diagram, Communication Diagram, Sequence Diagram<br>– Structural UML Diagram: Class Diagram, Object Diagram, Component Diagram, Composite Structure Diagram, Deployment Diagram, Deployment Diagram, Profile Diagram</p>
<ul>
<li>UML Notations</li>
</ul>
<p>– Relationships: Dependency Notation, Association Notation, Generalization Notation, Extensibility Notation<br>– Relationships between classes<br><img src="07-relationships-between-classes.png" alt="Relationships between classes"><br>– Class Diagram Example: Order System<br><img src="17-class-diagram-example-order-system.png" alt="Class Diagram Example: Order System"><br>– Class Diagram Example: GUI<br><img src="18-uml-class-diagram-example-gui.png" alt="Class Diagram Example: GUI"></p>
<h1 id="Referencs"><a href="#Referencs" class="headerlink" title="Referencs"></a>Referencs</h1><ul>
<li><a class="link"   href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/" >UML Class Diagram Tutorial<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://tallyfy.com/uml-diagram/#composite-structure-diagram" >All You Need to Know About UML Diagrams: Types and 5+ Examples<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>THEORY</category>
      </categories>
      <tags>
        <tag>design patterns</tag>
        <tag>uml</tag>
      </tags>
  </entry>
  <entry>
    <title>Ethernet, Fibre Channel and InfiniBand</title>
    <url>/2018/08/26/ethernet-fibrechannel-infiniband/</url>
    <content><![CDATA[<p>Ethernet and its slower speed cousins are the networking technology of choice for client-server networks, Fibre Channel is the fabric technology for storage applications, and InfiniBand Architecture is introduced as a fabric technology for CPU-memory complex to adapter connections.</p>
<table>
<thead>
<tr>
<th align="left">Technology</th>
<th align="left">Standards Body</th>
<th align="left">Signaling Speed(Y2018)</th>
<th align="left">First Standard</th>
<th align="left">Maximum frame size</th>
<th align="left">Primary Application</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ethernet</td>
<td align="left"><a class="link"   href="https://ethernetalliance.org/" >IEEE<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">200Gb</td>
<td align="left">Y1999</td>
<td align="left">1.5K/9k</td>
<td align="left">Local Area Network(LAN)</td>
</tr>
<tr>
<td align="left">Fibre Channel</td>
<td align="left"><a class="link"   href="https://fibrechannel.org/" >ANSI<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">128Gb</td>
<td align="left">Y1988</td>
<td align="left">2K</td>
<td align="left">Storage Area Network(SAN)</td>
</tr>
<tr>
<td align="left">InfiniBand</td>
<td align="left"><a class="link"   href="https://www.infinibandta.org/" >InfiniBand Trade Association<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">600Gb</td>
<td align="left">Y2001</td>
<td align="left">4K</td>
<td align="left">IO Area Network(IAN)</td>
</tr>
</tbody></table>
<p>Network Technology Choices in the Data Center(bandwidth, latency and reliability):<br><img src="datacenter_choice.png" alt=" Network Technology Choices in the Data Center"></p>
<h3 id="RoadMap"><a href="#RoadMap" class="headerlink" title="RoadMap"></a>RoadMap</h3><ul>
<li><p>Fibre Channel RoadMap<br><img src="fibrechannle_roadmap.png" alt="Fibre Channel RoadMap"></p>
</li>
<li><p>Fibre Channel is doomed:</p>
<ul>
<li>Modern Ethernet Outperforms Fibre Channel</li>
<li>iSER(iSCSI Extensions for RDMA) Turbocharges iSCSI</li>
<li>Flash: Fast Storage Needs Fast Networking, but speed of FC’s improvement is slower than ethernet</li>
</ul>
</li>
<li><p>Ethernet RoadMap<br><img src="ethernet_roadmap.png" alt="Ethernet RoadMap"></p>
</li>
<li><p>InfiniBand RoadMap<br><img src="InfiniBand_roadmap.jpg" alt="InfiniBand RoadMap"></p>
</li>
</ul>
<h3 id="Reliability-congestion-control-over-subscription-or-over-commit"><a href="#Reliability-congestion-control-over-subscription-or-over-commit" class="headerlink" title="Reliability, congestion control, over-subscription or over-commit"></a>Reliability, congestion control, over-subscription or over-commit</h3><ul>
<li><p>Fibre Channel, Lossless data delivery with buffer to buffer credit, congestion strategy is “pause it”.<br><img src="fibrechannel_cogestion.png" alt="Fibre Channel Congestion Bandwidth"></p>
</li>
<li><p><a class="link"   href="https://fibrechannel.org/wp-content/uploads/2018/02/FCIA_Fibre_Channel_Performance_Congestion_Slowdrain_and_Over_Utilization_Final.pdf" >Fibre Channel Performance: Congestion, Slow Drain, and Over Utilization<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>Ethernet, based on Transport Layer Protocols, congestion strategy is “drop it”.<br><img src="ethernet_congestion_control.jpg" alt="TCP Congestion Bandwidth Utiliztion"></p>
</li>
</ul>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>There are a variety of switched fabrics and networks to apply to the problem of server I/O. The selection of the “best” technology depends on particular situations, legacy installations, and the desired application. The Ethernet technologies are well suited for client-server connections in a LAN environment, and Fibre Channel technology is the well suited for storage applications in a SAN. InfiniBand is a new technology well suited for interconnection of CPU-memory complexes to I/O in an IAN. A fabric-based IAN enables clustering as well as connections to I/O controllers.</p>
<p>The comparison of these three, layered technologies demonstrated a striking similarity, yet there are subtle differences evident in specific installations. The management model of these three technologies is different, each one supporting the needs of the application. Ethernet network management is loosely defined, and is tolerant of peer nodes joining and leaving segments. There is no need for a node to communicate with a central management entity. This pure peer-to-peer network has few dependencies on the existence of particular nodes, which can be good when a network spans hundreds of offices.</p>
<p>Management of a fabric is better defined out of necessity. The fabric manager must configure each node as it joins the fabric. It implements partitioning and provides a central directory to discover attached nodes. Fibre Channel defines a fabric manager to reside in the fabric, and relies upon proprietary implementations to expand management across many switches. InfiniBand takes this one step further and defines the management entity such that it can reside on any node of the network. It configures and manages the subnet in a manner defined by the InfiniBand Architecture Specification.</p>
<p>Application protocols traditionally favor particular technologies. Most client-server communication is based on TCP/IP or similar protocols. Storage protocols are based on SCSI-3 in the enterprise environment. The protocols used between CPU-memory complexes and adapters have been a mix of bus protocols and custom control messages, and InfiniBand Architecture will standardize these connections. InfiniBand also enables a new level of clustering by allowing CPU-memory complexes to directly communicate using the IAN.</p>
<p>The future belongs to ethernet and infiband, Fibre Channle will be out?</p>
<p>Ethernet is really easy to build for one, two, three, even four user Ethernet SAN, cause you’ll end up with oversubscription. Unfortunately, errors can still happen- Ethernet is not a guaranteed in-order delivery, nor a guaranteed latency, Fibre Channel is.</p>
<p>With fibre channel, in-order guaranteed latency is possible, and scalable to larger amounts of systems.</p>
<p>Ultimately, with Ethernet you can find yourself with multiple drop-frames and other issues during a production. </p>
<h3 id="Alliances-or-Standards"><a href="#Alliances-or-Standards" class="headerlink" title="Alliances or Standards"></a>Alliances or Standards</h3><ul>
<li><a class="link"   href="https://ethernetalliance.org/" >Ethernet Alliance<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.openfabrics.org/" >Open Fabric Alliance<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.infinibandta.org/" >InfiniBand Association<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://fibrechannel.org/" >Fibre Channel Industry Association<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Forum"><a href="#Forum" class="headerlink" title="Forum"></a>Forum</h3><ul>
<li><a class="link"   href="https://edgeoptic.com/" >Edge Optic<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>INDUSTRY</category>
      </categories>
      <tags>
        <tag>hardware</tag>
        <tag>ethernet</tag>
        <tag>fibre channel</tag>
        <tag>infiniband</tag>
      </tags>
  </entry>
  <entry>
    <title>Expert &amp; Association Map</title>
    <url>/2020/10/28/expert-association-map/</url>
    <content><![CDATA[<p>Build a map of technical experts and associations, try to stand on the shoulder of giants :)</p>
<h3 id="Experts"><a href="#Experts" class="headerlink" title="Experts"></a>Experts</h3><ul>
<li>Computer Scientists<ul>
<li><a class="link"   href="https://scholar.google.com.sg/citations?hl=en&user=tp07xT0AAAAJ" >John L. Hennessy<i class="fas fa-external-link-alt"></i></a>: Stanford University, <a class="link"   href="https://scholar.google.com.sg/scholar?hl=en&as_sdt=0,5&q=John+L.+Hennessy&btnG=" >scholar links<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://scholar.google.com.sg/citations?user=Wj4ZBFIAAAAJ&hl=en&oi=sra" >David A. Patterson<i class="fas fa-external-link-alt"></i></a>: Professor of Computer Science, UC Berkeley, <a class="link"   href="https://scholar.google.com.sg/scholar?hl=en&as_sdt=0,5&q=David+A.+Patterson&btnG=" >scholar links<i class="fas fa-external-link-alt"></i></a></li>
<li>Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau: University of Wisconsin-Madison, <a class="link"   href="https://pages.cs.wisc.edu/~remzi/OSTEP/" >Operating Systems: Three Easy Pieces<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li>Maintainors<ul>
<li>KVM &amp; Qemu: <a class="link"   href="https://scholar.google.com.sg/scholar?hl=en&as_sdt=0,5&q=Gleb+Natapov&btnG=" >Gleb Natapov<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://scholar.google.com.sg/scholar?hl=en&as_sdt=0,5&q=Paolo+Bonzini&btnG=" >Paolo Bonzini<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li>Industry<ul>
<li>James B. Keller, a Microprocessor Engineer, <a class="link"   href="https://scholar.google.com.sg/scholar?hl=en&as_sdt=0,5&q=James+B.+Keller&btnG=" >scholar links<i class="fas fa-external-link-alt"></i></a></li>
<li>Gerard Williams III, a Senior Director at Apple and Chief CPU Architect for nearly a decade</li>
</ul>
</li>
<li>Analysts<ul>
<li><a class="link"   href="https://janakiram.com/" >JANAKIRAM MSV<i class="fas fa-external-link-alt"></i></a>: Analyst. Advisor. Architect. the convergence of machine intelligence and modern infrastructure.</li>
</ul>
</li>
</ul>
<h3 id="Associations"><a href="#Associations" class="headerlink" title="Associations"></a>Associations</h3><ul>
<li><a class="link"   href="https://amturing.acm.org/" >A.M. Turing Award<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://supercomputing.org/" >SuperComputing<i class="fas fa-external-link-alt"></i></a></li>
<li>General: standard organizations, industry associations and conferences<ul>
<li><a href="https://www.acm.org/"><strong>ACM</strong></a>: Association for Computing Machinery, <a class="link"   href="https://dl.acm.org/sigs" >SIGs<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://dl.acm.org/conferences" >Conferences<i class="fas fa-external-link-alt"></i></a><ul>
<li><a class="link"   href="https://www.acm.org/conferences/best-paper-awards" >Conferences Best Paper Awards<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a href="https://www.usenix.org/"><strong>usenix</strong></a>: the Advanced Computing Systems Association, <a class="link"   href="https://www.usenix.org/conference" >Conferences<i class="fas fa-external-link-alt"></i></a><ul>
<li><a class="link"   href="https://www.usenix.org/conferences/best-papers" >Best Papers<i class="fas fa-external-link-alt"></i></a>: <em>OSDI Jay Lepreau Best Paper Award</em>, <em>ATC Best Paper Award</em></li>
</ul>
</li>
<li><a class="link"   href="https://www.linuxfoundation.org/" >Linux Foundation<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="https://events.linuxfoundation.org/" >Events<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://ietf.org/" >IETF<i class="fas fa-external-link-alt"></i></a>: Internet Engineering Task Force</li>
<li><a class="link"   href="https://www.ieee.org/" >IEEE<i class="fas fa-external-link-alt"></i></a>: Institute of Electrical and Electronics Engineers<ul>
<li><a class="link"   href="https://ieeexplore.ieee.org/xpl/conhome/9499716/proceeding" >Annual International Symposium on Computer Architecture, ISCA<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="https://www.ccf.org.cn/" >CCF<i class="fas fa-external-link-alt"></i></a>: China Computer Federation</li>
<li><a class="link"   href="https://www.linaro.org/events/" >Linaro Events<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://fosdem.org/" >FOSDEM<i class="fas fa-external-link-alt"></i></a>: a free event for software developers to meet, share ideas and collaborate.</li>
</ul>
</li>
<li>Network: standard organizations, industry associations and conferences<ul>
<li><a class="link"   href="https://dl.acm.org/conference/ancs" >ACM ANCS<i class="fas fa-external-link-alt"></i></a>: Architecture for Networking and Communications Systems</li>
<li><a class="link"   href="https://www.usenix.org/conferences/byname/178" >usenix NSDI Symposia<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.tiaonline.org/" >TIA<i class="fas fa-external-link-alt"></i></a>: Telecommunications Industry Association</li>
<li><a class="link"   href="http://www.incits.org/" >INCITS<i class="fas fa-external-link-alt"></i></a>: the InterNational Committee for Information Technology Standards</li>
<li><a class="link"   href="https://www.oasis-open.org/committees/" >OASIS Technical Committees<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=virtio" >virtio<i class="fas fa-external-link-alt"></i></a> etc.</li>
</ul>
</li>
<li>Hypervisor: standard organizations, industry associations and conferences<ul>
<li><a class="link"   href="https://dl.acm.org/conference/sosp" >ACM SOSP<i class="fas fa-external-link-alt"></i></a>: ACM Symposium on Operating Systems Principles</li>
<li><a class="link"   href="http://www.eurosys.org/" >ACM EUROSYS<i class="fas fa-external-link-alt"></i></a>: European Conference on Computer Systems</li>
<li><a class="link"   href="https://dl.acm.org/conference/vee" >ACM VEE<i class="fas fa-external-link-alt"></i></a>: ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments</li>
<li><a class="link"   href="https://www.usenix.org/conferences/byname/179" >usenix OSDI Symposia<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://events.linuxfoundation.org/events/kvm-forum" >KVM Forum<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://events.docker.com/events/dockercon/" >DockerCon<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.cncf.io/" >CNCF<i class="fas fa-external-link-alt"></i></a>: cloud native computing foundation</li>
</ul>
</li>
<li>Storage: standard organizations, industry associations and conferences<ul>
<li><a class="link"   href="https://nvmexpress.org/" >NVMe<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.snia.org/" >SNIA<i class="fas fa-external-link-alt"></i></a>: Storage Networking Industry Association</li>
<li><a class="link"   href="https://www.snia.org/events/storage-developer" >SDC<i class="fas fa-external-link-alt"></i></a>: Storage Developer Conference</li>
</ul>
</li>
<li>Chips<ul>
<li><a class="link"   href="https://www.hotchips.org/" >Hot Chips<i class="fas fa-external-link-alt"></i></a>: A Symposium on High Performance Chips</li>
<li><a class="link"   href="https://www.linleygroup.com/" >The Linley Group<i class="fas fa-external-link-alt"></i></a>: The Industry’s leading experts in semiconductor markets</li>
</ul>
</li>
</ul>
<h3 id="Industry-Events"><a href="#Industry-Events" class="headerlink" title="Industry Events"></a>Industry Events</h3><ul>
<li><a href="https://www.nextplatform.com/">THE<strong>NEXT</strong>PLATFORM</a>: published by Stackhouse Publishing Inc in partnership with the UK’s top technology publication, <a class="link"   href="https://www.theregister.com/" >The Register<i class="fas fa-external-link-alt"></i></a>. Offers in-depth coverage of high-end computing at large enterprises, supercomputing centers, hyperscale data centers, and public clouds.</li>
<li><a class="link"   href="https://thesixfivesummit.com/" >The Six Five Summit<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.nvidia.com/en-us/gtc/" >NVIDIA GTC<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.arm.com/company/events" >ARM Events<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.intel.com/content/www/us/en/search.html?ws=text#q=Intel%20Architecture%20Day&sort=relevancy" >Intel Architecture Day<i class="fas fa-external-link-alt"></i></a>, <a href="https://www.vmware.com/vmworld/en/index.html">VMware <strong>vm</strong>world</a></li>
<li><a class="link"   href="https://www.technologyreview.com/topic/computing/" >MIT Technology Review Topics Computing<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Research-Institutes"><a href="#Research-Institutes" class="headerlink" title="Research Institutes"></a>Research Institutes</h3><ul>
<li><a class="link"   href="https://www.berkeley.edu/" >UC Berkeley<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www2.eecs.berkeley.edu/Research/Areas/Centers/" >EECS<i class="fas fa-external-link-alt"></i></a><ul>
<li><a class="link"   href="https://rise.cs.berkeley.edu/" >RISELab at UC Berkeley<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://amplab.cs.berkeley.edu/" >AMPLab<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="http://wuklab.io/" >WukLab<i class="fas fa-external-link-alt"></i></a>, Dept of Computer Science and Engineering University of California, Building Next-Generation Datacenter Systems</li>
<li><a class="link"   href="https://vt.edu/" >Virginia Tech<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.research.vt.edu/institutes.html" >Research Institutes<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://www.research.vt.edu/institutes/college-dept-research-centers-labs-groups.html" >university research centers<i class="fas fa-external-link-alt"></i></a> <ul>
<li><a class="link"   href="https://www.ssrg.ece.vt.edu/" >System Software Research Group<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="https://www.ssrg.ece.vt.edu/projects.html" >projects<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="https://www.stevens.edu/" >Stevens Institute of Technology<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.stevens.edu/research-entrepreneurship/research-centers-labs" >Research Centers &amp; Labs<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.llnl.gov/" >Lawrence Livermore National Laboratory<i class="fas fa-external-link-alt"></i></a>, area of HPC.</li>
</ul>
]]></content>
      <categories>
        <category>INDUSTRY</category>
      </categories>
      <tags>
        <tag>expert</tag>
        <tag>association</tag>
      </tags>
  </entry>
  <entry>
    <title>Flow Acceleration</title>
    <url>/2018/06/30/flow-acceleration/</url>
    <content><![CDATA[<p>DPDK 17.02’s rte_flow, the framework of hardware acceleration.</p>
<ul>
<li>flowtable-hwaccel-flowchart<br><img src="flowtable-hwaccel-flowchart.png" alt="flowtable-hwaccel-flowchart"></li>
</ul>
<p><a class="link"   href="https://www.napatech.com/" >napatech’s<i class="fas fa-external-link-alt"></i></a> illustration:</p>
<ul>
<li><a class="link"   href="https://www.napatech.com/hw-acceleration-via-rte_flow/" >Acceleration in HW is Boosting Performance. In DPDK 17.02 rte_Flow is the Enabler<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.napatech.com/acl-hw-acceleration-vpp/" >ACL HW acceleration in VPP shows great performance improvements<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>DPDK’s flow acceleration framework</p>
<ul>
<li><p>flow attribute, item and action, see <a class="link"   href="http://git.dpdk.org/dpdk/tree/lib/librte_ethdev/rte_flow.h" >rte_flow.h<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>Pattern items fall in two categories:<ul>
<li>Matching protocol headers and packet data, usually associated with a specification structure. These must be stacked in the same order as the protocol layers to match inside packets, starting from the lowest.</li>
<li>Matching meta-data or affecting pattern processing, often without a specification structure. Since they do not match packet contents, their position in the list is usually not relevant.</li>
</ul>
</li>
<li>Supported actions, they fall in three categories:<ul>
<li>Actions that modify the fate of matching traffic, for instance by dropping or assigning it a specific destination.</li>
<li>Actions that modify matching traffic contents or its properties. This includes adding/removing encapsulation, encryption, compression and marks.</li>
<li>Actions related to the flow rule itself, such as updating counters or making it non-terminating.</li>
</ul>
</li>
<li><a class="link"   href="http://git.dpdk.org/dpdk/tree/lib/librte_ethdev/rte_ethdev_core.h#n360" >eth_filter_ctrl_t<i class="fas fa-external-link-alt"></i></a>, e.g. <a class="link"   href="http://git.dpdk.org/dpdk/tree/drivers/net/ixgbe/ixgbe_ethdev.c#n6734" >ixgbe_dev_filter_ctrl<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://git.dpdk.org/dpdk/tree/drivers/net/i40e/i40e_ethdev.c#n9862" >i40e_dev_filter_ctrl<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><p>example of flow aaceleartion, <a class="link"   href="http://git.dpdk.org/dpdk/tree/examples/flow_filtering/flow_blocks.c" >generate_ipv4_flow<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">initialize of struct rte_flow_attr</span><br><span class="line">	--&gt; struct rte_flow_item</span><br><span class="line">		--&gt; struct rte_flow_action</span><br><span class="line">			--&gt; rte_flow_create()</span><br><span class="line">				--&gt; eth_filter_ctrl_t, e.g. ixgbe_dev_filter_ctrl</span><br><span class="line">					--&gt; struct rte_flow_ops&#x27;s create, e.g. ixgbe_flow_create</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>flow offload</tag>
        <tag>acceleration</tag>
      </tags>
  </entry>
  <entry>
    <title>Function Calling Conventions</title>
    <url>/2018/12/26/function-calling-conventions/</url>
    <content><![CDATA[<h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><ul>
<li>Passing arguments: “passing arguments” is a way of saying that the calling function is writing data in the place where the called function will look for them. Arguments are passed before the call instruction is executed.</li>
<li>Right-to-Left and Left-to-Right: describe the manner that arguments are passed to the subroutine, in terms of the High-level code. For instance, the following C function call:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyFunction1(a, b);</span><br><span class="line">//will generate the following code if passed Left-to-Right:</span><br><span class="line">push a</span><br><span class="line">push b</span><br><span class="line">call _MyFunction</span><br><span class="line">//and will generate the following code if passed Right-to-Left:</span><br><span class="line">push b</span><br><span class="line">push a</span><br><span class="line">call _MyFunction</span><br></pre></td></tr></table></figure></li>
<li>Return value: Some functions return a value, and that value must be received reliably by the function’s caller. The called function places its return value in a place where the calling function can get it when execution returns. The called function stores the return value before executing the ret instruction.</li>
<li>Cleaning the stack: when arguments are pushed onto the stack, eventually they must be popped back off again. Whichever function, the caller or the callee, is responsible for cleaning the stack must reset the stack pointer to eliminate the passed arguments.</li>
<li>Calling function (the caller): The “parent” function that calls the subroutine. Execution resumes in the calling function directly after the subroutine call, unless the program terminates inside the subroutine.</li>
<li>Called function (the callee): The “child” function that gets called by the “parent”.</li>
<li>Name Decoration: When C code is translated to assembly code, the compiler will often “decorate” the function name by adding extra information that the linker will use to find and link to the correct functions. For most calling conventions, the decoration is very simple (often only an extra symbol or two to denote the calling convention), but in some extreme cases (notably C++ “thiscall” convention), the names are “mangled” severely.</li>
<li>Entry sequence (the function prologue): a few instructions at the beginning of a function, which prepare the stack and registers for use within the function.</li>
<li>Exit sequence (the function epilogue): a few instructions at the end of a function, which restore the stack and registers to the state expected by the caller, and return to the caller. Some calling conventions clean the stack in the exit sequence.</li>
<li>Call sequence: a few instructions in the middle of a function (the caller) which pass the arguments and call the called function. After the called function has returned, some calling conventions have one more instruction in the call sequence to clean the stack.</li>
</ul>
<h3 id="Stack-Frame"><a href="#Stack-Frame" class="headerlink" title="Stack Frame"></a>Stack Frame</h3><ul>
<li><p>Example Code, sum_till_max.c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;ctype.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define MAX (1UL &lt;&lt; 20)</span><br><span class="line"></span><br><span class="line">typedef unsigned long long u64;</span><br><span class="line">typedef unsigned int u32;</span><br><span class="line"></span><br><span class="line">u32 max_add_end = MAX;</span><br><span class="line"></span><br><span class="line">u64 sum_till_max(u32 n)</span><br><span class="line">&#123;</span><br><span class="line">  u64 sum;</span><br><span class="line">  n++;</span><br><span class="line">  sum = n;</span><br><span class="line"></span><br><span class="line">  if (n &lt; max_add_end)</span><br><span class="line">    sum += sum_till_max(n);</span><br><span class="line"></span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  u64 sum = 0;</span><br><span class="line"></span><br><span class="line">  if ((argc == 2) &amp;&amp; isdigit(*argv[1]))</span><br><span class="line">    max_add_end = strtoul(argv[1], NULL, 0);</span><br><span class="line"></span><br><span class="line">  if (max_add_end &gt; MAX || max_add_end == 0) &#123;</span><br><span class="line">    fprintf(stderr, &quot;Invalid number is specified\n&quot;);</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sum = sum_till_max(0);</span><br><span class="line">  printf(&quot;sum(0...%u) = %llu\n&quot;, max_add_end, sum);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Content Assemble Code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) disassemble main </span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x000000000040069b &lt;+0&gt;:	push   %rbp</span><br><span class="line">   0x000000000040069c &lt;+1&gt;:	mov    %rsp,%rbp</span><br><span class="line">   0x000000000040069f &lt;+4&gt;:	sub    $0x20,%rsp</span><br><span class="line">...</span><br><span class="line">   0x0000000000400744 &lt;+169&gt;:	jmp    0x400774 &lt;main+217&gt;</span><br><span class="line">   0x0000000000400746 &lt;+171&gt;:	mov    $0x0,%edi ----------------------------------------------------#1</span><br><span class="line">   0x000000000040074b &lt;+176&gt;:	callq  0x400666 &lt;sum_till_max&gt; --------------------------------------#2</span><br><span class="line">   0x0000000000400750 &lt;+181&gt;:	mov    %rax,-0x8(%rbp)</span><br><span class="line">   0x0000000000400754 &lt;+185&gt;:	mov    0x2008f6(%rip),%eax        # 0x601050 &lt;max_add_end&gt;</span><br><span class="line">...</span><br><span class="line">(gdb) disassemble sum_till_max </span><br><span class="line">Dump of assembler code for function sum_till_max:</span><br><span class="line">   0x0000000000400666 &lt;+0&gt;: 	push   %rbp ---------------------------------------------------------#3</span><br><span class="line">   0x0000000000400667 &lt;+1&gt;: 	mov    %rsp,%rbp ----------------------------------------------------#4</span><br><span class="line">   0x000000000040066a &lt;+4&gt;: 	sub    $0x20,%rsp ---------------------------------------------------#5</span><br><span class="line">   0x000000000040066e &lt;+8&gt;: 	mov    %edi,-0x14(%rbp)</span><br><span class="line">   0x0000000000400671 &lt;+11&gt;:	addl   $0x1,-0x14(%rbp) ---------------------------------------------#6</span><br><span class="line">   0x0000000000400675 &lt;+15&gt;:	mov    -0x14(%rbp),%eax</span><br><span class="line">   0x0000000000400678 &lt;+18&gt;:	mov    %rax,-0x8(%rbp)</span><br><span class="line">   0x000000000040067c &lt;+22&gt;:	mov    0x2009ce(%rip),%eax        # 0x601050 &lt;max_add_end&gt;</span><br><span class="line">   0x0000000000400682 &lt;+28&gt;:	cmp    %eax,-0x14(%rbp)</span><br><span class="line">   0x0000000000400685 &lt;+31&gt;:	jae    0x400695 &lt;sum_till_max+47&gt;</span><br><span class="line">   0x0000000000400687 &lt;+33&gt;:	mov    -0x14(%rbp),%eax</span><br><span class="line">   0x000000000040068a &lt;+36&gt;:	mov    %eax,%edi</span><br><span class="line">   0x000000000040068c &lt;+38&gt;:	callq  0x400666 &lt;sum_till_max&gt;</span><br><span class="line">   0x0000000000400691 &lt;+43&gt;:	add    %rax,-0x8(%rbp)</span><br><span class="line">   0x0000000000400695 &lt;+47&gt;:	mov    -0x8(%rbp),%rax</span><br><span class="line">   0x0000000000400699 &lt;+51&gt;:	leaveq --------------------------------------------------------------#7</span><br><span class="line">   0x000000000040069a &lt;+52&gt;:	retq ----------------------------------------------------------------#8</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://manybutfinite.com/post/journey-to-the-stack/" >journey to the stack<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://en.wikibooks.org/wiki/X86_Disassembly/Calling_Conventions" >x86 Disassembly/Calling Conventions<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>THEORY</category>
      </categories>
      <tags>
        <tag>calling conventions</tag>
      </tags>
  </entry>
  <entry>
    <title>Gartner&#39;s view of Technology and Company</title>
    <url>/2018/02/18/gartner/</url>
    <content><![CDATA[<h3 id="Research-Methodologies"><a href="#Research-Methodologies" class="headerlink" title="Research Methodologies"></a><a class="link"   href="https://www.gartner.com/technology/research/methodologies/methodology.jsp" >Research Methodologies<i class="fas fa-external-link-alt"></i></a></h3><ul>
<li><p><a class="link"   href="https://www.gartner.com/smarterwithgartner" >The Hyper Cycle<i class="fas fa-external-link-alt"></i></a><br>Description of technology trends, e.g. <a class="link"   href="https://www.gartner.com/smarterwithgartner/top-trends-in-the-gartner-hype-cycle-for-emerging-technologies-2017/" >Top Trends in the Gartner Hype Cycle for Emerging Technologies, 2017<i class="fas fa-external-link-alt"></i></a>.<br><img src="./gartner-hype-cycle.jpg" alt="The Hyper Cycle"></p>
</li>
<li><p><a class="link"   href="https://www.gartner.com/technology/research/methodologies/research_mq.jsp" >Gartner Magic Quadrant<i class="fas fa-external-link-alt"></i></a><br>Companies are classified by leaders, challengers, visionaries and niche players in a specific market.<br><img src="./gartner-magic-quadrant.jpg" alt="Gartner Magic Quadrant"></p>
</li>
<li><p><a class="link"   href="https://www.gartner.com/technology/research/methodologies/it-market-clock.jsp" >Gartner IT Market Clock<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.gartner.com/technology/research/methodologies/it-score.jsp" >Gartner ITScore<i class="fas fa-external-link-alt"></i></a>, and <a class="link"   href="https://www.gartner.com/technology/research/methodologies/methodology.jsp" >more<i class="fas fa-external-link-alt"></i></a>.<br><img src="./gartner-IT-market-clock.gif" alt="Gartner IT Market Clock"></p>
</li>
</ul>
<h3 id="Storage-amp-Disk-Arrays"><a href="#Storage-amp-Disk-Arrays" class="headerlink" title="Storage &amp; Disk Arrays"></a><a class="link"   href="http://enterprise.huawei.com/topic/huawei-gartner2016-mq-gpda-en/index.html" >Storage &amp; Disk Arrays<i class="fas fa-external-link-alt"></i></a></h3><ul>
<li><a class="link"   href="https://www.hpe.com/us/en/storage/3par.html" >HP 3PAR<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.hpe.com/us/en/storage/nimble.html" >Nimble<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.dellemc.com/en-us/index.htm" >DELL EMC<i class="fas fa-external-link-alt"></i></a>, the book <em>Information Storage and Management</em> is recommended.</li>
<li><a class="link"   href="https://www.netapp.com/us/index.aspx" >NetApp<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.ibm.com/storage" >IBM Storage<i class="fas fa-external-link-alt"></i></a>, visit <a class="link"   href="http://www.redbooks.ibm.com/" >redbook<i class="fas fa-external-link-alt"></i></a> to get more.</li>
</ul>
<h3 id="Cloud-Infrastructure-as-a-Service"><a href="#Cloud-Infrastructure-as-a-Service" class="headerlink" title="Cloud Infrastructure as a Service"></a><a class="link"   href="https://www.gartner.com/doc/3738058/magic-quadrant-cloud-infrastructure-service" >Cloud Infrastructure as a Service<i class="fas fa-external-link-alt"></i></a></h3><ul>
<li><a class="link"   href="https://aws.amazon.com/" >Amazon Web Services<i class="fas fa-external-link-alt"></i></a>, serverless(<a class="link"   href="https://aws.amazon.com/lambda/?nc1=h_ls" >Lambda<i class="fas fa-external-link-alt"></i></a>), <a class="link"   href="http://www.brendangregg.com/blog/2017-11-29/aws-ec2-virtualization-2017.html" >Nitro<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.annapurnalabs.com/" >AnnapurnaLabs<i class="fas fa-external-link-alt"></i></a><ul>
<li><a class="link"   href="https://www.aws.training/Training" >aws training<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="https://azure.microsoft.com/en-us/" >Azure<i class="fas fa-external-link-alt"></i></a><ul>
<li><a class="link"   href="https://azure.microsoft.com/en-us/training/" >azure training<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="https://www.aliyun.com/" >Aliyun<i class="fas fa-external-link-alt"></i></a><ul>
<li><a class="link"   href="https://edu.aliyun.com/" >aliyun edu<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="https://www.ibm.com/cloud/" >IBM<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.oracle.com/index.html" >Oracle<i class="fas fa-external-link-alt"></i></a></li>
<li>Challengers: <a class="link"   href="https://cloud.google.com/" >Google Cloud<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.huaweicloud.com/" >Huawei Cloud<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://cloud.tencent.com/" >Tencent Cloud<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>Iaas Industry named triple-A with AWS, Azure and Aliyun. The triple-A has taken the most of market share in global. The trend of cloud is the standalization of IT industry, just as the automotive manufacturing.</p>
<h3 id="Data-Warehouse-Database-Management-Systems"><a href="#Data-Warehouse-Database-Management-Systems" class="headerlink" title="Data Warehouse Database Management Systems"></a><a class="link"   href="https://www.gartner.com/doc/2678018/magic-quadrant-data-warehouse-database" >Data Warehouse Database Management Systems<i class="fas fa-external-link-alt"></i></a></h3><ul>
<li><a class="link"   href="https://www.teradata.com/" >Teradata<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.oracle.com/index.html" >Oracle<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.ibm.com/us-en/" >IBM<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.sap.com/index.html" >SAP<i class="fas fa-external-link-alt"></i></a></li>
<li>Microsoft</li>
</ul>
<p>Industry news <a class="link"   href="http://www.dbta.com/" >database trends and applications<i class="fas fa-external-link-alt"></i></a>.</p>
<h3 id="Analytics-and-Business-Intelligence"><a href="#Analytics-and-Business-Intelligence" class="headerlink" title="Analytics and Business Intelligence"></a><a class="link"   href="https://www.tableau.com/reports/gartner" >Analytics and Business Intelligence<i class="fas fa-external-link-alt"></i></a></h3><ul>
<li>Microsoft</li>
<li><a class="link"   href="https://www.tableau.com/" >Tableau<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.qlik.com/us/" >Qlik<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Startups"><a href="#Startups" class="headerlink" title="Startups"></a>Startups</h3><ul>
<li><a class="link"   href="https://www.purestorage.com/" >6wind<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.netronome.com/" >netronome<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.barefootnetworks.com/" >barefoot<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.netcope.com/en" >netcope<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.purestorage.com/" >pureStorage<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.nimblestorage.com/partners/" >nimble<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://storj.io/" >storj<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://genaro.network/en/" >genaro<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://hortonworks.com/" >hortomworks<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.cloudera.com/" >cloudera<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://mapr.com/" >MapR<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Other-Analyst-Firm"><a href="#Other-Analyst-Firm" class="headerlink" title="Other Analyst Firm"></a>Other Analyst Firm</h3><ul>
<li><a class="link"   href="https://www.idc.com/" >IDC<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.idg.com/" >IDG<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://tbri.com/" >TBR<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.cbinsights.com/" >cbinsights<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.neuralytix.com/" >Neuralytix<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>INDUSTRY</category>
      </categories>
      <tags>
        <tag>industry</tag>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Driver for Linux</title>
    <url>/2018/09/28/gcloud-share/</url>
    <content><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>To share directory between windows and linux enviroment with <a class="link"   href="https://drive.google.com/drive/my-drive" >Google Driver<i class="fas fa-external-link-alt"></i></a>. The most important reason to choose google driver is  the compabiltiy of driver client span OS, such as Linux, Windows, macOS, iOS and Android.</p>
<h3 id="Top-12-Best-Google-Drive-Linux-Client-Software"><a href="#Top-12-Best-Google-Drive-Linux-Client-Software" class="headerlink" title="Top 12 Best Google Drive Linux Client Software"></a><a class="link"   href="https://www.ubuntupit.com/top-12-best-google-drive-linux-client-software/" >Top 12 Best Google Drive Linux Client Software<i class="fas fa-external-link-alt"></i></a></h3><ul>
<li>GUI Tools: <a class="link"   href="https://www.insynchq.com/" >Insync<i class="fas fa-external-link-alt"></i></a></li>
<li>Command Line Tools: <a class="link"   href="http://yourcmc.ru/wiki/Grive2" >grive2<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/astrada/google-drive-ocamlfuse" >google-drive-ocamlfuse<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Grive2-Install-Steps"><a href="#Grive2-Install-Steps" class="headerlink" title="Grive2 Install Steps"></a>Grive2 Install Steps</h3><ul>
<li><p>For CentOS 7.4</p>
<ul>
<li># yum -y groupinstall “Development Tools”</li>
<li># yum -y install git cmake libgcrypt-devel yajl yajl-devel boost boost-devel curl curl-devel expat-devel cppunit-devel binutils-devel pkgconfig zlib-devel</li>
</ul>
</li>
<li><p>For Ubuntu 16.04</p>
<ul>
<li># sudo apt-get update; sudo apt-get upgrade; sudo apt-get install build-essential</li>
<li># sudo apt-get install git cmake build-essential libgcrypt11-dev libyajl-dev libboost-all-dev libcurl4-openssl-dev libexpat1-dev libcppunit-dev binutils-dev debhelper  zlib1g-dev dpkg-dev pkg-config</li>
</ul>
</li>
<li><p>The Next Steps, <a class="link"   href="http://yourcmc.ru/wiki/Grive2#Download_sources" >grive2 wiki<i class="fas fa-external-link-alt"></i></a>, or the <a class="link"   href="https://github.com/vitalif/grive2" >grive2 github<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>TOOLS</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>Driver</tag>
      </tags>
  </entry>
  <entry>
    <title>Graph and Greedy algorithms</title>
    <url>/2018/08/28/graph-greedy-algorithms/</url>
    <content><![CDATA[<h3 id="Breadth-first-search"><a href="#Breadth-first-search" class="headerlink" title="Breadth-first search"></a>Breadth-first search</h3><ul>
<li><p>Breadth-first search is used to calculate the shortest path for an unweighted graph.</p>
</li>
<li><p>And answer the following questions:</p>
<ul>
<li>Question type 1: Is there a path from node A to node B?</li>
<li>Question type 2: What is the shortest path from node A to node B?</li>
</ul>
</li>
<li><p>A-&gt;H, with breadth first search, the shortest path is A-&gt;C-&gt;G-&gt;H<br><img src="breadth-first.png" alt="unweighted directed graph: A-&gt;H"></p>
</li>
<li><p>Caution: once you check someone, make sure you don’t check them again. Otherwise, you might end up in an infinite loop.</p>
</li>
</ul>
<h3 id="Dijkstra’s-algorithm"><a href="#Dijkstra’s-algorithm" class="headerlink" title="Dijkstra’s algorithm"></a>Dijkstra’s algorithm</h3><ul>
<li>Dijkstra’s algorithm is used to calculate the shortest path for a weighted graph.</li>
<li>Dijkstra’s algorithm works when all the weights are positive.</li>
<li>If you have negative weights, use the <a class="link"   href="https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm" >Bellman-Ford algorithm<i class="fas fa-external-link-alt"></i></a>.</li>
<li>Same graph as shown above but with weighted value(the cost of the path), A-&gt;H, we will get another path(A-&gt;B-&gt;F-&gt;G-&gt;H):<br><img src="dijkstra-algorithm.png" alt="weighted directed graph: A-&gt;H"></li>
<li>Dijkstra’s algorithm iteration for the above graph:<br><img src="dijkstra-algorithm-iteration.png" alt="dijkstra&#39;s algorithm iteration"></li>
</ul>
<h3 id="Gready-algorithm"><a href="#Gready-algorithm" class="headerlink" title="Gready algorithm"></a>Gready algorithm</h3><ul>
<li>Typical applicated case, NP(nondeterministic polynomial time)-complete problems:<ul>
<li>The knapsack problem</li>
<li>The set-covering problem</li>
<li>Traveling salesperson</li>
</ul>
</li>
<li>Approximation algorithms, NP-complete problems, how can you tell if the problem is a NP-complete problem:<ul>
<li>Your algorithm runs quickly with a handful of items but really slows down with more items.</li>
<li>“All combinations of X” usually point to an NP-complete problem.</li>
<li>Do you have to calculate “every possible version” of X because you can’t break it down into smaller sub-problems? Might be NP-complete.</li>
<li>If your problem involves a sequence (such as a sequence of cities, like traveling salesperson), and it’s hard to solve, it might be NP-complete.</li>
<li>If your problem involves a set (like a set of radio stations) and it’s hard to solve, it might be NP-complete.</li>
<li>Can you restate your problem as the set-covering problem or the traveling-salesperson problem? Then your problem is definitely NP-complete.</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>breadth-first search</tag>
        <tag>dijkstra</tag>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>A Late Simple Guide for hexo with github</title>
    <url>/2021/08/01/guide-for-hexo-with-github/</url>
    <content><![CDATA[<h2 id="Windows-Operations"><a href="#Windows-Operations" class="headerlink" title="Windows Operations"></a>Windows Operations</h2><h3 id="Install-nodejs"><a href="#Install-nodejs" class="headerlink" title="Install nodejs"></a>Install nodejs</h3><p><a class="link"   href="https://nodejs.org/en/download/" >NodeJS<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Add-nodejs-path-to-enviroment-path"><a href="#Add-nodejs-path-to-enviroment-path" class="headerlink" title="Add nodejs path to enviroment path"></a>Add nodejs path to enviroment path</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Program Files\nodejs</span><br><span class="line">C:\Users\henry\AppData\Roaming\npm</span><br></pre></td></tr></table></figure>

<h3 id="Install-git"><a href="#Install-git" class="headerlink" title="Install git"></a>Install git</h3><p><a class="link"   href="https://git-scm.com/downloads" >Git-SCM<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Install-hexo-with-gitbash"><a href="#Install-hexo-with-gitbash" class="headerlink" title="Install hexo with gitbash"></a>Install hexo with gitbash</h3><p><a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://hexo.io/docs/" >Hexo docs<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-ssh-key-with-gitbash"><a href="#Generate-ssh-key-with-gitbash" class="headerlink" title="Generate ssh key with gitbash"></a>Generate ssh key with gitbash</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement" >OpenSSH key management<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Copy-the-public-rsa"><a href="#Copy-the-public-rsa" class="headerlink" title="Copy the public rsa"></a>Copy the public rsa</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>


<h2 id="Github-Operations"><a href="#Github-Operations" class="headerlink" title="Github Operations"></a>Github Operations</h2><h3 id="Sign-up-a-github-account"><a href="#Sign-up-a-github-account" class="headerlink" title="Sign up a github account"></a>Sign up a github account</h3><p><a class="link"   href="https://github.com/" >Github Sign up<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Setup-github-account-ssh-key"><a href="#Setup-github-account-ssh-key" class="headerlink" title="Setup github account ssh-key"></a>Setup github account ssh-key</h3><h3 id="Create-github-repository"><a href="#Create-github-repository" class="headerlink" title="Create github repository"></a>Create github repository</h3><p><a class="link"   href="https://github.com/new" >Github new repository<i class="fas fa-external-link-alt"></i></a><br>Note: repository name shoud be with .github.io suffix</p>
<h2 id="Create-hexo-project"><a href="#Create-hexo-project" class="headerlink" title="Create hexo project"></a>Create hexo project</h2><h3 id="Init-hexo-project"><a href="#Init-hexo-project" class="headerlink" title="Init hexo project"></a>Init hexo project</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init orionhubble</span><br></pre></td></tr></table></figure>

<h3 id="Install-dependecy"><a href="#Install-dependecy" class="headerlink" title="Install dependecy"></a>Install dependecy</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="Setup-hexo-project-config"><a href="#Setup-hexo-project-config" class="headerlink" title="Setup hexo project config"></a>Setup hexo project config</h3><p>The hexo config file is _config.yml</p>
<ul>
<li>set your own <strong>url</strong>(site address) and <strong>root</strong> as bellow<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url: https://orionhubble.github.io/</span><br><span class="line">root: /</span><br></pre></td></tr></table></figure></li>
<li>set <strong>post_asset_folder</strong> as bellow<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure></li>
<li>set <strong>deploy</strong> with git<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: your own github address</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Deploy-your-project"><a href="#Deploy-your-project" class="headerlink" title="Deploy your project"></a>Deploy your project</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl; hexo ge; hexo de</span><br></pre></td></tr></table></figure>

<h3 id="Debug-in-local"><a href="#Debug-in-local" class="headerlink" title="Debug in local"></a>Debug in local</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl; hexo server</span><br></pre></td></tr></table></figure>

<h2 id="Last-but-not-Must"><a href="#Last-but-not-Must" class="headerlink" title="Last but not Must"></a>Last but not Must</h2><h3 id="Change-hexo-theme"><a href="#Change-hexo-theme" class="headerlink" title="Change hexo theme"></a>Change hexo theme</h3><p><a class="link"   href="https://hexo.io/themes/" >Hexo Themes<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line">npm install hexo-theme-keep --save</span><br></pre></td></tr></table></figure>
<h3 id="Set-categories-page"><a href="#Set-categories-page" class="headerlink" title="Set categories page"></a>Set categories page</h3><ul>
<li><p>config theme menu with categories</p>
</li>
<li><p>generate categories page</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Add-plungins"><a href="#Add-plungins" class="headerlink" title="Add plungins"></a>Add plungins</h3><p><a class="link"   href="https://hexo.io/plugins/" >Hexo Plugins<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Set-your-own-domain-name"><a href="#Set-your-own-domain-name" class="headerlink" title="Set your own domain name"></a>Set your own domain name</h3><ul>
<li><p>Get ip address</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping orionhubble.github.io</span><br></pre></td></tr></table></figure>
<p>Ping orionhubble.github.io <em>185.199.111.153</em></p>
</li>
<li><p>Set domain name resolution ip<br>Config this in your domain provider.</p>
</li>
<li><p>Add CNAME file<br>You shoud add CNAME file in directory: <em><strong>hexo-theme-xxx/source</strong></em></p>
</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://orionhubble.github.io/2018/02/16/hello-world/">Hexo Hello World</a></p>
]]></content>
      <categories>
        <category>TOOLS</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Demo</title>
    <url>/2018/02/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><ul>
<li><p>Create a new <a class="link"   href="https://hexo.io/docs/writing.html" >post<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash $ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>Run <a class="link"   href="https://hexo.io/docs/server.html" >server<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash $ npm install hexo-server; hexo server</span><br><span class="line">bash $ hexo server</span><br></pre></td></tr></table></figure></li>
<li><p><a class="link"   href="https://hexo.io/docs/generating.html" >Generate<i class="fas fa-external-link-alt"></i></a> static files</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash $ hexo generate</span><br></pre></td></tr></table></figure></li>
<li><p><a class="link"   href="https://hexo.io/docs/deployment.html" >Deploy<i class="fas fa-external-link-alt"></i></a> to remote sites</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash $ hexo deploy</span><br></pre></td></tr></table></figure></li>
<li><p>Shortcut for clean, generate, deploy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash $ hexo clean; hexo ge; hexo de</span><br></pre></td></tr></table></figure></li>
<li><p><a class="link"   href="https://hexo.io/themes/" >Hexo themes<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul>
<li><a class="link"   href="https://daringfireball.net/projects/markdown/syntax" >markdown syntax #1<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.jianshu.com/p/20e82ddb37cb#picturelinksize" >markdown syntax #2<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.markdownpad.com/" >MarkdownPad<i class="fas fa-external-link-alt"></i></a>: a full-featured Markdown editor for Windows</li>
</ul>
<h3 id="Favicon-generator"><a href="#Favicon-generator" class="headerlink" title="Favicon generator"></a>Favicon generator</h3><ul>
<li><a class="link"   href="https://www.axialis.com/" >axialis<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.flaticon.com/" >flaticon<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://iconsflow.com/" >icons flow<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://realfavicongenerator.net/" >realfavicon<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://fontawesome.com/icons?from=io#brand" >font awesome icon<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Web-framework"><a href="#Web-framework" class="headerlink" title="Web framework"></a>Web framework</h3><ul>
<li><a class="link"   href="http://flask.pocoo.org/" >flask<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://nginx.org/en/" >nginx<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.djangoproject.com/" >django<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Linux-notes"><a href="#Linux-notes" class="headerlink" title="Linux notes"></a>Linux notes</h3><ul>
<li>First please run <code>hexo init</code> on an empty folder and then copy your files into it</li>
<li>Must install the newest <a class="link"   href="https://github.com/nodesource/distributions" >nodejs<i class="fas fa-external-link-alt"></i></a>, not the default version of OS</li>
<li>Local hexo not found in, solved by update the nodejs, <em>npm install -g n; n 8.12.0 or n latest</em></li>
<li>/usr/bin/env: node: No such file or directory, solved by <em>ln -s /usr/bin/nodejs /usr/bin/node</em></li>
<li>ERROR Deployer not found: git, solved by <em>npm install hexo-deployer-git –save</em></li>
</ul>
<h3 id="Demo-tutor"><a href="#Demo-tutor" class="headerlink" title="Demo tutor"></a>Demo tutor</h3><ul>
<li><a class="link"   href="https://www.cnblogs.com/chengxs/p/7496265.html" >CNAME deploy<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.digitalocean.com/community/tutorials/how-to-create-a-blog-with-hexo-on-ubuntu-14-04" >hexo tutor for ubuntu<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.cnblogs.com/visugar/p/6821777.html" >hexo tutor for windows<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>TOOLS</category>
      </categories>
      <tags>
        <tag>demo</tag>
      </tags>
  </entry>
  <entry>
    <title>Next Generation of Infrastructure Architecture</title>
    <url>/2021/03/28/infrastructure-architecture/</url>
    <content><![CDATA[<h3 id="Scenarios-amp-Chanllenges"><a href="#Scenarios-amp-Chanllenges" class="headerlink" title="Scenarios &amp; Chanllenges"></a>Scenarios &amp; Chanllenges</h3><ul>
<li>Cloud Native: the number of connections grow with thousands times<ul>
<li>ScaleUp-&gt;ScaleOut-&gt;Mesh, <strong>see references item 1</strong><br><img src="ScaleupsScaleoutMesh.png" alt="ScaleUp-&gt;ScaleOut-&gt;Mesh"></li>
</ul>
</li>
<li>Serverless: IO delay of stateful applications<ul>
<li>Ephemeral Storage and Serverless Durable Storage, <strong>see references item 2</strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  To expand support to stateful applications, serverless frameworks need to provide a way for tasks</span><br><span class="line">to coordinate. For instance, if task A uses task B’s output there must be a way for A to know</span><br><span class="line">when its input is available, even if A and B reside on different nodes. Many protocols aiming to</span><br><span class="line">ensure data consistency also require similar coordination.</span><br><span class="line">  None of the existing cloud storage services come with notification capabilities. While cloud</span><br><span class="line">providers do offer stand-alone notification services, such as SNS [42] and SQS [43], these services</span><br><span class="line">add significant latency, sometimes hundreds of milliseconds. Also, they can be costly when used</span><br><span class="line">for fine grained coordination. There have been some proposed research systems such as Pocket [44]</span><br><span class="line">that do not have many of these drawbacks, but they have not yet been adopted by cloud providers.</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Security: Zero-Trust</li>
</ul>
<h3 id="Key-Technology"><a href="#Key-Technology" class="headerlink" title="Key Technology"></a>Key Technology</h3><ul>
<li>Live migration for pass-through devices</li>
<li><a class="link"   href="https://www.mellanox.com/files/doc-2020/sb-mellanox-nvme-snap.pdf" >NVMe device emulation using a SmartNIC, Mellanox NVMe-SNAP<i class="fas fa-external-link-alt"></i></a></li>
<li>Standardization: <a class="link"   href="http://docs.oasis-open.org/virtio/virtio/" >virtio<i class="fas fa-external-link-alt"></i></a>, Michael S. Tsirkin, Cornelia Huck<ul>
<li><a class="link"   href="https://archive.fosdem.org/2018/schedule/event/virtio/attachments/slides/2167/export/events/attachments/virtio/slides/2167/fosdem_virtio1_1.pdf" >What’s New in Virtio 1.1<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.linux-kvm.org/images/5/55/02x07A-Wei_Wang-Design_of-Vhost-pci.pdf" >Design of Vhost-pci<i class="fas fa-external-link-alt"></i></a>: share memory between 2 VMs, security?</li>
<li>vDPA, Full Offloading, <strong>see references item 3</strong></li>
</ul>
</li>
</ul>
<h3 id="Nvidia-DPU-Archtecture-DOCA"><a href="#Nvidia-DPU-Archtecture-DOCA" class="headerlink" title="Nvidia DPU Archtecture, DOCA"></a>Nvidia DPU Archtecture, <a class="link"   href="https://developer.nvidia.com/blog/programming-the-entire-data-center-infrastructure-with-the-nvidia-doca-sdk/" >DOCA<i class="fas fa-external-link-alt"></i></a></h3><ul>
<li>Functional Diagram, <strong>see references item 4</strong><br><img src="FunctionalDiagram.png" alt="Functional Diagram"></li>
<li>Network Offload Diagram, <strong>see references item 4</strong><br><img src="NetworkOffload.png" alt="Network Offload Diagram"></li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[1] <a class="link"   href="https://www.nvidia.com/en-us/networking/products/data-processing-unit/" >Nvidia Data Processing Units<i class="fas fa-external-link-alt"></i></a><br>[2] <a class="link"   href="https://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.pdf" >Cloud Programming Simplified: A Berkeley View on Serverless Computing<i class="fas fa-external-link-alt"></i></a><br>[3] <a class="link"   href="https://kvmforum2019.sched.com/event/TmxF/virtio-without-the-virt-towards-implementations-in-hardware-michael-tsirkin-red-hat" >VirtIO without the Virt<i class="fas fa-external-link-alt"></i></a><br>[4] <a class="link"   href="https://docs.mellanox.com/display/BlueFieldSWv25111213/BlueField+Software+Overview" >BlueField Software Manual<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>INDUSTRY</category>
      </categories>
      <tags>
        <tag>Infrastructure Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>The KVM Weather Report</title>
    <url>/2020/11/22/kvm-weather-report/</url>
    <content><![CDATA[<h3 id="The-Reports"><a href="#The-Reports" class="headerlink" title="The Reports"></a>The Reports</h3><ul>
<li><a class="link"   href="https://events.static.linuxfound.org/slides/2011/linuxcon-japan/lcj2011_kvm_weather_report.pdf" >The KVM Weather Report, Jes Sorensen, 2011<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://events.static.linuxfound.org/sites/events/files/cojp13_natapov.pdf" >KVM Weather Report, Gleb Natapov, 2013<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://events.static.linuxfound.org/sites/events/files/cojp13_quintela.pdf" >KVM Live Migration: Weather forecast, Juan Quintela, 2013<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.socallinuxexpo.org/sites/default/files/presentations/kvm-weather-report.pdf" >KVM Weather Report, Amit Shah, 2016<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="More-for-aarch64"><a href="#More-for-aarch64" class="headerlink" title="More for aarch64"></a>More for aarch64</h3><ul>
<li><a class="link"   href="http://www.cs.columbia.edu/~nieh/pubs/asplos2014_kvmarm.pdf" >KVM/ARM: The Design and Implementation of the Linux ARM Hypervisor, Christoffer Dall, Jason Nieh, 2014<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://hkg15.pathable.com/static/attachments/112961/1424963684.pdf?1424963684" >KVM/arm64 Architectural Evoluations, Marc Zyngier, 2015<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://events.static.linuxfound.org/sites/events/files/slides/KoreaLinuxForum2015.pdf" >ARM-KVM: Weather Report Korea Linux Forum, Mario Smarduch, 2015<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM/QEMU Architecture</title>
    <url>/2022/02/13/kvm-qemu-architecture/</url>
    <content><![CDATA[<h3 id="Architecture-Bird-View"><a href="#Architecture-Bird-View" class="headerlink" title="Architecture Bird View"></a>Architecture Bird View</h3><p><img src="./kvm-qemu-architecture-bird-view.png" alt="Architecture Bird View"></p>
<ul>
<li>KVM source code directories<br><img src="./kvm-sourcecode.jpg" alt="KVM Source Codes"></li>
<li>CPU &amp; Memory<br><img src="./CPU-Memeory-Virtualization.jpg" alt="CPU &amp; Memory Virtualization"></li>
<li>Device &amp; Interrupt<br><img src="./device-interrupt.jpg" alt="Deive &amp; Interrupt Virtualization"></li>
</ul>
<h3 id="Qemu-the-helper-of-KVM"><a href="#Qemu-the-helper-of-KVM" class="headerlink" title="Qemu, the helper of KVM"></a>Qemu, the helper of KVM</h3><ul>
<li>Qemu main thread<br>glibc event loop mechanism, vl.c main_loop()<br><img src="./main-thread-loop.jpg" alt="Main Thread Loop"></li>
<li>Qemu thread model<br><img src="./qemu-thread-model.jpg" alt="Thread Model"></li>
<li>Qemu parameter parsing<br><img src="./qemu-parameter-parsing.jpg" alt="Parameter Parsing"></li>
<li>Qemu object model(QOM)<br><img src="./qemu-object-model.jpg" alt="Object Model"></li>
<li>HMP &amp; QMP<br>HMP: Human Monitor Protocol; QMP: Qemu Monitor Protocol<br><img src="./hmp-qmp.jpg" alt="HMP QMP"></li>
<li>Motherboard and firmware emulation<br><img src="./motherboard-firmware.jpg" alt="Motherboard &amp; Firmware"></li>
</ul>
<h3 id="The-road-to-eliminate-virtualization-overhead-datacenter-tax-and-neighour-noise"><a href="#The-road-to-eliminate-virtualization-overhead-datacenter-tax-and-neighour-noise" class="headerlink" title="The road to eliminate (virtualization) overhead (datacenter tax) and neighour noise"></a>The road to eliminate (virtualization) overhead (datacenter tax) and neighour noise</h3><p><img src="./virtualization-optimize.png" alt="Performance optimize direction"></p>
<h3 id="Referecnes"><a href="#Referecnes" class="headerlink" title="Referecnes"></a>Referecnes</h3><ul>
<li>《QEMU/KVM源码解析与应用》，李强</li>
<li><a class="link"   href="https://wiki.qemu.org/index.php?title=Special:AllPages&from=Features/&to=Features/zzzzz&namespace=0" >Qemu All feature pages<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.brendangregg.com/blog/2017-11-29/aws-ec2-virtualization-2017.html" >Brendan Gregg’s Blog AWS EC2 Virtualization 2017: Introducing Nitro<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>KVM</tag>
        <tag>QEMU</tag>
      </tags>
  </entry>
  <entry>
    <title>Launch ARM64 VM on RaspberryPi4B</title>
    <url>/2021/08/13/launch-arm64-vm-on-raspberrypi4b/</url>
    <content><![CDATA[<h3 id="Create-and-test-flash-images"><a href="#Create-and-test-flash-images" class="headerlink" title="Create and test flash images"></a>Create and test flash images</h3><ul>
<li><p>create images<br>repalce <em>/usr/share/qemu-efi/QEMU_EFI.fd</em> with your own built file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=flash0.img bs=1M count=64</span><br><span class="line">dd if=/usr/share/qemu-efi/QEMU_EFI.fd of=flash0.img conv=notrunc</span><br><span class="line">dd if=/dev/zero of=flash1.img bs=1M count=64</span><br></pre></td></tr></table></figure></li>
<li><p>test if your flash work well</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./build/qemu-system-aarch64 -enable-kvm -M virt -m 1024 -cpu host -smp 2 -pflash /home/up/env/code/images/flash0.img -pflash /home/up/env/code/images/flash1.img -nographic</span><br></pre></td></tr></table></figure>
<p><img src="./flash-boot-img.jpg" alt="flash boot imgage"></p>
</li>
</ul>
<h3 id="Download-and-boot-from-cloud-image"><a href="#Download-and-boot-from-cloud-image" class="headerlink" title="Download and boot from cloud image"></a>Download and boot from cloud image</h3><ul>
<li><p>download imgage</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://cloud-images.ubuntu.com/hirsute/current/hirsute-server-cloudimg-arm64.img</span><br></pre></td></tr></table></figure></li>
<li><p>query image information</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./build/qemu-img info ../images/hirsute-server-cloudimg-arm64.img </span><br><span class="line">image: ../images/hirsute-server-cloudimg-arm64.img</span><br><span class="line">file format: qcow2</span><br><span class="line">virtual size: 2.2 GiB (2361393152 bytes)</span><br><span class="line">disk size: 528 MiB</span><br><span class="line">cluster_size: 65536</span><br><span class="line">Format specific information:</span><br><span class="line">    compat: 0.10</span><br><span class="line">    compression type: zlib</span><br><span class="line">    refcount bits: 16</span><br></pre></td></tr></table></figure></li>
<li><p>boot from image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./build/qemu-system-aarch64 -enable-kvm -M virt -m 1024 -cpu host -smp 2 -pflash /home/up/env/code/images/flash0.img -pflash /home/up/env/code/images/flash1.img -nographic -drive if=none,file=/home/up/env/code/images/hirsute-server-cloudimg-arm64.img,id=hd0 -device virtio-blk-device,drive=hd0</span><br></pre></td></tr></table></figure>
<p>CANNOT BOOT HERE!!! shoud debug in edk2 function BdsEntry().</p>
</li>
<li><p>boot hung<br><img src="./boot_hung.jpg" alt="boot hung"></p>
</li>
<li><p>exit shell<br><img src="./exit_shell.jpg" alt="exit shell"></p>
</li>
<li><p>select device<br><img src="./select_device.jpg" alt="select device"></p>
</li>
</ul>
<h3 id="Boot-successful"><a href="#Boot-successful" class="headerlink" title="Boot successful!"></a>Boot successful!</h3><p><img src="./boot_sucess.jpg" alt="boot successful"></p>
<h3 id="Config-image-with-cloud-init"><a href="#Config-image-with-cloud-init" class="headerlink" title="Config image with cloud-init"></a>Config image with cloud-init</h3><ul>
<li>cloud-localds<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install genisoimage</span><br></pre></td></tr></table></figure></li>
<li>generate cloud-init config file<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ &#123; echo instance-id: iid-local01; echo local-hostname: cloudimg; &#125; &gt; meta-data</span><br><span class="line">printf &quot;#cloud-config\npassword: passw0rd\nchpasswd: &#123; expire: False &#125;\nssh_pwauth: True\n&quot; &gt; user-data</span><br></pre></td></tr></table></figure></li>
<li>set your own passwd<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ openssl passwd -6</span><br><span class="line">Password: </span><br><span class="line">Verifying - Password: </span><br><span class="line">$6$he0icVn3e98gzInO$jv/jT5HQwSeXwQOJ8rLOcPOBekJmsIaQCEBmAT2RZYD8Tv6N/NMGvMHvuBEc98yCjOeVbGvtvaDfjub/bsyfC/</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat user-data </span><br><span class="line">#cloud-config</span><br><span class="line">password: &quot;$6$he0icVn3e98gzInO$jv/jT5HQwSeXwQOJ8rLOcPOBekJmsIaQCEBmAT2RZYD8Tv6N/NMGvMHvuBEc98yCjOeVbGvtvaDfjub/bsyfC/&quot;</span><br><span class="line">chpasswd: &#123; expire: False &#125;</span><br><span class="line">ssh_pwauth: True</span><br></pre></td></tr></table></figure></li>
<li>generate config iso<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genisoimage -output seed.iso -volid cidata -joliet -rock user-data meta-data</span><br></pre></td></tr></table></figure></li>
<li>launch vm with seed.iso<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./build/qemu-system-aarch64 -enable-kvm -M virt -m 1024 -cpu host -smp 2 -pflash /home/up/env/code/images/flash0.img -pflash /home/up/env/code/images/flash1.img -nographic -drive if=none,file=/home/up/env/code/images/hirsute-server-cloudimg-arm64.img,id=hd0 -device virtio-blk-device,drive=hd0 -drive file=/home/up/env/code/images/seed.iso,if=virtio</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a class="link"   href="https://wiki.ubuntu.com/ARM64/QEMU" >Ubuntu wiki Qemu<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://wiki.ubuntu.com/UEFI/OVMF" >Ubuntu wiki OVMF<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.intel.com/content/dam/doc/guide/uefi-development-best-technical-methods-idf2009-presentation.pdf" >Best Technical Methods for UEFI Development<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html" >Cloud init datasource NoCloud<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>PRACTICE</category>
      </categories>
      <tags>
        <tag>raspberry pi</tag>
        <tag>arm64</tag>
        <tag>aarch64</tag>
        <tag>VM</tag>
      </tags>
  </entry>
  <entry>
    <title>Links Bookmark</title>
    <url>/2018/02/17/links/</url>
    <content><![CDATA[<p>Some useful links to Get information, just as explorer’s bookmark.</p>
<h3 id="Tech-News"><a href="#Tech-News" class="headerlink" title="Tech News"></a>Tech News</h3><ul>
<li><a class="link"   href="https://www.cnbc.com/technology/" >CNBC<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.infoq.com/" >infoQ<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.sdnlab.com/" >SDNLab<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.infoworld.com/" >infoWorld<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.techtarget.com/" >techTarget<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.theregister.co.uk/" >theRegister<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.networkworld.com/" >networkworld<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://thenewstack.io/" >THENEWSTACK<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Linux-News"><a href="#Linux-News" class="headerlink" title="Linux News"></a>Linux News</h3><ul>
<li><a class="link"   href="https://lwn.net/" >lwn<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.linux.com/news/category/linux-kernel" >linuxWeatherForecast<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.linuxjournal.com/" >linuxjournal<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.phoronix.com/scan.php?page=home" >phoronix<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://events.linuxfoundation.org/" >Linux Foundation Events<i class="fas fa-external-link-alt"></i></a>(e.g. ONS)</li>
<li><a class="link"   href="https://distrowatch.com/" >distro<i class="fas fa-external-link-alt"></i></a>, repository and source code<ul>
<li><a class="link"   href="https://www.redhat.com/en" >redhat<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://getfedora.org/" >fedora<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://downloads.redhat.com/redhat/rhel/" >redhat downloads<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.centos.org/" >centos<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.suse.com/" >suse<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.opensuse.org/" >opensuse<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.ubuntu.com/index_kylin" >ubuntu<i class="fas fa-external-link-alt"></i></a> etc.</li>
<li>repository: <a class="link"   href="http://mirror.centos.org/centos/" >centos<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://vault.centos.org/" >centos vault<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://elrepo.org/tiki/tiki-index.php" >elrepo<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://fedoraproject.org/wiki/EPEL?rd=Epel" >fedoraproject<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://repoforge.org/" >repoforge<i class="fas fa-external-link-alt"></i></a>, or try <a class="link"   href="http://rpmfind.net/" >rpmfind<i class="fas fa-external-link-alt"></i></a>.</li>
<li><a class="link"   href="https://www.kernel.org/" >kernel<i class="fas fa-external-link-alt"></i></a>, source code <a class="link"   href="https://elixir.bootlin.com/" >bootlin<i class="fas fa-external-link-alt"></i></a> based on <a class="link"   href="http://oracle.github.io/opengrok/" >opengrok<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.linaro.org/" >linaro<i class="fas fa-external-link-alt"></i></a>: Accelerating deployment of Arm-based solutions</li>
</ul>
</li>
<li>Tips of Kernel: <a class="link"   href="https://onebitbug.me/2011/03/04/introducing-linux-kernel-symbols/" >kallsyms<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.brendangregg.com/index.html" >Linux Perf, Brendan D. Gregg<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Hardware-Company-Events"><a href="#Hardware-Company-Events" class="headerlink" title="Hardware Company Events"></a>Hardware Company Events</h3><ul>
<li><a class="link"   href="https://www.nvidia.com/en-us/gtc/" >NVIDIA GTC<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.arm.com/company/events" >ARM Events<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.intel.com/content/www/us/en/search.html?ws=text#q=Intel%20Architecture%20Day&sort=relevancy" >Intel Architecture Day<i class="fas fa-external-link-alt"></i></a>, <a href="">Intel Developer Forum</a></li>
</ul>
<h3 id="Git-Repository"><a href="#Git-Repository" class="headerlink" title="Git Repository"></a>Git Repository</h3><ul>
<li><a class="link"   href="https://git.kernel.org/" >kernel<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/" >linux<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://git.kernel.org/pub/scm/virt/kvm/kvm.git/log/" >kvm<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://git.qemu.org/" >qemu<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="https://git.qemu.org/?p=qemu.git;a=log;h=HEAD" >qemu<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://git.qemu.org/?p=ipxe.git;a=log" >ipxe<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://git.qemu.org/?p=seabios.git;a=log" >seabios<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/libvirt/libvirt/commits/master" >libvirt<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/openvswitch" >openvsiwtch<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="https://github.com/openvswitch/ovs/commits/master" >ovs<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/openvswitch/ovn-kubernetes/commits/master" >ovn<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://git.dpdk.org/" >dpdk<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="http://git.dpdk.org/dpdk/log/" >dpdk<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://github.com/spdk/spdk/commits/master" >spdk<i class="fas fa-external-link-alt"></i></a></li>
<li>Coding: <a class="link"   href="https://www.onlinegdb.com/" >onlinegdb<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Cloud-amp-Orchestration"><a href="#Cloud-amp-Orchestration" class="headerlink" title="Cloud &amp; Orchestration"></a>Cloud &amp; Orchestration</h3><ul>
<li><a class="link"   href="https://www.openstack.org/" >OpenStack<i class="fas fa-external-link-alt"></i></a> for VMs</li>
<li><a class="link"   href="https://kubernetes.io/" >Kuburnetes<i class="fas fa-external-link-alt"></i></a> for containers: <a class="link"   href="https://www.openshift.com/" >openshift<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.mirantis.com/" >mirantis<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://openwhisk.apache.org/" >OpenWhisk<i class="fas fa-external-link-alt"></i></a> &amp; <a class="link"   href="https://knative.dev/" >Knative<i class="fas fa-external-link-alt"></i></a> for serverless</li>
<li><a class="link"   href="https://istio.io/" >Istio<i class="fas fa-external-link-alt"></i></a> for applications</li>
</ul>
<h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><p>Network trilogy: performance(bandwidth, delay, pps), qos(upper limit, lower limit, reserve, share), security(stateless and stateful firewall, such as acl). And the last but not the least is easy to operate and manage(dfx).</p>
<ul>
<li><a class="link"   href="http://dpdk.org/" >dpdk<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="https://www.dpdk.org/news/past-events/" >events<i class="fas fa-external-link-alt"></i></a><ul>
<li><a class="link"   href="https://fd.io/" >fd.io<i class="fas fa-external-link-alt"></i></a>: based on dpdk, the open-source Vector Packet Processing (VPP) platform.</li>
<li><a class="link"   href="http://dpdk.org/doc/guides/howto/virtio_user_as_exceptional_path.html" >virtio-user exception path<i class="fas fa-external-link-alt"></i></a>: compare with <a class="link"   href="http://dpdk.org/doc/guides/prog_guide/kernel_nic_interface.html" >kni<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://dpdk.org/doc/guides/nics/tap.html" >tun/tap pmd<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://dpdk.org/doc/guides/nics/pcap_ring.html" >pcap pmd<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://dpdksummit.com/Archive/pdf/2016Userspace/Day02-Session05-JingjingWu-Userspace2016.pdf" >flow bifurcation<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="http://www.openvswitch.org/" >openvswitch<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="http://www.openvswitch.org/support/papers/" >papers<i class="fas fa-external-link-alt"></i></a>, the ‘Talks&amp;Presentations’ menu</li>
<li><a class="link"   href="https://www.iovisor.org/technology/xdp" >xdp<i class="fas fa-external-link-alt"></i></a><ul>
<li><a class="link"   href="http://www.tcpdump.org/papers/bpf-usenix93.pdf" >The BSD Packet Filter<i class="fas fa-external-link-alt"></i></a>: basement of xdp.</li>
<li><a class="link"   href="https://github.com/iovisor/bcc" >BCC, BPF compiler Collection<i class="fas fa-external-link-alt"></i></a>: a toolchain for writing, compiling, and loading eBPF programs, along with example programs and battle-hardened tools for debugging and diagnosing performance issues. </li>
<li><a class="link"   href="https://cilium.io/" >cilium<i class="fas fa-external-link-alt"></i></a>, open source software for transparently securing the network connectivity based on BPF.</li>
<li><a class="link"   href="https://www.netronome.com/" >netronome<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.netronome.com/media/documents/WP_OVS-TC.pdf" >Virtual Switch Acceleration with OVS-TC<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.netronome.com/press-releases/netronome-announces-box-support-and-certification-its-agilio-smartnics-red-hat-enterprise-linux-75/" >Agilio® SmartNICs in Red Hat Enterprise Linux 7.5<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="https://p4.org/specs/" >P4<i class="fas fa-external-link-alt"></i></a>: Programming Protocol-independent Packet Processors, combine with xdp will be amazing.<ul>
<li><a class="link"   href="https://www.barefootnetworks.com/" >Barefoot<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.aliyun.com/" >Alibaba<i class="fas fa-external-link-alt"></i></a> &amp; <a class="link"   href="https://cloud.tencent.com/" >Tencent<i class="fas fa-external-link-alt"></i></a> has Joined.</li>
<li><a class="link"   href="https://www.netcope.com/en" >netcope<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.netcope.com/en/products/netcopep4" >netcope P4<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="http://netdevconf.org/" >netdev<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://netfilter.org/" >netfilter<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://frrouting.org/" >FRR<i class="fas fa-external-link-alt"></i></a>: FRRouting</li>
<li><a class="link"   href="https://open-nfp.org/" >OpenNFP<i class="fas fa-external-link-alt"></i></a>: network function processing research, e.g. eBPF, P4, hardware offload.</li>
<li>Security Protocols: <a class="link"   href="https://en.wikipedia.org/wiki/IPsec" >IPSec<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://en.wikipedia.org/wiki/Point-to-Point_Protocol" >PPP<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://en.wikipedia.org/wiki/Point-to-Point_Protocol_over_Ethernet" >PPPoE<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://en.wikipedia.org/wiki/Point-to-Point_Tunneling_Protocol" >PPTP<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://en.wikipedia.org/wiki/Layer_2_Tunneling_Protocol" >L2TP<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://en.wikipedia.org/wiki/Public_key_infrastructure" >PKI<i class="fas fa-external-link-alt"></i></a></li>
<li>VPN Softwares: <a class="link"   href="http://openvpn.net/" >OpenVPN<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.softether.org/" >SoftEther VPN<i class="fas fa-external-link-alt"></i></a></li>
<li>Tools<ul>
<li>mtr, <a class="link"   href="http://winmtr.net/" >WinMTR<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://flent.org/" >Flent: The FLExible Network Tester<i class="fas fa-external-link-alt"></i></a>: network bufferbloat test.</li>
<li><a class="link"   href="https://iperf.fr/" >iperf<i class="fas fa-external-link-alt"></i></a>: ultimate speed test tool for TCP, UDP and SCTP, alternative tool netperf, nttcp, NTttcp for windows.</li>
<li><a class="link"   href="http://trex-tgn.cisco.com/" >TRex<i class="fas fa-external-link-alt"></i></a>: Realistic traffic generator, TRex is an open source, low cost, stateful and stateless traffic generator fuelled by DPDK.</li>
</ul>
</li>
<li>blogs or articles<ul>
<li><a class="link"   href="http://vger.kernel.org/" >vger<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://vger.kernel.org/~davem/skb_data.html" >skb data<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.informatix-sol.com/" >informatix<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.networkworld.com/" >networkworld<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://networkdirection.net/homepage" >networkdirection<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://qmonnet.github.io/whirl-offload/" >Whirl Offload<i class="fas fa-external-link-alt"></i></a>: personal blog related with SDN</li>
<li><a class="link"   href="https://blog.packagecloud.io/" >Packagecloud<i class="fas fa-external-link-alt"></i></a><ul>
<li><a class="link"   href="https://blog.packagecloud.io/eng/2017/02/06/monitoring-tuning-linux-networking-stack-sending-data/" >Monitoring and Tuning the Linux Networking Stack: Sending Data<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data/" >Monitoring and Tuning the Linux Networking Stack: Receiving Data<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://blog.packagecloud.io/eng/2016/10/11/monitoring-tuning-linux-networking-stack-receiving-data-illustrated/" >Illustrated Guide to Monitoring and Tuning the Linux Networking Stack: Receiving Data<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="http://intronetworks.cs.luc.edu/current/html/index.html" >An Introduction to Computer Networks<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.cs.unh.edu/cnrg/people/gherrin/linux-net.html" >Linux IP Network<i class="fas fa-external-link-alt"></i></a>: a guide to implementation and modification of linux protocal stack</li>
</ul>
</li>
<li>frontier technology<ul>
<li><a class="link"   href="http://www.beba-project.eu/" >BEhavioural BAsed forwarding<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://openstate-sdn.org/" >OpenState SDN<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.linuxfoundation.org/projects/networking/" >Open Source Networking<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
</ul>
<h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><ul>
<li>filesystem: <a class="link"   href="https://ext4.wiki.kernel.org/index.php/Main_Page" >ext4<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://xfs.org/index.php/Main_Page" >xfs<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://btrfs.wiki.kernel.org/index.php/Main_Page" >brtfs<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://zfsonlinux.org/" >ZFS on linux<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.freenas.org/" >freeNAS<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://bcachefs.org/" >bcachefs<i class="fas fa-external-link-alt"></i></a></li>
<li>distribute filesystem: <a class="link"   href="https://www.gluster.org/" >gluster<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://docs.openstack.org/swift/latest/" >swift<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://ceph.com/" >ceph<i class="fas fa-external-link-alt"></i></a></li>
<li>blockchain-based storage: <a class="link"   href="https://storj.io/" >storj<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://genaro.network/en/" >genaro<i class="fas fa-external-link-alt"></i></a></li>
<li>userspace storage platform: <a class="link"   href="http://www.spdk.io/" >spdk<i class="fas fa-external-link-alt"></i></a></li>
<li>tiered-storage: combine cache, ssd, and sas/sata hard disk.</li>
<li>de-duplicate, especially for ssd with limited write ensurance, to improve the lifespan, based on block, object or file.</li>
<li>tools: <a class="link"   href="https://github.com/axboe/fio" >fio<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.iometer.org/" >iometer<i class="fas fa-external-link-alt"></i></a></li>
<li>blogs or articles: <a class="link"   href="http://www.infostor.com/" >infoStor<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://storagemojo.com/" >storagemojo<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.storagereview.com/" >storagereview<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.storagenewsletter.com/" >storagenewsletter<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.enterprisestorageforum.com/" >enterpriseStorageForum<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://sabi.co.uk/Notes/linuxStor.html" >Notes about Linux storage<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Hypervisor"><a href="#Hypervisor" class="headerlink" title="Hypervisor"></a>Hypervisor</h3><ul>
<li><a class="link"   href="https://www.xenproject.org/" >xen<i class="fas fa-external-link-alt"></i></a>: The Xen ProjectTM is the leading open source virtualization platform that is powering some of the largest clouds in production today. Amazon Web Services, Aliyun, Rackspace Public Cloud, Verizon Cloud and many hosting services use Xen Project software.</li>
<li><a class="link"   href="https://www.linux-kvm.org/page/Main_Page" >kvm<i class="fas fa-external-link-alt"></i></a>: KVM (for Kernel-based Virtual Machine) is a full virtualization solution for Linux on x86 hardware containing virtualization extensions (Intel VT or AMD-V).</li>
<li><a class="link"   href="https://www.qemu.org/" >qemu<i class="fas fa-external-link-alt"></i></a>: a generic and open source machine emulator and virtualizer.</li>
<li><a class="link"   href="https://www.docker.com/" >docker<i class="fas fa-external-link-alt"></i></a>: The only container platform provider to address every application across the hybrid cloud.<ul>
<li><a class="link"   href="https://containerjournal.com/" >containerjournal<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.opencontainers.org/" >open container initiative<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://katacontainers.io/" >kata containers<i class="fas fa-external-link-alt"></i></a>: speed of containers, the security of VMs.</li>
<li><a class="link"   href="https://blog.risingstack.com/operating-system-containers-vs-application-containers/" >application vs operating system<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="https://github.com/siemens/jailhouse" >jailhouse<i class="fas fa-external-link-alt"></i></a>: After Xen and KVM, meet a new Linux hypervisor, a partition hypervisor.</li>
<li><a class="link"   href="https://firecracker-microvm.github.io/" >Firecracker<i class="fas fa-external-link-alt"></i></a>: an open source virtualization technology that is purpose-built for creating and managing secure, multi-tenant containers and functions-based services. </li>
<li><a class="link"   href="https://github.com/intel/nemu" >nemu<i class="fas fa-external-link-alt"></i></a>: specifically built and designed to run modern cloud workloads on modern 64-bit Intel and ARM CPUs.</li>
<li><a class="link"   href="https://projectacrn.org/" >ACRN<i class="fas fa-external-link-alt"></i></a>: A Big Little Hypervisor for IoT Development.</li>
<li>blogs or articles: <ul>
<li><a class="link"   href="https://www.kraxel.org/blog/" >kraxel’s news<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
</ul>
<h3 id="Hardware-Architectures"><a href="#Hardware-Architectures" class="headerlink" title="Hardware Architectures"></a>Hardware Architectures</h3><ul>
<li><a class="link"   href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0024a/ch12s01.html" >ARM aarch64<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://software.intel.com/en-us/articles/intel-sdm" >Intel® 64 and IA-32<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="BlockChain"><a href="#BlockChain" class="headerlink" title="BlockChain"></a>BlockChain</h3><ul>
<li><a class="link"   href="https://www.ethereum.org/" >ethereum<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.hyperledger.org/" >hyperledger<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://blockchaintrainingalliance.com/" >blockchain training alliance<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="AI-amp-BigData"><a href="#AI-amp-BigData" class="headerlink" title="AI &amp; BigData"></a>AI &amp; BigData</h3><ul>
<li><a class="link"   href="http://hadoop.apache.org/" >hadoop<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="https://hortonworks.com/" >hortomworks<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.cloudera.com/" >cloudera<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://mapr.com/" >MapR<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://spark.apache.org/" >spark<i class="fas fa-external-link-alt"></i></a></li>
<li>neural network: <a class="link"   href="https://en.wikipedia.org/wiki/Feedforward_neural_network" >feed-forward neural network<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://en.wikipedia.org/wiki/Recurrent_neural_network" >recurrent neural network<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://en.wikipedia.org/wiki/Long_short-term_memory" >long and short term memory<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://en.wikipedia.org/wiki/Convolutional_neural_network" >convolutional neural networks<i class="fas fa-external-link-alt"></i></a></li>
<li>deep learning framework: <a class="link"   href="http://caffe.berkeleyvision.org/" >caffe<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://chainer.org/" >chainer<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.tensorflow.org/" >tensorflow<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://deeplearning.net/software/theano/#" >theano<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://torch.ch/" >torch<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://pytorch.org/" >pytorch<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Free-Hardware"><a href="#Free-Hardware" class="headerlink" title="Free Hardware"></a>Free Hardware</h3><ul>
<li><a class="link"   href="https://www.raspberrypi.org/" >raspberrypi<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.orangepi.org/" >orangepi<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.banana-pi.org/" >bananapi<i class="fas fa-external-link-alt"></i></a>,</li>
</ul>
<h3 id="Program-Management"><a href="#Program-Management" class="headerlink" title="Program Management"></a>Program Management</h3><ul>
<li><a class="link"   href="https://www.pmi.org/" >PMI<i class="fas fa-external-link-alt"></i></a></li>
<li>Tools: <a class="link"   href="https://www.atlassian.com/software/jira" >jira<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://jenkins.io/" >jekins<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://hudson-ci.org/" >hudson<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.atlassian.com/" >atlassian<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.zentao.pm/" >zentao<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Open-Source-Foundation"><a href="#Open-Source-Foundation" class="headerlink" title="Open Source Foundation"></a>Open Source Foundation</h3><ul>
<li><a class="link"   href="http://www.apache.org/" >APACHE<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.freebsdfoundation.org/" >FreeBSDFOUNDATION<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.linuxfoundation.org/" >THELINUXFOUNDATION<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://opensource.org/licenses/category" >Open Source Licenses<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://opensource.org/" >Open Source Initiative<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Online-Course"><a href="#Online-Course" class="headerlink" title="Online Course"></a>Online Course</h3><ul>
<li><a class="link"   href="https://www.edx.org/" >edX<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.coursera.org/" >Coursera<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://online.stanford.edu/" >Stanford<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://harvardx.harvard.edu/" >Harvardx<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://oyc.yale.edu/" >Open Yale Courses<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://universalflowuniversity.com/" >Universal Flow University<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://universalflowuniversity.com/600-free-online-courses/" >courses<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Recommanded-Websites"><a href="#Recommanded-Websites" class="headerlink" title="Recommanded Websites"></a>Recommanded Websites</h3><ul>
<li><a class="link"   href="https://www.howstuffworks.com/" >howstuffworks<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://freepdf-books.com/" >freePDF eBooks<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://access.redhat.com/" >redhat customer portal<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://redhatstackblog.redhat.com/" >Red Hat Stack: an Openstack Blog<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.redbooks.ibm.com/" >IBM Redbooks<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.ibm.com/developerworks/?lnk=mdev_dw&lnk2=learn" >IBM DeveloperWorks<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.opensig.org/" >Open Alliance<i class="fas fa-external-link-alt"></i></a>: automotive industry and technology.</li>
<li><a class="link"   href="https://betterexplained.com/" >betterexplained<i class="fas fa-external-link-alt"></i></a>: Math without endless memorization.</li>
<li><a class="link"   href="https://www.eetimes.com/" >EETimes<i class="fas fa-external-link-alt"></i></a>: connecting the global electronics community.</li>
<li><a class="link"   href="https://www.comparitech.com/" >comparitech<i class="fas fa-external-link-alt"></i></a>:research, test, review and compare consumer tech products and services so you can make a more informed decision before buy.</li>
<li><a class="link"   href="https://danielmiessler.com/study/" >Daniel Miessler’s Blog<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Some-useful-free-tools"><a href="#Some-useful-free-tools" class="headerlink" title="Some useful free tools"></a>Some useful free tools</h3><ul>
<li><a class="link"   href="https://www.yworks.com/" >yEd<i class="fas fa-external-link-alt"></i></a>: substitution of visio</li>
<li><a class="link"   href="https://notepad-plus-plus.org/" >notepad++<i class="fas fa-external-link-alt"></i></a>: substituiton of ultraedit</li>
<li><a class="link"   href="http://kdiff3.sourceforge.net/" >kdiff3<i class="fas fa-external-link-alt"></i></a>: substituiton of beyond compare</li>
<li>Tools for C developer on Windows: virtualbox, source insight, xshell, beyond compare, altrun, everything, 7zip etc.</li>
</ul>
<h3 id="Online-Pdfs"><a href="#Online-Pdfs" class="headerlink" title="Online Pdfs"></a><a class="link"   href="http://13.231.174.69/" >Online Pdfs<i class="fas fa-external-link-alt"></i></a></h3><ul>
<li>ubuntu apache2: apt intsall apache2, set documentroot by edit /etc/apache2/sites-available/000-default.conf, set directory permission by edit /etc/apache2/apache2.conf, <a class="link"   href="https://tutorials.ubuntu.com/tutorial/install-and-configure-apache#0" >more info<i class="fas fa-external-link-alt"></i></a> </li>
</ul>
]]></content>
      <categories>
        <category>INDUSTRY</category>
      </categories>
      <tags>
        <tag>industry</tag>
        <tag>tool</tag>
        <tag>bookmark</tag>
        <tag>website</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection of Linux Weather Forcast</title>
    <url>/2018/10/03/linux-weather-forecast/</url>
    <content><![CDATA[<p><a class="link"   href="https://www.linux.com/news/category/linux-kernel" >Weather Forcast<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Short-term-Forcast"><a href="#Short-term-Forcast" class="headerlink" title="Short-term Forcast"></a>Short-term Forcast</h3><ul>
<li><a class="link"   href="https://lwn.net/Articles/748879/" >Time-based packet transmission<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://lwn.net/Articles/758353/" >CAKE queueing discipline<i class="fas fa-external-link-alt"></i></a>: offers significantly better networking performance, especially in home or small-business settings.</li>
<li><a class="link"   href="https://lwn.net/Articles/758963/" >The block I/O latency controller<i class="fas fa-external-link-alt"></i></a>: allows an administrator to provide block (disk) I/O response-time guarantees to specific processes.</li>
</ul>
<h3 id="Kernel-4-18"><a href="#Kernel-4-18" class="headerlink" title="Kernel-4.18"></a>Kernel-4.18</h3><ul>
<li><a class="link"   href="https://lwn.net/Articles/747551/" >bpfilter<i class="fas fa-external-link-alt"></i></a>: expected to be the base on which the next generation of kernel firewalling systems is built.</li>
<li><a class="link"   href="https://lwn.net/Articles/754681/" >A reworked TCP zero-copy receive API<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://lwn.net/Articles/750845/" >Accelerating networking with AF_XDP<i class="fas fa-external-link-alt"></i></a>: a larger effort to win back users of user-space networking stacks by providing better facilities in the kernel.</li>
<li><a class="link"   href="https://lwn.net/Articles/760690/" >Statistics from the 4.18 development cycle<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.linux.com/news/2018/9/linux-weather-forecast" >Linux Weather Forecast 2018.09<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>KERNEL</category>
      </categories>
      <tags>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>Memory Layout of C Programs</title>
    <url>/2018/11/16/memory-layout/</url>
    <content><![CDATA[<p>A typical memory representation of C program consists of following sections.</p>
<ol>
<li>Text segment</li>
<li>Initialized data segment</li>
<li>Uninitialized data segment</li>
<li>Stack</li>
<li>Heap</li>
</ol>
<p>A typical memory layout of a running process<br><img src="memory-layout.png" alt="A typical memory layout of a running process"></p>
<h3 id="Text-Segment"><a href="#Text-Segment" class="headerlink" title="Text Segment"></a>Text Segment</h3><p>A text segment , also known as a code segment or simply as text, is one of the sections of a program in an object file or in memory, which contains executable instructions.</p>
<p>As a memory region, a text segment may be placed below the heap or stack in order to prevent heaps and stack overflows from overwriting it.</p>
<p>Usually, the text segment is sharable so that only a single copy needs to be in memory for frequently executed programs, such as text editors, the C compiler, the shells, and so on. Also, the text segment is often read-only, to prevent a program from accidentally modifying its instructions.</p>
<h3 id="Initialized-Data-Segment"><a href="#Initialized-Data-Segment" class="headerlink" title="Initialized Data Segment"></a>Initialized Data Segment</h3><p>Initialized data segment, usually called simply the Data Segment. A data segment is a portion of virtual address space of a program, which contains the global variables and static variables that are initialized by the programmer.</p>
<p>Note that, data segment is not read-only, since the values of the variables can be altered at run time.</p>
<p>This segment can be further classified into initialized read-only area and initialized read-write area.</p>
<p>For instance the global string defined by char s[] = “hello world” in C and a C statement like int debug=1 outside the main (i.e. global) would be stored in initialized read-write area. And a global C statement like const char* string = “hello world” makes the string literal “hello world” to be stored in initialized read-only area and the character pointer variable string in initialized read-write area.</p>
<p>Ex: static int i = 10 will be stored in data segment and global int i = 10 will also be stored in data segment.</p>
<h3 id="Uninitialized-Data-Segment"><a href="#Uninitialized-Data-Segment" class="headerlink" title="Uninitialized Data Segment"></a>Uninitialized Data Segment</h3><p>Uninitialized data segment, often called the “bss” segment, named after an ancient assembler operator that stood for “block started by symbol.” Data in this segment is initialized by the kernel to arithmetic 0 before the program starts executing</p>
<p>uninitialized data starts at the end of the data segment and contains all global variables and static variables that are initialized to zero or do not have explicit initialization in source code.</p>
<p>For instance a variable declared static int i; would be contained in the BSS segment.<br>For instance a global variable declared int j; would be contained in the BSS segment.</p>
<h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>The stack area traditionally adjoined the heap area and grew the opposite direction; when the stack pointer met the heap pointer, free memory was exhausted. (With modern large address spaces and virtual memory techniques they may be placed almost anywhere, but they still typically grow opposite directions.)</p>
<p>The stack area contains the program stack, a LIFO structure, typically located in the higher parts of memory. On the standard PC x86 computer architecture it grows toward address zero; on some other architectures it grows the opposite direction. A “stack pointer” register tracks the top of the stack; it is adjusted each time a value is “pushed” onto the stack. The set of values pushed for one function call is termed a “stack frame”; A stack frame consists at minimum of a return address.</p>
<p>Stack, where automatic variables are stored, along with information that is saved each time a function is called. Each time a function is called, the address of where to return to and certain information about the caller’s environment, such as some of the machine registers, are saved on the stack. The newly called function then allocates room on the stack for its automatic and temporary variables. This is how recursive functions in C can work. Each time a recursive function calls itself, a new stack frame is used, so one set of variables doesn’t interfere with the variables from another instance of the function.</p>
<h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><p>Heap is the segment where dynamic memory allocation usually takes place.</p>
<p>The heap area begins at the end of the BSS segment and grows to larger addresses from there.The Heap area is managed by malloc, realloc, and free, which may use the brk and sbrk system calls to adjust its size (note that the use of brk/sbrk and a single “heap area” is not required to fulfill the contract of malloc/realloc/free; they may also be implemented using mmap to reserve potentially non-contiguous regions of virtual memory into the process’ virtual address space). The Heap area is shared by all shared libraries and dynamically loaded modules in a process.</p>
<p>The <a class="link"   href="https://linux.die.net/man/1/size" >size(1)<i class="fas fa-external-link-alt"></i></a> command reports the sizes (in bytes) of the text, data, and bss segments.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><ul>
<li><p>Check the following simple C program</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">  </span><br><span class="line">int main(void) </span><br><span class="line">&#123; </span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ubuntu@ip-172-31-42-139:~/coding$ gcc -O0 ./memory-layout.c -o memory-layout</span><br><span class="line">ubuntu@ip-172-31-42-139:~/coding$ size memory-layout</span><br><span class="line">   text	   data	    bss	    dec	    hex	filename</span><br><span class="line">   1099	    544	      8	   1651	    673	memory-layout</span><br></pre></td></tr></table></figure></li>
<li><p>Let us add one global variable in program, now check the size of bss (highlighted in red color)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">  </span><br><span class="line">int global; /* Uninitialized variable stored in bss*/</span><br><span class="line">  </span><br><span class="line">int main(void) </span><br><span class="line">&#123; </span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Let us add one static variable which is also stored in bss</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">  </span><br><span class="line">int global; /* Uninitialized variable stored in bss*/</span><br><span class="line">  </span><br><span class="line">int main(void) </span><br><span class="line">&#123; </span><br><span class="line">    static int i; /* Uninitialized static variable stored in bss */</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Let us initialize the static variable which will then be stored in Data Segment (DS)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">  </span><br><span class="line">int global; /* Uninitialized variable stored in bss*/</span><br><span class="line">  </span><br><span class="line">int main(void) </span><br><span class="line">&#123; </span><br><span class="line">    static int i = 100; /* Initialized static variable stored in DS*/</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Let us initialize the global variable which will then be stored in Data Segment (DS)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">  </span><br><span class="line">int global = 10; /* initialized global variable stored in DS*/</span><br><span class="line">  </span><br><span class="line">int main(void) </span><br><span class="line">&#123; </span><br><span class="line">    static int i = 100; /* Initialized static variable stored in DS*/</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Heap-Details"><a href="#Heap-Details" class="headerlink" title="Heap Details"></a>Heap Details</h3><p>Heap Zoom In<br><img src="heap-zoom-in.png" alt="Heap Zoom In"><br>When malloc size is less than M_MMAP_THRESHOLD, which could set by mallopt(), brk() will be used, otherwise mmap() will be used. With brk() the memory blocks are not immediately returned to system, the C library aggregates them until a sufficiently large, contiguous chunk can be freed at once.</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a class="link"   href="https://en.m.wikibooks.org/wiki/X86_Assembly/X86_Architecture" >x86 Architecture<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.linuxjournal.com/article/6390" >Advanced Memory Allocation<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://manybutfinite.com/post/anatomy-of-a-program-in-memory/" >Anatomy of a Program in Memory<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://manybutfinite.com/post/how-the-kernel-manages-your-memory/" >How The Kernel Manages Your Memory<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://manybutfinite.com/post/memory-translation-and-segmentation/" >Memory Translation and Segmentation<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>THEORY</category>
      </categories>
      <tags>
        <tag>program</tag>
        <tag>memory layout</tag>
      </tags>
  </entry>
  <entry>
    <title>Build NAS with Raspberry Pi</title>
    <url>/2021/11/14/nas-with-raspberrypi/</url>
    <content><![CDATA[<h3 id="I-Install-Raspberry-Pi-OS"><a href="#I-Install-Raspberry-Pi-OS" class="headerlink" title="I. Install Raspberry Pi OS"></a>I. Install Raspberry Pi OS</h3><p><a class="link"   href="https://www.raspberrypi.com/software/" >Install Raspberry Pi OS using Raspberry Pi Imager<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.raspberrypi.com/software/operating-systems/" >Raspberry Pi Operating system images<i class="fas fa-external-link-alt"></i></a>, Raspberry Pi OS Lite.</p>
<h3 id="II-Modify-Pi-OS-SD-Card-Content-Optional"><a href="#II-Modify-Pi-OS-SD-Card-Content-Optional" class="headerlink" title="II. Modify Pi OS SD Card Content(Optional)"></a>II. Modify Pi OS SD Card Content(Optional)</h3><p>Connect via SSH to a Raspberry Pi, without desktop monitor.</p>
<ul>
<li>touch <strong>ssh</strong> file in <em>boot volume</em>.</li>
<li>touch and config wifi file <strong>wpa_supplicant.conf</strong>  in <em>boot volume</em>.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">scan_ssid=1</span><br><span class="line">ssid=&quot;your_wifi_ssid&quot;</span><br><span class="line">psk=&quot;your_wifi_password&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Added files in <em>boot volume</em><br><img src="addedfilesinbootvolume.png" alt="added files"></li>
<li>Content of wpa_supplicant.conf<br><img src="./wpa_supplicant.conf.png" alt="wpa_supplicant.conf"></li>
</ul>
<h3 id="III-Boot-Pi-OS-and-Install-Open-Media-Vault"><a href="#III-Boot-Pi-OS-and-Install-Open-Media-Vault" class="headerlink" title="III. Boot Pi OS, and Install Open Media Vault"></a>III. Boot Pi OS, and Install Open Media Vault</h3><p>Raspberry Pi OS default user <strong>pi</strong>, and password <strong>raspberry</strong>.</p>
<ul>
<li>Update Pi OS<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade</span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure></li>
<li>Download and Install Open Media Vault<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt install git</span><br><span class="line">$ git clone https://github.com/OpenMediaVault-Plugin-Developers/installScript.git</span><br><span class="line">$ cd installScript/</span><br><span class="line">$ sudo ./install</span><br><span class="line">$ sudo ./install --fix-missing</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="IV-Access-Open-Media-Vault"><a href="#IV-Access-Open-Media-Vault" class="headerlink" title="IV. Access Open Media Vault"></a>IV. Access Open Media Vault</h3><p>Open a browser and enter the Raspberry Pi IP address. The default credentials are user: <strong>admin</strong>, pass: <strong>openmediavault</strong>.</p>
<ul>
<li>Open Media Vault Login Console<br><img src="./openmediavaultlogin.png" alt="Open Media Vault Login Console"></li>
<li>Open Media Vault Management Console<br><img src="./openmediavault.png" alt="Open Media Vault Management Console"></li>
</ul>
<h3 id="V-Share-FileSystem-to-Windows-10"><a href="#V-Share-FileSystem-to-Windows-10" class="headerlink" title="V. Share FileSystem to Windows 10"></a>V. Share FileSystem to Windows 10</h3><ul>
<li>Open Media Vault Config<ul>
<li><strong>Storage</strong> -&gt; <strong>File Systems</strong> -&gt; Create &amp; Mount filesytem, Apply the changes</li>
<li><strong>User Management</strong> -&gt; <strong>Settings</strong> -&gt; Create user <em>win</em></li>
<li><strong>Storage</strong> -&gt; <strong>Shared Folders</strong> -&gt; Create folder <em>win</em>, and set user <em>win</em> with Read/Write Privileges</li>
<li><strong>Services</strong> -&gt; <strong>SMB/CIFS</strong> -&gt; <strong>Settings</strong> -&gt; turn on Enabled, <em>Workgroup</em> name should be same with your Windows</li>
<li><strong>Services</strong> -&gt; <strong>SMB/CIFS</strong> -&gt; <strong>Shares</strong> -&gt; Create, Apply the changes</li>
</ul>
</li>
<li>Windows 10 Config<ul>
<li><strong>Network &amp; Internet</strong> -&gt; <strong>Change advanced sharing options</strong> -&gt; Turn on  <strong>Network Discovery and File Sharing</strong></li>
<li><strong>Credential Manager</strong> -&gt; <strong>Add a Windows Credential</strong>, same with the created OMV user name and password</li>
</ul>
</li>
<li>Access shared folder with OMV Server hostname<br>WIN+R: <strong>\\hostname</strong>, try to create a new file or folder in the shared folder.<br><img src="./winaccesssharedfolder.png" alt="WIN Access Shared Folder"></li>
</ul>
<h3 id="VI-Share-FileSystem-to-MacOS-Not-Completed"><a href="#VI-Share-FileSystem-to-MacOS-Not-Completed" class="headerlink" title="VI. Share FileSystem to MacOS(Not Completed)"></a>VI. Share FileSystem to MacOS(Not Completed)</h3><p>…</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://www.openmediavault.org/" >openmediavault: The open network storage solution<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.instructables.com/NAS-Raspberry-Pi/" >NAS Raspberry Pi<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.learnrobotics.org/blog/raspberry-pi-without-a-monitor/" >Connect to Raspberry Pi without a Monitor<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.tomshardware.com/reviews/raspberry-pi-headless-setup-how-to,6028.html" >How to Set Up a Headless Raspberry Pi, Without Ever Attaching a Monitor<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://forum.openmediavault.org/index.php?thread/27271-how-to-connect-to-omv-smb-shares-with-windows-10/" >Connect to OMV SMB shares with Windows 10<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>TOOLS</category>
      </categories>
      <tags>
        <tag>Raspberry Pi</tag>
        <tag>NAS</tag>
        <tag>OMV(Open Medida Vault)</tag>
      </tags>
  </entry>
  <entry>
    <title>Netfilter Framework</title>
    <url>/2018/09/07/netfilter/</url>
    <content><![CDATA[<p><a class="link"   href="http://ipset.netfilter.org/" >IP sets<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://www.linuxvirtualserver.org/" >ipvs<i class="fas fa-external-link-alt"></i></a> all based on the Linux kernel <a class="link"   href="https://www.netfilter.org/" >netfilter<i class="fas fa-external-link-alt"></i></a> subsystem.</p>
<h3 id="Key-Structures-Variables-and-Functions"><a href="#Key-Structures-Variables-and-Functions" class="headerlink" title="Key Structures, Variables and Functions"></a>Key Structures, Variables and Functions</h3><ul>
<li>net/netfilter/core.c: <a href="https://elixir.bootlin.com/linux/latest/ident/nf_hooks_needed">struct static_key <em>nf_hooks_needed[][]</em></a>, in the old kernel version <em>nf_hooks[][]</em> is defined.</li>
<li>include/uapi/linux/netfilter.h: <a href="https://elixir.bootlin.com/linux/latest/ident/nf_inet_hooks">enum <em>nf_inet_hooks</em></a></li>
<li>include/uapi/linux/netfilter.h: <a href="https://elixir.bootlin.com/linux/latest/ident/NFPROTO_NUMPROTO"><em>NFPROTO_NUMPROTO</em></a></li>
<li>include/uapi/linux/netfilter_ipv4.h: <a href="https://elixir.bootlin.com/linux/latest/ident/nf_ip_hook_priorities">enum <em>nf_iphook_priorities</em></a>, list the most common tables(priority from high to low):<ul>
<li>NF_IP_PRI_RAW(-300), <a class="link"   href="https://elixir.bootlin.com/linux/latest/ident/packet_raw" >packet_raw<i class="fas fa-external-link-alt"></i></a></li>
<li>NF_IP_PRI_CONNTRACK(-200), <a class="link"   href="https://elixir.bootlin.com/linux/latest/ident/nf_conntrack_l3proto_ipv4_init" >nf_conntrack_l3proto_ipv4_init<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://elixir.bootlin.com/linux/latest/ident/ipv4_conntrack_ops" >ipv4_conntrack_ops<i class="fas fa-external-link-alt"></i></a></li>
<li>NF_IP_PRI_MANGLE(-150), <a class="link"   href="https://elixir.bootlin.com/linux/latest/ident/packet_mangler" >packet_mangler<i class="fas fa-external-link-alt"></i></a></li>
<li>NF_IP_PRI_NAT_DST(-100), <a class="link"   href="https://elixir.bootlin.com/linux/latest/ident/nf_nat_ipv4_table" >nf_nat_ipv4_table<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://elixir.bootlin.com/linux/latest/ident/nf_nat_ipv4_ops" >nf_nat_ipv4_ops<i class="fas fa-external-link-alt"></i></a></li>
<li>NF_IP_PRI_FILTER(0), <a class="link"   href="https://elixir.bootlin.com/linux/latest/ident/packet_filter" >packet_filter<i class="fas fa-external-link-alt"></i></a></li>
<li>NF_IP_PRI_NAT_SRC(100), <a class="link"   href="https://elixir.bootlin.com/linux/latest/ident/nf_nat_ipv4_table" >nf_nat_ipv4_table<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://elixir.bootlin.com/linux/latest/ident/nf_nat_ipv4_ops" >nf_nat_ipv4_ops<i class="fas fa-external-link-alt"></i></a></li>
<li>NF_IP_PRI_CONNTRACK_HELPER(300), <a class="link"   href="https://elixir.bootlin.com/linux/latest/ident/ipv4_conntrack_ops" >ipv4_conntrack_ops<i class="fas fa-external-link-alt"></i></a></li>
<li>NF_IP_PRI_CONNTRACK_CONFIRM(INT_MAX), <a class="link"   href="https://elixir.bootlin.com/linux/latest/ident/ipv4_conntrack_ops" >ipv4_conntrack_ops<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a href="https://elixir.bootlin.com/linux/latest/ident/NF_HOOK"><em>NF_HOOK()</em></a></li>
<li><a href="https://elixir.bootlin.com/linux/latest/ident/ipt_register_table"><em>ipt_register_table()</em></a></li>
<li><a href="https://elixir.bootlin.com/linux/latest/ident/nf_register_net_hook"><em>nf_register_net_hook()</em></a>, in the old kernel version <em>nf_register_hook</em> is defined.</li>
</ul>
<h3 id="Netfilter-Hooks-and-Tables"><a href="#Netfilter-Hooks-and-Tables" class="headerlink" title="Netfilter Hooks and Tables"></a>Netfilter Hooks and Tables</h3><ul>
<li><p>Netfilter Hooks in Kernel<br><img src="hooks-in-kernel.png" alt="Netfilter Hooks in Kernel"></p>
</li>
<li><p>Tables in Netfilter Hooks<br><img src="tables-in-hook.png" alt="Tables in Netfilter Hooks"><br>Note: Dnat table in LOCAL_OUT actually is POST_RETOUING, but after modifty destination address/port called <a href="https://elixir.bootlin.com/linux/latest/ident/ip_route_me_harder"><em>ip_route_me_harder()</em></a>, used by iptable_nat and iptable_mangle + ip_queue, in <em>function nf_nat_ipv4_local_fn()</em>.</p>
</li>
<li><p>Detail of Connection Tracking Hooks<br><img src="conntrack-hooks.png" alt="Detail of Connection Tracking Hooks"><br>For packet received, routing decision is done by <a href="https://elixir.bootlin.com/linux/latest/ident/ip_mkroute_input"><em>ip_mkroute_input()</em></a> called by <em>ip_rcv_finish()</em>, while the local out packet routing is <a href="https://elixir.bootlin.com/linux/latest/ident/__mkroute_output"><em>__mkroute_output()</em></a>.</p>
</li>
<li><p>Transport Layer Trace(CentOS 7.4.1708 kernel-3.10.0.693)<br>inet_init(): struct net_protocol inet_protos[MAX_INET_PROTOS], e.g. udp_protocol, tcp_protocol, igmp_protocol, icmp_protocol.</p>
<ul>
<li>UDP receive path:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip_rcv_finish() --&gt; ip_route_input_slow() --&gt;ip_route_input_slow()</span><br><span class="line">	--&gt; forward: ip_mkroute_input() --&gt; rth-&gt;dst.input = ip_forward;</span><br><span class="line">	--&gt; local_input: rth-&gt;dst.input= ip_local_deliver; </span><br><span class="line">		--&gt; skb_dst(skb)-&gt;input() --&gt; ip_local_deliver() --&gt; ip_local_deliver_finish() --&gt; ipprot-&gt;handler()</span><br><span class="line">			--&gt; udp_rcv() --&gt; __udp4_lib_rcv() --&gt; udp_queue_rcv_skb() --&gt; __udp_enqueue_schedule_skb() --&gt; sk-&gt;sk_data_ready() --&gt; sock_def_readable()</span><br><span class="line">				--&gt;__wake_up_common() --&gt; curr-&gt;func() --&gt; default_wake_function() --&gt; try_to_wake_up() --&gt; ttwu_queue()</span><br></pre></td></tr></table></figure></li>
<li>UDP send path:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">udp_sendmsg() --&gt; ip_route_output_flow() --&gt; (struct xfrm_policy_afinfo *) -&gt;dst_lookup() --&gt; struct xfrm_policy_afinfo xfrm4_policy_afinfo</span><br><span class="line">	--&gt; xfrm4_dst_lookup() --&gt; __ip_route_output_key() --&gt; __mkroute_output()</span><br><span class="line">		--&gt; rth-&gt;dst.input = ip_local_deliver;</span><br><span class="line">		--&gt; rth-&gt;dst.output = ip_output;</span><br><span class="line">			--&gt; udp_send_skb() --&gt; ip_local_out() --&gt; ip_output()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="Userspace-Tools"><a href="#Userspace-Tools" class="headerlink" title="Userspace Tools"></a>Userspace Tools</h3><ul>
<li>iptables, ip6tables, arptables, ebtables</li>
<li><a class="link"   href="https://lwn.net/Articles/564095/" >nftables<i class="fas fa-external-link-alt"></i></a></li>
<li>bpfilter, <a class="link"   href="https://lwn.net/Articles/747551/" >BPF comes to firewalls<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li>Linux Kernel Networking: Implemetation and Theory</li>
</ul>
]]></content>
      <categories>
        <category>KERNEL</category>
      </categories>
      <tags>
        <tag>kernel</tag>
        <tag>netfilter</tag>
      </tags>
  </entry>
  <entry>
    <title>Generic Netlink used in OvS</title>
    <url>/2018/04/19/netlink/</url>
    <content><![CDATA[<p>The netlink protocol is a socket-based Inter Process Communication (IPC) mechanism, based on <a class="link"   href="https://www.rfc-editor.org/rfc/rfc3549.txt" >RFC 3549<i class="fas fa-external-link-alt"></i></a>, “Linux Netlink as an IP Services Protocol.” It provides a bidirectional communication channel between userspace and the kernel or among some parts of the kernel itself.</p>
<p>Appeared first in the 2.2 Linux kernel, an alternative to the awkward IOCTL communication method, but more flexiblity. The IOCTL handlers cannot send asynchronous messages to userspace from the kernel, and you have to define IOCTL numbers.</p>
<h3 id="Netlink-API-and-Structure-in-userspace"><a href="#Netlink-API-and-Structure-in-userspace" class="headerlink" title="Netlink API and Structure in userspace"></a>Netlink API and Structure in userspace</h3><h4 id="create-netlink-socket"><a href="#create-netlink-socket" class="headerlink" title="create netlink socket"></a>create netlink socket</h4><p>socket(AF_NETLINK, SOCK_RAW, NETLINK_GENERIC)</p>
<h4 id="set-netlink-sock-options"><a href="#set-netlink-sock-options" class="headerlink" title="set netlink sock options"></a>set netlink sock options</h4><p>setsockopt(int fd, SOL_SOCKET, SO_RCVBUFFORCE, const void *optval, socklen_t optlen)</p>
<h4 id="connect-a-netlink-sock"><a href="#connect-a-netlink-sock" class="headerlink" title="connect a netlink sock"></a>connect a netlink sock</h4><p>connect(int fd, struct sockaddr *, int len)</p>
<h4 id="get-created-generic-netlink-sock’s-id"><a href="#get-created-generic-netlink-sock’s-id" class="headerlink" title="get created generic netlink sock’s id"></a>get created generic netlink sock’s id</h4><p>Send CTRL_CMD_GETFAMILY cmd to generic netlink id GENL_ID_CTRL with <strong>sendmsg()</strong>.</p>
<h4 id="generic-netlink-sock’s-id-in-OvS"><a href="#generic-netlink-sock’s-id-in-OvS" class="headerlink" title="generic netlink sock’s id in OvS"></a>generic netlink sock’s id in OvS</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static int ovs_datapath_family;</span><br><span class="line">static int ovs_vport_family;</span><br><span class="line">static int ovs_flow_family;</span><br><span class="line">static int ovs_packet_family;</span><br></pre></td></tr></table></figure>
<p>Corresponding with “generic netlink operations in OvS”.</p>
<p><strong>With a word, the operations of netlink sock in userspace just as the unix or network socket’s operations, such a friendly design.</strong></p>
<h3 id="Netlink-Interface-and-Structure-in-Kernel"><a href="#Netlink-Interface-and-Structure-in-Kernel" class="headerlink" title="Netlink Interface and Structure in Kernel"></a>Netlink Interface and Structure in Kernel</h3><h4 id="create-netlink-sock"><a href="#create-netlink-sock" class="headerlink" title="create netlink sock"></a>create netlink sock</h4><p>netlink_kernel_create(struct net *net, int unit, struct netlink_kernel_cfg *cfg)</p>
<h4 id="generic-netlink-init"><a href="#generic-netlink-init" class="headerlink" title="generic netlink init"></a>generic netlink init</h4><p>genl_pernet_init()</p>
<h4 id="generic-netlink-input-callback"><a href="#generic-netlink-input-callback" class="headerlink" title="generic netlink input callback"></a>generic netlink input callback</h4><p>(*input)(struct sk_buff *skb)<br>genl_rcv–&gt;genl_rcv_msg</p>
<h4 id="generic-netlink-sendmsg-to-userspace"><a href="#generic-netlink-sendmsg-to-userspace" class="headerlink" title="generic netlink sendmsg to userspace"></a>generic netlink sendmsg to userspace</h4><p>genlmsg_put()<br>genlmsg_unicast() /* mostly used */<br>genlmsg_multicast()</p>
<h4 id="generic-netlink-operations"><a href="#generic-netlink-operations" class="headerlink" title="generic netlink operations"></a>generic netlink operations</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * struct genl_ops - generic netlink operations</span><br><span class="line"> * @cmd: command identifier</span><br><span class="line"> * @internal_flags: flags used by the family</span><br><span class="line"> * @flags: flags</span><br><span class="line"> * @policy: attribute validation policy</span><br><span class="line"> * @doit: standard command callback</span><br><span class="line"> * @dumpit: callback for dumpers</span><br><span class="line"> * @done: completion callback for dumps</span><br><span class="line"> * @ops_list: operations list</span><br><span class="line"> */</span><br><span class="line">struct genl_ops &#123;</span><br><span class="line">	const struct nla_policy	*policy;</span><br><span class="line">	int		       (*doit)(struct sk_buff *skb,</span><br><span class="line">				       struct genl_info *info);</span><br><span class="line">	int		       (*dumpit)(struct sk_buff *skb,</span><br><span class="line">					 struct netlink_callback *cb);</span><br><span class="line">	int		       (*done)(struct netlink_callback *cb);</span><br><span class="line">	u8			cmd;</span><br><span class="line">	u8			internal_flags;</span><br><span class="line">	u8			flags;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * struct nla_policy - attribute validation policy</span><br><span class="line"> * @type: Type of attribute or NLA_UNSPEC</span><br><span class="line"> * @len: Type specific length of payload</span><br><span class="line"> *</span><br><span class="line"> * Policies are defined as arrays of this struct, the array must be</span><br><span class="line"> * accessible by attribute type up to the highest identifier to be expected.</span><br><span class="line"> *</span><br><span class="line"> * Meaning of &#x27;len&#x27; field:</span><br><span class="line"> *    NLA_STRING           Maximum length of string</span><br><span class="line"> *    NLA_NUL_STRING       Maximum length of string (excluding NUL)</span><br><span class="line"> *    NLA_FLAG             Unused</span><br><span class="line"> *    NLA_BINARY           Maximum length of attribute payload</span><br><span class="line"> *    NLA_NESTED           Don&#x27;t use &#x27;len&#x27; field -- length verification is</span><br><span class="line"> *                         done by checking len of nested header (or empty)</span><br><span class="line"> *    NLA_NESTED_COMPAT    Minimum length of structure payload</span><br><span class="line"> *    NLA_U8, NLA_U16,</span><br><span class="line"> *    NLA_U32, NLA_U64,</span><br><span class="line"> *    NLA_S8, NLA_S16,</span><br><span class="line"> *    NLA_S32, NLA_S64,</span><br><span class="line"> *    NLA_MSECS            Leaving the length field zero will verify the</span><br><span class="line"> *                         given type fits, using it verifies minimum length</span><br><span class="line"> *                         just like &quot;All other&quot;</span><br><span class="line"> *    All other            Minimum length of attribute payload</span><br><span class="line"> *</span><br><span class="line"> * Example:</span><br><span class="line"> * static const struct nla_policy my_policy[ATTR_MAX+1] = &#123;</span><br><span class="line"> * 	[ATTR_FOO] = &#123; .type = NLA_U16 &#125;,</span><br><span class="line"> *	[ATTR_BAR] = &#123; .type = NLA_STRING, .len = BARSIZ &#125;,</span><br><span class="line"> *	[ATTR_BAZ] = &#123; .len = sizeof(struct mystruct) &#125;,</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">struct nla_policy &#123;</span><br><span class="line">	u16		type;</span><br><span class="line">	u16		len;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="generic-netlink-operations-in-OvS"><a href="#generic-netlink-operations-in-OvS" class="headerlink" title="generic netlink operations in OvS"></a>generic netlink operations in OvS</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* datapath operatons, new, del, dump and set */</span><br><span class="line">struct genl_ops dp_datapath_genl_ops;</span><br><span class="line"></span><br><span class="line">/* port operations, new, del, dump and set */</span><br><span class="line">struct genl_ops dp_vport_genl_ops;</span><br><span class="line"></span><br><span class="line">/* exact flow operations */</span><br><span class="line">struct genl_ops dp_flow_genl_ops;</span><br><span class="line"></span><br><span class="line">/* upcall packets handler */</span><br><span class="line">struct genl_ops dp_packet_genl_ops;</span><br></pre></td></tr></table></figure>

<p>One-to-one correspondence with netlink sock’s id.</p>
<h3 id="Netlink-message-layout"><a href="#Netlink-message-layout" class="headerlink" title="Netlink message layout"></a>Netlink message layout</h3><h4 id="layout-illustrate"><a href="#layout-illustrate" class="headerlink" title="layout illustrate"></a>layout illustrate</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> *  &lt;------- NLA_HDRLEN ------&gt; &lt;-- NLA_ALIGN(payload)--&gt;</span><br><span class="line"> * +---------------------+- - -+- - - - - - - - - -+- - -+</span><br><span class="line"> * |        Header       | Pad |     Payload       | Pad |</span><br><span class="line"> * |   (struct nlattr)   | ing |                   | ing |</span><br><span class="line"> * +---------------------+- - -+- - - - - - - - - -+- - -+</span><br><span class="line"> *  &lt;-------------- nlattr-&gt;nla_len --------------&gt;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<h3 id="Summary-with-flow-chart"><a href="#Summary-with-flow-chart" class="headerlink" title="Summary with flow chart"></a>Summary with flow chart</h3><ul>
<li>generic netlink flow chart in OvS<br><img src="netlink-flow.jpg" alt="generic netlink flow chart in OvS"></li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a class="link"   href="https://wiki.linuxfoundation.org/networking/generic_netlink_howto" >generic netlink howto<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Append-generic-netlink-example-code"><a href="#Append-generic-netlink-example-code" class="headerlink" title="Append: generic netlink example code"></a>Append: generic netlink example code</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── kernel</span><br><span class="line">│   └── netlink_instance.c</span><br><span class="line">├── Makefile</span><br><span class="line">├── pub</span><br><span class="line">│   └── genl_ins_pub.h</span><br><span class="line">└── user</span><br><span class="line">    └── user_netlink.c</span><br></pre></td></tr></table></figure>

<h4 id="kernel-netlink-instance-c"><a href="#kernel-netlink-instance-c" class="headerlink" title="kernel/netlink_instance.c"></a>kernel/netlink_instance.c</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;linux/kernel.h&gt;</span><br><span class="line">#include &lt;linux/module.h&gt;</span><br><span class="line">#include &lt;net/genetlink.h&gt;</span><br><span class="line"></span><br><span class="line">#include &quot;../pub/genl_ins_pub.h&quot;</span><br><span class="line"></span><br><span class="line">/* attribute policy */</span><br><span class="line">static struct nla_policy instance_genl_policy[INSTANCE_A_MAX + 1] = &#123;</span><br><span class="line">   [INSTANCE_A_MSG] = &#123; .type = NLA_NUL_STRING &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/* handler */</span><br><span class="line">int instance_echo(struct sk_buff *skb, struct genl_info *info);</span><br><span class="line"></span><br><span class="line">/* operation definition */</span><br><span class="line">static struct genl_ops instance_genl_ops[INSTANCE_C_MAX] = &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        .cmd = INSTANCE_C_ECHO,</span><br><span class="line">        .flags = 0,</span><br><span class="line">        .policy = instance_genl_policy,</span><br><span class="line">        .doit = instance_echo,</span><br><span class="line">        .dumpit = NULL,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/* family definition */</span><br><span class="line">static struct genl_family instance_genl_family = &#123;</span><br><span class="line">   .id = GENL_ID_GENERATE,</span><br><span class="line">   .hdrsize = 0,</span><br><span class="line">   .name = GENL_INSTANCE_NAME,</span><br><span class="line">   .version = 1,</span><br><span class="line">   .maxattr = INSTANCE_A_MAX,</span><br><span class="line">   .netnsok = true,</span><br><span class="line">   .parallel_ops = true,</span><br><span class="line">   .ops = instance_genl_ops,</span><br><span class="line">   .n_ops = ARRAY_SIZE(instance_genl_ops),</span><br><span class="line">   .module = THIS_MODULE,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int instance_echo(struct sk_buff *skb, struct genl_info *info)</span><br><span class="line">&#123;</span><br><span class="line">    struct nlattr *na;</span><br><span class="line">    struct sk_buff *skb_echo = NULL;</span><br><span class="line">    int rc;</span><br><span class="line">    void *msg_head;</span><br><span class="line">    char *mydata;</span><br><span class="line"> </span><br><span class="line">    if (info == NULL) &#123;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    /* For each attribute there is an index in info-&gt;attrs</span><br><span class="line">     * which points to a nlattr structure in this structure</span><br><span class="line">     * the data is given</span><br><span class="line">     */</span><br><span class="line">    na = info-&gt;attrs[INSTANCE_A_MSG];</span><br><span class="line">    if (na) &#123;</span><br><span class="line">        mydata = (char *) nla_data(na);</span><br><span class="line">        if (mydata == NULL) &#123;</span><br><span class="line">            printk(KERN_ERR &quot;error while receiving data\n&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            /* shuld be validate the contend of data before print */</span><br><span class="line">            printk(KERN_INFO &quot;received: %s\n&quot;, mydata);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        printk(KERN_INFO &quot;no info-&gt;attrs %i\n&quot;, INSTANCE_A_MSG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Send a message back */</span><br><span class="line">    /* Allocate some memory, since the size is not</span><br><span class="line">     * yet known use NLMSG_GOODSIZE</span><br><span class="line">     */</span><br><span class="line">    skb_echo = genlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);</span><br><span class="line">    if (skb_echo == NULL) &#123;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Create the message headers */</span><br><span class="line">    /* arguments of genlmsg_put: </span><br><span class="line">     * struct sk_buff *, </span><br><span class="line">     * int (sending) pid, </span><br><span class="line">     * int sequence number, </span><br><span class="line">     * struct genl_family *, </span><br><span class="line">     * int flags, </span><br><span class="line">     * u8 command index (why do we need this?)</span><br><span class="line">     */</span><br><span class="line">    msg_head = genlmsg_put(skb_echo, 0, info-&gt;snd_seq + 1,</span><br><span class="line">                           &amp;instance_genl_family, 0, INSTANCE_C_ECHO);</span><br><span class="line">    if (msg_head == NULL) &#123;</span><br><span class="line">        rc = -ENOMEM;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Add a INSTANCE_A_MSG attribute (actual value to be sent) */</span><br><span class="line">    rc = nla_put_string(skb_echo, INSTANCE_A_MSG,</span><br><span class="line">                        &quot;Hello world from kernel space&quot;);</span><br><span class="line">    if (rc != 0) &#123;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /* Finalize the message */</span><br><span class="line">    genlmsg_end(skb_echo, msg_head);</span><br><span class="line"></span><br><span class="line">    /* Send the message back */</span><br><span class="line">    rc = genlmsg_unicast(genl_info_net(info), skb_echo, info-&gt;snd_portid);</span><br><span class="line">    if (rc != 0) &#123;</span><br><span class="line">        goto out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    if (!skb_echo) &#123;</span><br><span class="line">        kfree_skb(skb_echo);</span><br><span class="line">    &#125;</span><br><span class="line">    printk(KERN_ERR &quot;an error occured in instance_echo\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int __init genl_instance_init(void)</span><br><span class="line">&#123;</span><br><span class="line">    int rc;</span><br><span class="line"></span><br><span class="line">    rc = genl_register_family(&amp;instance_genl_family);</span><br><span class="line">    if (rc != 0) &#123;</span><br><span class="line">        printk(KERN_ERR &quot;register instance genl family fail, err %d\n&quot;, rc);</span><br><span class="line">        return rc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO &quot;register %s genl family success\n&quot;, GENL_INSTANCE_NAME);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void genl_instance_uninit(void)</span><br><span class="line">&#123;</span><br><span class="line">    genl_unregister_family(&amp;instance_genl_family);</span><br><span class="line"></span><br><span class="line">    printk(KERN_INFO &quot;unregister %s genl family success\n&quot;, GENL_INSTANCE_NAME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(genl_instance_init);</span><br><span class="line">module_exit(genl_instance_uninit);</span><br><span class="line"></span><br><span class="line">MODULE_DESCRIPTION(&quot;generic netlink instance&quot;);</span><br><span class="line">MODULE_LICENSE(&quot;GPL&quot;);</span><br><span class="line">MODULE_VERSION(&quot;0.1&quot;);</span><br><span class="line">MODULE_ALIAS_GENL_FAMILY(GENL_INSTANCE_NAME);</span><br></pre></td></tr></table></figure>

<h4 id="user-user-netlink-c"><a href="#user-user-netlink-c" class="headerlink" title="user/user_netlink.c"></a>user/user_netlink.c</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;poll.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/stat.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;linux/genetlink.h&gt;</span><br><span class="line"></span><br><span class="line">#include &quot;../pub/genl_ins_pub.h&quot;</span><br><span class="line"></span><br><span class="line">/* Generic macros for dealing with netlink sockets. Might be duplicated</span><br><span class="line"> * elsewhere. It is recommended that commercial grade applications use</span><br><span class="line"> * libnl or libnetlink and use the interfaces provided by the library</span><br><span class="line"> */</span><br><span class="line">#define GENLMSG_DATA(gh) ((void *)(NLMSG_DATA(gh) + GENL_HDRLEN))</span><br><span class="line">#define GENLMSG_PAYLOAD(gh) (NLMSG_PAYLOAD(gh, 0) - GENL_HDRLEN)</span><br><span class="line">#define NLA_DATA(na) ((void *)((char*)(na) + NLA_HDRLEN))</span><br><span class="line"></span><br><span class="line">#define MESSAGE_TO_KERNEL &quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">struct nl_sock</span><br><span class="line">&#123;</span><br><span class="line">    int fd;</span><br><span class="line">    uint32_t pid;</span><br><span class="line">    </span><br><span class="line">    int protocol;</span><br><span class="line">    uint32_t seq_id;</span><br><span class="line"></span><br><span class="line">    int family_id;</span><br><span class="line">    const char *name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/* memory for netlink request and response messages</span><br><span class="line"> * - headers are included</span><br><span class="line"> */</span><br><span class="line">struct gennl_ins_msg &#123;</span><br><span class="line">    struct nlmsghdr nh;</span><br><span class="line">    struct genlmsghdr gh;</span><br><span class="line">    char user[256];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">static struct nl_sock instance = &#123; .fd = -1,</span><br><span class="line">                                   .name = GENL_INSTANCE_NAME &#125;;</span><br><span class="line"></span><br><span class="line">int create_nl_sock(struct nl_sock *nl_sock, int protocol);</span><br><span class="line">int lookup_gennl_family_id(struct nl_sock *nl_sock);</span><br><span class="line">int gennl_interaction(struct nl_sock *nl_sock);</span><br><span class="line"></span><br><span class="line">int main(char **argv, int argc)</span><br><span class="line">&#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        if (create_nl_sock(&amp;instance, NETLINK_GENERIC) &lt; 0) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (gennl_interaction(&amp;instance)) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while (0);</span><br><span class="line"></span><br><span class="line">    if (instance.fd &gt; 0) &#123;</span><br><span class="line">        close(instance.fd);</span><br><span class="line">        instance.fd = -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int create_nl_sock(struct nl_sock *nl_sock, int protocol)</span><br><span class="line">&#123;</span><br><span class="line">    int retval, rcvbuf = 1024 * 1024;</span><br><span class="line">    struct sockaddr_nl local, remote;</span><br><span class="line"></span><br><span class="line">    nl_sock-&gt;fd = socket(AF_NETLINK, SOCK_RAW, protocol);</span><br><span class="line">    if (nl_sock-&gt;fd &lt; 0) &#123;</span><br><span class="line">        fprintf(stderr, &quot;create socket errno: %d\n&quot;, errno);</span><br><span class="line">        return errno;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    nl_sock-&gt;protocol = protocol;</span><br><span class="line">    nl_sock-&gt;seq_id = 1;</span><br><span class="line">    </span><br><span class="line">    if (setsockopt(nl_sock-&gt;fd, SOL_SOCKET, SO_RCVBUFFORCE,</span><br><span class="line">                   &amp;rcvbuf, sizeof rcvbuf)) &#123;</span><br><span class="line">        printf(&quot;setting %d-bytes socket receive buffer failed, errno %d\n&quot;,</span><br><span class="line">               rcvbuf, errno);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Connect to kernel (pid 0) as remote address. */</span><br><span class="line">    memset(&amp;remote, 0, sizeof remote);</span><br><span class="line">    remote.nl_family = AF_NETLINK;</span><br><span class="line">    remote.nl_pid = 0;</span><br><span class="line"></span><br><span class="line">    if (connect(nl_sock-&gt;fd, (struct sockaddr *) &amp;remote,</span><br><span class="line">                sizeof(remote)) &lt; 0) &#123;</span><br><span class="line">        retval = errno;</span><br><span class="line">        fprintf(stderr, &quot;connect sock fail, errno %d\n&quot;, errno);</span><br><span class="line"></span><br><span class="line">        goto error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (lookup_gennl_family_id(nl_sock)) &#123;</span><br><span class="line">        retval = -1;</span><br><span class="line">        goto error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line">    if (nl_sock-&gt;fd &gt;= 0) &#123;</span><br><span class="line">        close(nl_sock-&gt;fd);</span><br><span class="line">        nl_sock-&gt;fd = -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return retval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int lookup_gennl_family_id(struct nl_sock *nl_sock)</span><br><span class="line">&#123;</span><br><span class="line">    struct gennl_ins_msg request, reply;</span><br><span class="line">    struct nlattr *nl_na;</span><br><span class="line">    struct sockaddr_nl nl_address;</span><br><span class="line">    int length;</span><br><span class="line"></span><br><span class="line">    /* Step 1. prepare request msg */</span><br><span class="line">    /* netlink header */</span><br><span class="line">    request.nh.nlmsg_type = GENL_ID_CTRL;</span><br><span class="line">    request.nh.nlmsg_flags = NLM_F_REQUEST;</span><br><span class="line">    request.nh.nlmsg_seq = nl_sock-&gt;seq_id;</span><br><span class="line">    request.nh.nlmsg_pid = getpid();</span><br><span class="line">    request.nh.nlmsg_len = NLMSG_LENGTH(GENL_HDRLEN);</span><br><span class="line"></span><br><span class="line">    /* generic netlink header */</span><br><span class="line">    request.gh.cmd = CTRL_CMD_GETFAMILY;</span><br><span class="line">    request.gh.version = 0x2;</span><br><span class="line"></span><br><span class="line">    /* assemble attr */</span><br><span class="line">    nl_na = (struct nlattr *) GENLMSG_DATA(&amp;request);</span><br><span class="line">    nl_na-&gt;nla_type = CTRL_ATTR_FAMILY_NAME;</span><br><span class="line">    nl_na-&gt;nla_len = strlen(GENL_INSTANCE_NAME) + 1 + NLA_HDRLEN;</span><br><span class="line">    strcpy(NLA_DATA(nl_na), GENL_INSTANCE_NAME);</span><br><span class="line"></span><br><span class="line">    request.nh.nlmsg_len += NLMSG_ALIGN(nl_na-&gt;nla_len);</span><br><span class="line"></span><br><span class="line">    /* Step 2. send request msg */</span><br><span class="line">    memset(&amp;nl_address, 0, sizeof(nl_address));</span><br><span class="line">    nl_address.nl_family = AF_NETLINK;</span><br><span class="line"></span><br><span class="line">    length = sendto(nl_sock-&gt;fd, (char *) &amp;request, request.nh.nlmsg_len,</span><br><span class="line">                    0, (struct sockaddr *) &amp;nl_address, sizeof(nl_address));</span><br><span class="line">    if (length != request.nh.nlmsg_len) &#123;</span><br><span class="line">        fprintf(stderr, &quot;%s sendto fail, %d\n&quot;, __func__, length);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Step 3. receive reply msg */</span><br><span class="line">    length = recv(nl_sock-&gt;fd, &amp;reply, sizeof(reply), 0);</span><br><span class="line">    if (length &lt; 0) &#123;</span><br><span class="line">        fprintf(stderr, &quot;%s recv fail, %d\n&quot;, __func__, length);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Step 4. validate&amp;parse reply msg */</span><br><span class="line">    if (!NLMSG_OK((&amp;reply.nh), length)) &#123;</span><br><span class="line">        fprintf(stderr, &quot;family ID request: invalid message\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    if (reply.nh.nlmsg_type == NLMSG_ERROR) &#123;</span><br><span class="line">        fprintf(stderr, &quot;family ID request: receive error\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nl_na = (struct nlattr *) GENLMSG_DATA(&amp;reply);</span><br><span class="line">    nl_na = (struct nlattr *) ((char *) nl_na + NLA_ALIGN(nl_na-&gt;nla_len));</span><br><span class="line">    if (nl_na-&gt;nla_type != CTRL_ATTR_FAMILY_ID) &#123;</span><br><span class="line">        fprintf(stderr, &quot;family ID request: receive nla type(%d) not match %d\n&quot;,</span><br><span class="line">                nl_na-&gt;nla_type, CTRL_ATTR_FAMILY_ID);</span><br><span class="line">        return -1;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nl_sock-&gt;family_id = *(__u16 *) NLA_DATA(nl_na);</span><br><span class="line">    printf(&quot;%s genric netlink id %d\n&quot;,</span><br><span class="line">           GENL_INSTANCE_NAME, nl_sock-&gt;family_id);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int gennl_interaction(struct nl_sock *nl_sock)</span><br><span class="line">&#123;</span><br><span class="line">    struct gennl_ins_msg request, reply;</span><br><span class="line">    struct nlattr *nl_na;</span><br><span class="line">    struct sockaddr_nl nl_address;</span><br><span class="line">    int length;</span><br><span class="line"></span><br><span class="line">    memset(&amp;request, 0, sizeof(request));</span><br><span class="line">    memset(&amp;reply, 0, sizeof(reply));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    request.nh.nlmsg_len = NLMSG_LENGTH(GENL_HDRLEN);</span><br><span class="line">    request.nh.nlmsg_type = nl_sock-&gt;family_id;</span><br><span class="line">    request.nh.nlmsg_flags = NLM_F_REQUEST;</span><br><span class="line">    request.nh.nlmsg_seq = 60;</span><br><span class="line">    request.nh.nlmsg_pid = getpid();</span><br><span class="line"></span><br><span class="line">    request.gh.cmd = INSTANCE_C_ECHO;</span><br><span class="line">    nl_na = (struct nlattr *) GENLMSG_DATA(&amp;request);</span><br><span class="line">    nl_na-&gt;nla_type = INSTANCE_A_MSG;</span><br><span class="line">    nl_na-&gt;nla_len = sizeof(MESSAGE_TO_KERNEL) + NLA_HDRLEN;</span><br><span class="line">    memcpy(NLA_DATA(nl_na), MESSAGE_TO_KERNEL, sizeof(MESSAGE_TO_KERNEL));</span><br><span class="line"></span><br><span class="line">    request.nh.nlmsg_len += NLMSG_ALIGN(nl_na-&gt;nla_len);</span><br><span class="line"></span><br><span class="line">    memset(&amp;nl_address, 0, sizeof(nl_address));</span><br><span class="line">    nl_address.nl_family = AF_NETLINK;</span><br><span class="line"></span><br><span class="line">    length = sendto(nl_sock-&gt;fd, (char *) &amp;request, request.nh.nlmsg_len,</span><br><span class="line">                    0, (struct sockaddr *) &amp;nl_address, sizeof(nl_address));</span><br><span class="line">    if (length != request.nh.nlmsg_len) &#123;</span><br><span class="line">        fprintf(stderr, &quot;%s sento return %d, expect %d\n&quot;, __func__,</span><br><span class="line">                length, request.nh.nlmsg_len);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    length = recv(nl_sock-&gt;fd, &amp;reply, sizeof(reply), 0);</span><br><span class="line">    if (length &lt; 0) &#123;</span><br><span class="line">        printf(&quot;%s recv error %d\n&quot;, __func__, length);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!NLMSG_OK((&amp;reply.nh), length)) &#123;</span><br><span class="line">        fprintf(stderr, &quot;%s recv invalid nlmsg\n&quot;, __func__);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    length = GENLMSG_PAYLOAD(&amp;reply.nh);</span><br><span class="line">    nl_na = (struct nlattr *) GENLMSG_DATA(&amp;reply);</span><br><span class="line">    printf(&quot;kernel replied: %s\n&quot;,(char *)NLA_DATA(nl_na));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="pub-genl-ins-pub-h"><a href="#pub-genl-ins-pub-h" class="headerlink" title="pub/genl_ins_pub.h"></a>pub/genl_ins_pub.h</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define GENL_INSTANCE_NAME &quot;gennl_ins&quot;</span><br><span class="line"></span><br><span class="line">#ifndef ARRAY_SIZE</span><br><span class="line">#define ARRAY_SIZE(_x)  ((sizeof(_x))/sizeof (_x)[0])</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">/* commands */</span><br><span class="line">enum &#123;</span><br><span class="line">   INSTANCE_C_UNSPEC,</span><br><span class="line">   INSTANCE_C_ECHO,</span><br><span class="line">   __INSTANCE_C_MAX,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#define INSTANCE_C_MAX (__INSTANCE_C_MAX - 1)</span><br><span class="line"></span><br><span class="line">/* attributes */</span><br><span class="line">enum &#123;</span><br><span class="line">   INSTANCE_A_UNSPEC,</span><br><span class="line">   INSTANCE_A_MSG,</span><br><span class="line">   __INSTANCE_A_MAX,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#define INSTANCE_A_MAX (__INSTANCE_A_MAX - 1)</span><br></pre></td></tr></table></figure>

<h4 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Example run in CentOS 7.4 with kernel 3.10.0-693.el7.x86_64</span><br><span class="line"># Tabs maybe transfer to space, this should be check or correct after copy.</span><br><span class="line"></span><br><span class="line">CONFIG_MODULE_SIG=n</span><br><span class="line">obj-m += kernel/netlink_instance.o</span><br><span class="line">nl_kern-objs := kernel/netlink_instance.o</span><br><span class="line"></span><br><span class="line">all: kernel-build kernel-clean-temporary user-build</span><br><span class="line">	@tput setaf 3</span><br><span class="line">	@echo &quot;    done: all&quot;</span><br><span class="line">	@tput sgr0</span><br><span class="line">clean: kernel-clean user-clean</span><br><span class="line">	@tput setaf 3</span><br><span class="line">	@echo &quot;    done: clean&quot;</span><br><span class="line">	@tput sgr0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kernel-build:</span><br><span class="line">	@tput setaf 1</span><br><span class="line">	@echo &quot;    kernel-build&quot;</span><br><span class="line">	@tput sgr0</span><br><span class="line">	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules</span><br><span class="line">kernel-clean:</span><br><span class="line">	@tput setaf 1</span><br><span class="line">	@echo &quot;    kernel-clean&quot;</span><br><span class="line">	@tput sgr0</span><br><span class="line">	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean</span><br><span class="line">kernel-clean-temporary:</span><br><span class="line">	@tput setaf 1</span><br><span class="line">	@echo &quot;    kernel-clean-temporary&quot;</span><br><span class="line">	@tput sgr0</span><br><span class="line">	-rm -rf *.o *~ core .depend .*.cmd *.mod.c .tmp_versions</span><br><span class="line">	-rm -rf kernel/*.o kernel/*~ kernel/core kernel/.depend kernel/.*.cmd  kernel/*.mod.c kernel/.tmp_versions</span><br><span class="line">	-rm -rf Module.symvers modules.order</span><br><span class="line">kernel-module-install:</span><br><span class="line">	@tput setaf 1</span><br><span class="line">	@echo &quot;    kernel-module-install&quot;</span><br><span class="line">	@tput sgr0</span><br><span class="line">	-sudo insmod netlink-instance.ko</span><br><span class="line">kernel-module-uninstall:</span><br><span class="line">	@tput setaf 1</span><br><span class="line">	@echo &quot;    kernel-module-uninstall&quot;</span><br><span class="line">	@tput sgr0</span><br><span class="line">	-sudo rmmod netlink-instance</span><br><span class="line">kernel-clean-ring-buffer:</span><br><span class="line">	@tput setaf 1</span><br><span class="line">	@echo &quot;    kernel-clean-ring-buffer&quot;</span><br><span class="line">	@tput sgr0</span><br><span class="line">	sudo dmesg -c &gt; /dev/null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user-build:</span><br><span class="line">	@tput setaf 1</span><br><span class="line">	@echo &quot;    user-build&quot;</span><br><span class="line">	@tput sgr0</span><br><span class="line">	gcc user/user_netlink.c -o genl_user</span><br><span class="line">user-clean:</span><br><span class="line">	@tput setaf 1</span><br><span class="line">	@echo &quot;    user-clean&quot;</span><br><span class="line">	@tput sgr0</span><br><span class="line">	rm -rf *.out genl_user</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>Open vSwitch</tag>
        <tag>network</tag>
        <tag>netlink</tag>
      </tags>
  </entry>
  <entry>
    <title>Insight of Next Generation Computation Architecture</title>
    <url>/2022/02/04/next-computation-insight/</url>
    <content><![CDATA[<h3 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points"></a>Key Points</h3><p>Mainframe decomposed to Server, Server will be decomposed to Component Pools(CPU, storage, memory, GPU, etc.), Data Center will be refactored: Infrastructure as Code (Software Defined Data Center).<br>Figure 1. Gartner’s Datacenter Transformation<br><img src="./DatacenterTransformationGartner.png" alt="DatacenterTransformationGartner"></p>
<h3 id="Key-Facts"><a href="#Key-Facts" class="headerlink" title="Key Facts"></a>Key Facts</h3><ul>
<li><strong>Standards</strong>: <a class="link"   href="https://www.computeexpresslink.org/" >CXL: Compute Express Link<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.nextplatform.com/2021/09/07/the-cxl-roadmap-opens-up-the-memory-hierarchy/" >THE CXL ROADMAP OPENS UP THE MEMORY HIERARCHY<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.dmtf.org/standards/redfish" >DMTF Redfish<i class="fas fa-external-link-alt"></i></a></li>
<li><strong>Researches</strong><ul>
<li><a class="link"   href="https://www.usenix.org/system/files/osdi18-shan.pdf" >OSDI ‘18 LegoOS: A Disseminated, Distributed OS for Hardware Resource Disaggregation<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="http://lastweek.io/pubs/SOSP17-Lego-Poster.pdf" >a Brief Introduction<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.usenix.org/conference/osdi18/presentation/shan" >Slides Page 10 lists all resource disaggregation attemps<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://upcommons.upc.edu/bitstream/handle/2117/132696/dReDBox__a_Disaggregated_Architectural_Perspective_for_Data_Centers.pdf;jsessionid=B6F6E719D11D6365794B0AE42844518B?sequence=3" >‘18 dReDBox: a Disaggregated Architectural Perspective for Data Centers<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://word19.ece.cornell.edu/" >WORD ‘19: The First Workshop on Resource Disaggregation<i class="fas fa-external-link-alt"></i></a> <a class="link"   href="http://word19.ece.cornell.edu/serverless_data_center.pdf" >UC Berkeley’s The Serverless Data Center: Hardware Disaggregation Meets Serverless Computing<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://yoav.net.technion.ac.il/files/2019/04/SFMA19-Caladan.pdf" >‘19 One Interface to Rule them All: A Hardware/Software Co-Design for Disaggregated Computing<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.diva-portal.org/smash/get/diva2:1292615/FULLTEXT01.pdf" >‘19 Disaggregated Data Centers: Challenges and Tradeoffs<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.usenix.org/conference/atc20/presentation/al-maruf" >USENIX ATC ‘20: Effectively Prefetching Remote Memory with Leap<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.cis.upenn.edu/~qizhen/vldb20-zhang.pdf" >VLDB ‘20: Understanding the Effect of Data Center Resource Disaggregation on Production DBMSs<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://vldb.org/conference.html" >VLDB: Very Large Data Bases<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://sc20.supercomputing.org/proceedings/workshops/workshop_pages/ws_whpc107.html" >SC ‘20: Towards Modular SupercomputingResource Disaggregation and Virtualization by Network-Attached Accelerators<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://arxiv.org/pdf/2104.04060.pdf" >‘21: Network in Disaggregated Datacenters<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://wuklab.github.io/words/" >WORDS ‘21: The Second Workshop On Resource Disaggregation and Serverless<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://arxiv.org/pdf/2108.03492.pdf" >ASPLOS ‘22 Clio: A Hardware-Software Co-Designed Disaggregated Memory System<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://dl.acm.org/doi/pdf/10.1145/3514245" >‘22 A Case For Intra-Rack Resource Disaggregation in HPC<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><strong>Startups</strong>: <ul>
<li><a class="link"   href="https://ayarlabs.com/" >2015 AyarLabs<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="https://ayarlabs.com/disaggregating-system-architectures-for-future-hpc-and-ai-workloads/" >Disaggregating System Architectures for Future HPC and AI Workloads<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.liqid.com/" >2016 LIQID<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.liqid.com/why-liqid/technology" >Disaggregate and Compose Your Datacenter<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.dropbox.com/s/ihu7m103w9lg5ju/Sumit_Puri-RESDIS2022.pdf?dl=0" >RESDIS ‘22, Rethink HPC Possibilities with Composable<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://memverge.com/" >2017 MemVerge<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://memverge.com/hello-vmware-and-welcome-to-the-big-memory-party/" >Hello VMware, and Welcome to the Big Memory Party!<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.asteralabs.com/" >2017 Astera Labs<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.asteralabs.com/wp-content/uploads/2021/03/Astera_Labs_White_Paper-Data_Center_Trends_400GbE_800GbE_final.pdf" >Data Center Resource Disaggregation Drives Need for Cost- Effective 400/800-GbE Interconnects<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://gigaio.com/" >2017 GIGAIO<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://gigaio.com/wp-content/uploads/2022/01/CDI-Primer_v2-1.pdf" >Rack-Scale Composable Infrastructure<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><strong>Giants</strong><ul>
<li><a class="link"   href="https://sci-hub.hkvisa.net/10.1145/3149457.3149466" >HPC Asia 2018: IBM’s Towards a composable computer system<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.rd.ntt/e/research/JN202105_13586.html" >NTT R&amp;D 2021: Feature Articles: Disaggregated Computing Will Change the World<i class="fas fa-external-link-alt"></i></a></li>
<li><a href="https://www.vmware.com/vmworld/en/video-library/video-landing.html?sessionid=16208383900260013daz">VMware <strong>vm</strong>world 2021: published Project Capitola, Introducing VMware Project Capitola: Unbounding the ‘Memory Bound’</a>, <a class="link"   href="https://www.nextplatform.com/2021/10/11/vmware-stretches-esxi-to-be-a-disaggregated-memory-hypervisor/" >VMWARE STRETCHES ESXI TO BE A DISAGGREGATED MEMORY HYPERVISOR<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://resdis.github.io/ws/2022/hpcasia/index.html" >RESDIS 2022: 1st International Workshop on RESource DISaggregation in High-Performance Computing<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.intel.com/content/www/us/en/architecture-and-technology/rack-scale-design-overview.html" >Intel® Rack Scale Design (Intel® RSD)<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
</ul>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>The base and most important step: low latency link protocal (network) is ready (Standard &amp; Startups), <strong>Software for disaggreated is the opportunity</strong>. Architecture bird view from Figure 2 to Figure 5.<br>Figure 2. Rack Architecture Today 2 Decades Old<br><img src="./RackArchitectureToday2DecadesOld.png" alt="Rack Architecture Today 2 Decades Old"><br>Figure 3. Eliminating Staranded Resources, Disaggregation Architecture<br><img src="./EliminatingStarandedResources.png" alt="Eliminating Staranded Resources"><br>Figure 4. Disaggregated rack<br><img src="./DisaggregatedRack.png" alt="DisaggregatedRack"><br>Figure 5. A Transition Use Cases<br><img src="./TransitionUseCases.png" alt="TransitionUseCases"></p>
<h3 id="IBM-z-Series-an-unintentional-attempt-of-resource-disaggregation"><a href="#IBM-z-Series-an-unintentional-attempt-of-resource-disaggregation" class="headerlink" title="IBM z Series, an unintentional attempt of resource disaggregation"></a>IBM z Series, an unintentional attempt of resource disaggregation</h3><ul>
<li><a class="link"   href="https://www.redbooks.ibm.com/redbooks/pdfs/sg246990.pdf" >ABCs of z/OS System Programming Volume 10<i class="fas fa-external-link-alt"></i></a> Chapter 1.4 System components, Figure 1-4 System components</li>
<li><a class="link"   href="https://www.redbooks.ibm.com/redbooks.nsf/pages/z15" >Explore and make use of the advanced capabilities of the IBM z15<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.redbooks.ibm.com/redbooks/pdfs/sg248850.pdf" >IBM z15 Technical Introduction<i class="fas fa-external-link-alt"></i></a>, Chapter 5.2 Virtualization, Figure 5-1 Virtualization on the IBM Z platform</li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a class="link"   href="https://cseweb.ucsd.edu/~yiying/disaggregate.html" >WukLab Yiying Zhang<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www2.deloitte.com/global/en/pages/technology-media-and-telecommunications/topics/technology-fast-500.html" >Deloitte’s Technology Fast 500™<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://gigaio.com/project/microchip-and-gigaio-on-cloud-class-composable-infrastructure/" >Microchip and GigaIO on Cloud-Class Composable Infrastructure<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.asteralabs.com/products/" >Astera Labs Unlock Low-Latency Connectivity In Complex System Topologies<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>INSIGHT</category>
      </categories>
      <tags>
        <tag>hardware composable</tag>
        <tag>resource disaggregation</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenStack Bridge</title>
    <url>/2018/03/31/openstack-bridge/</url>
    <content><![CDATA[<h3 id="Openstack-Bridge-Oview"><a href="#Openstack-Bridge-Oview" class="headerlink" title="Openstack Bridge Oview"></a>Openstack Bridge Oview</h3><ul>
<li>Bridge Overview<br><img src="Bridge-Overview.jpg" alt="Bridge Overview"></li>
</ul>
<h3 id="Packet-Travel-Path-I"><a href="#Packet-Travel-Path-I" class="headerlink" title="Packet Travel Path I"></a>Packet Travel Path I</h3><ul>
<li>Packet From Uplink to GuestOS<br>![Packet From Uplink to GuestOS](Packet-From Uplink-to-VM.jpg)</li>
</ul>
<h3 id="Packet-Travel-Path-II"><a href="#Packet-Travel-Path-II" class="headerlink" title="Packet Travel Path II"></a>Packet Travel Path II</h3><ul>
<li>Packet From GuestOS to Uplink<br><img src="Packet-From-VM-to-Uplink.jpg" alt="Packet From GuestOS to Uplink"></li>
</ul>
<h3 id="Packet-Travel-Path-III"><a href="#Packet-Travel-Path-III" class="headerlink" title="Packet Travel Path III"></a>Packet Travel Path III</h3><ul>
<li>Vxlan Packet Receive Flow<br><img src="Vxlan-Receive-Flow.jpg" alt="Vxlan Packet Receive Flow"></li>
<li>Create VxLAN Port<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl add-br br0</span><br><span class="line">$ ovs-vsctl add-port br0 vxlan1 -- set interface vxlan1 type=vxlan \</span><br><span class="line">    options:remote_ip=192.168.1.2 options:key=flow options:dst_port=8472</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Packet-Travel-Path-IV"><a href="#Packet-Travel-Path-IV" class="headerlink" title="Packet Travel Path IV"></a>Packet Travel Path IV</h3><ul>
<li>Virtio net Front-end xmit<br><img src="front-end-xmit.png" alt="Virtio net Front-end xmit"></li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://developer.openstack.org/firstapp-libcloud/networking.html" >OpenStack Networking<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://docs.openstack.org/mitaka/networking-guide/" >OpenStack Networking Guide<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://docs.openstack.org/liberty/networking-guide/deploy.html" >Deployment scenarios<i class="fas fa-external-link-alt"></i></a>: <a class="link"   href="https://docs.openstack.org/liberty/networking-guide/scenario-provider-ovs.html" >Scenario: Provider networks with Open vSwitch<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://docs.openstack.org/newton/networking-guide/deploy-ovs-ha-dvr.html" >Open vSwitch: High availability using DVR<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Related-articles"><a href="#Related-articles" class="headerlink" title="Related articles"></a>Related articles</h3><ul>
<li><a class="link"   href="http://www.linuximq.net/" >imb<i class="fas fa-external-link-alt"></i></a>: intermediate queueing device</li>
<li><a class="link"   href="https://wiki.linuxfoundation.org/networking/ifb" >ifb<i class="fas fa-external-link-alt"></i></a>: intermediate function block device</li>
<li><a class="link"   href="https://www.docum.org/docum.org/kptd/" >KPTD<i class="fas fa-external-link-alt"></i></a>: Kernel Packet Traveling Diagram</li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>Open vSwitch</tag>
        <tag>network</tag>
        <tag>OpenStack</tag>
        <tag>bridge</tag>
      </tags>
  </entry>
  <entry>
    <title>Open vSwitch Conntrack</title>
    <url>/2018/09/02/ovs-conntrack/</url>
    <content><![CDATA[<p>OVS can be used with the Connection tracking system where OpenFlow flow can be used to match on the state of a TCP, UDP, ICMP, etc., connections. (Connection tracking system supports tracking of both statefull and stateless protocols)</p>
<h3 id="Match-Fields"><a href="#Match-Fields" class="headerlink" title="Match Fields"></a>Match Fields</h3><ul>
<li><strong>ct_state</strong>: new, est, rel, rpl, inv, trk, snat, dnat</li>
<li><strong>ct_zone</strong>: A zone is an independent connection tracking context which can be set by a ct action. A 16-bit ct_zone set by the most recent ct action (by an OpenFlow flow on a conntrack entry) can be used as a match field in another flow entry.</li>
<li><strong>ct_mark</strong>: The 32-bit metadata committed, by an action within the exec parameter to the ct action, to the connection to which the current packet belongs.</li>
<li><strong>ct_label</strong>: The 128-bit label committed by an action within the exec parameter to the ct action, to the connection to which the current packet belongs.</li>
<li><strong>ct_nw_src/ct_ipv6_src</strong>: Matches IPv4/IPv6 conntrack original direction tuple source address.</li>
<li><strong>ct_nw_dst/ct_ipv6_dst</strong>: Matches IPv4/IPv6 conntrack original direction tuple destination address.</li>
<li><strong>ct_nw_proto</strong>: Matches conntrack original direction tuple IP protocol type.</li>
<li><strong>ct_tp_src</strong>: Matches on the conntrack original direction tuple transport source port.</li>
<li><strong>ct_tp_dst</strong>: Matches on the conntrack original direction tuple transport destination port.</li>
</ul>
<h3 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h3><ul>
<li><strong>commit</strong>: Commit the connection to the connection tracking module which will be stored beyond the lifetime of packet in the pipeline.</li>
<li><strong>force</strong>: The force flag may be used in addition to commit flag to effectively terminate the existing connection and start a new one in the current direction.</li>
<li><strong>table=number</strong>: Fork pipeline processing in two. The original instance of the packet will continue processing the current actions list as an untracked packet. An additional instance of the packet will be sent to the connection tracker, which will be re-injected into the OpenFlow pipeline to resume processing in table number, with the ct_state and other ct match fields set.</li>
<li><strong>zone=value OR zone=src[start..end]</strong>: A 16-bit context id that can be used to isolate connections into separate domains, allowing over‐lapping network addresses in different zones. If a zone is not provided, then the default is to use zone zero.</li>
<li>exec([action][,action…])**: Perform restricted set of actions within the context of connection tracking. Only actions which modify the ct_mark or ct_label fields are accepted within the exec action.</li>
<li><strong>alg=&lt;ftp/tftp&gt;</strong>: Specify alg (application layer gateway) to track specific connection types.</li>
<li><strong>nat</strong>: Specifies the address and port translation for the connection being tracked.</li>
</ul>
<h3 id="Setup-Enviroment"><a href="#Setup-Enviroment" class="headerlink" title="Setup Enviroment"></a>Setup Enviroment</h3><ul>
<li><p>Topology for conntrack testing<br><img src="ovs-conntrack-bridge.png" alt="Topology for conntrack testing"></p>
</li>
<li><p>Start openvswitch service</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ /usr/local/share/openvswitch/scripts/ovs-ctl start</span><br></pre></td></tr></table></figure></li>
<li><p>Create bridge, namespace and port</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ip netns add left</span><br><span class="line">$ ip netns add right</span><br><span class="line">$</span><br><span class="line">$ ip link add veth_l0 type veth peer name veth_l1</span><br><span class="line">$ ip link set veth_l1 netns left</span><br><span class="line">$ ip link add veth_r0 type veth peer name veth_r1</span><br><span class="line">$ ip link set veth_r1 netns right</span><br><span class="line">$</span><br><span class="line">$ ovs-vsctl add-br br0</span><br><span class="line">$ ovs-vsctl add-port br0 veth_l0</span><br><span class="line">$ ovs-vsctl add-port br0 veth_r0</span><br></pre></td></tr></table></figure></li>
<li><p>Add flows</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=10, in_port=veth_l0, actions=veth_r0&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=10, in_port=veth_r0, actions=veth_l0&quot;</span><br><span class="line">$</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">   &quot;table=0, priority=50, ct_state=-trk, tcp, in_port=veth_l0, actions=ct(table=0)&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=50, ct_state=+new, tcp, in_port=veth_l0, actions=ct(commit),veth_r0&quot;</span><br><span class="line">$</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=50, ct_state=-trk, tcp, in_port=veth_r0, actions=ct(table=0)&quot;</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=50, ct_state=+est, tcp, in_port=veth_r0, actions=veth_l0&quot;</span><br><span class="line">$</span><br><span class="line">$ ovs-ofctl add-flow br0 \</span><br><span class="line">    &quot;table=0, priority=50, ct_state=+est, tcp, in_port=veth_l0, actions=veth_r0&quot;</span><br><span class="line">$</span><br><span class="line"># ovs-ofctl dump-flows br0</span><br><span class="line"> cookie=0x0, duration=1405.483s, table=0, n_packets=0, n_bytes=0, priority=50,ct_state=-trk,tcp,in_port=&quot;veth_l0&quot; actions=ct(table=0)</span><br><span class="line"> cookie=0x0, duration=43.364s, table=0, n_packets=0, n_bytes=0, priority=50,ct_state=-trk,tcp,in_port=&quot;veth_r0&quot; actions=ct(table=0)</span><br><span class="line"> cookie=0x0, duration=59.531s, table=0, n_packets=0, n_bytes=0, priority=50,ct_state=+new,tcp,in_port=&quot;veth_l0&quot; actions=ct(commit),output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=33.071s, table=0, n_packets=0, n_bytes=0, priority=50,ct_state=+est,tcp,in_port=&quot;veth_r0&quot; actions=output:&quot;veth_l0&quot;</span><br><span class="line"> cookie=0x0, duration=20.592s, table=0, n_packets=0, n_bytes=0, priority=50,ct_state=+est,tcp,in_port=&quot;veth_l0&quot; actions=output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=1423.495s, table=0, n_packets=0, n_bytes=0, priority=10,in_port=&quot;veth_l0&quot; actions=output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=1414.843s, table=0, n_packets=0, n_bytes=0, priority=10,in_port=&quot;veth_r0&quot; actions=output:&quot;veth_l0&quot;</span><br><span class="line"> cookie=0x0, duration=1448.989s, table=0, n_packets=0, n_bytes=0, priority=0 actions=NORMAL</span><br></pre></td></tr></table></figure></li>
<li><p>Install <a class="link"   href="https://scapy.net/" >scapy<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://scapy.readthedocs.io/en/latest/installation.html" >installation guide<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>Send packet with scapy, connection setup, transfer data, and connection teardown.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo ip netns exec left sudo ip link set lo up</span><br><span class="line">$ sudo ip netns exec left sudo ip link set veth_l1 up</span><br><span class="line">$ sudo ip netns exec right sudo ip link set lo up</span><br><span class="line">$ sudo ip netns exec right sudo ip link set veth_r1 up</span><br><span class="line">$ sudo ifconfig veth_l0 up</span><br><span class="line">$ sudo ifconfig veth_r0 up</span><br><span class="line"></span><br><span class="line">$ sudo ip netns exec left sudo `which scapy`</span><br><span class="line">$ sudo ip netns exec right sudo `which scapy`</span><br><span class="line">$</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;192.168.0.2&quot;, dst=&quot;10.0.0.2&quot;)/TCP(sport=1024, dport=2048, flags=0x02, seq=100), iface=&quot;veth_l1&quot;)</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;10.0.0.2&quot;, dst=&quot;192.168.0.2&quot;)/TCP(sport=2048, dport=1024, flags=0x12, seq=200, ack=101), iface=&quot;veth_r1&quot;)</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;192.168.0.2&quot;, dst=&quot;10.0.0.2&quot;)/TCP(sport=1024, dport=2048, flags=0x10, seq=101, ack=201), iface=&quot;veth_l1&quot;)</span><br><span class="line">$</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;192.168.0.2&quot;, dst=&quot;10.0.0.2&quot;)/TCP(sport=1024, dport=2048, flags=0x10, seq=101, ack=201)/&quot;X&quot;, iface=&quot;veth_l1&quot;)</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;10.0.0.2&quot;, dst=&quot;192.168.0.2&quot;)/TCP(sport=2048, dport=1024, flags=0X10, seq=201, ack=102), iface=&quot;veth_r1&quot;)</span><br><span class="line">$</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;192.168.0.2&quot;, dst=&quot;10.0.0.2&quot;)/TCP(sport=1024, dport=2048, flags=0x11, seq=102, ack=201), iface=&quot;veth_l1&quot;)</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;10.0.0.2&quot;, dst=&quot;192.168.0.2&quot;)/TCP(sport=2048, dport=1024, flags=0X11, seq=201, ack=103), iface=&quot;veth_r1&quot;)</span><br><span class="line">$ &gt;&gt;&gt; sendp(Ether()/IP(src=&quot;192.168.0.2&quot;, dst=&quot;10.0.0.2&quot;)/TCP(sport=1024, dport=2048, flags=0x10, seq=103, ack=202), iface=&quot;veth_l1&quot;)</span><br></pre></td></tr></table></figure></li>
<li><p>Monitor the conntrack and flow changes</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=SYN_SENT)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=ESTABLISHED)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=ESTABLISHED)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=ESTABLISHED)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=ESTABLISHED)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=FIN_WAIT_1)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=LAST_ACK)</span><br><span class="line"># ovs-appctl dpctl/dump-conntrack | grep 1024</span><br><span class="line">tcp,orig=(src=192.168.0.2,dst=10.0.0.2,sport=1024,dport=2048),reply=(src=10.0.0.2,dst=192.168.0.2,sport=2048,dport=1024),protoinfo=(state=TIME_WAIT)</span><br><span class="line">$</span><br><span class="line"># ovs-appctl dpctl/dump-flows</span><br><span class="line">recirc_id(0),in_port(3),ct_state(-trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:ct,recirc(0xa)</span><br><span class="line">recirc_id(0xa),in_port(3),ct_state(-new+est+trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:2</span><br><span class="line"># ovs-appctl dpctl/dump-flows</span><br><span class="line">recirc_id(0xb),in_port(2),ct_state(-new+est+trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:3</span><br><span class="line">recirc_id(0),in_port(2),ct_state(-trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:ct,recirc(0xb)</span><br><span class="line"># ovs-appctl dpctl/dump-flows</span><br><span class="line">recirc_id(0xd),in_port(3),ct_state(-new+est+trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:2</span><br><span class="line">recirc_id(0),in_port(3),ct_state(-trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:ct,recirc(0xd)</span><br><span class="line"># ovs-appctl dpctl/dump-flows</span><br><span class="line">recirc_id(0xf),in_port(3),ct_state(-new+est+trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:2</span><br><span class="line">recirc_id(0),in_port(3),ct_state(-trk),eth(),eth_type(0x0800),ipv4(proto=6,frag=no), packets:0, bytes:0, used:never, actions:ct,recirc(0xf)</span><br><span class="line">$</span><br><span class="line"># ovs-ofctl dump-flows br0</span><br><span class="line"> cookie=0x0, duration=2676.690s, table=0, n_packets=8, n_bytes=434, priority=50,ct_state=-trk,tcp,in_port=&quot;veth_l0&quot; actions=ct(table=0)</span><br><span class="line"> cookie=0x0, duration=1314.571s, table=0, n_packets=4, n_bytes=216, priority=50,ct_state=-trk,tcp,in_port=&quot;veth_r0&quot; actions=ct(table=0)</span><br><span class="line"> cookie=0x0, duration=1330.738s, table=0, n_packets=2, n_bytes=108, priority=50,ct_state=+new,tcp,in_port=&quot;veth_l0&quot; actions=ct(commit),output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=1304.278s, table=0, n_packets=4, n_bytes=216, priority=50,ct_state=+est,tcp,in_port=&quot;veth_r0&quot; actions=output:&quot;veth_l0&quot;</span><br><span class="line"> cookie=0x0, duration=1291.799s, table=0, n_packets=6, n_bytes=326, priority=50,ct_state=+est,tcp,in_port=&quot;veth_l0&quot; actions=output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=2694.702s, table=0, n_packets=8, n_bytes=648, priority=10,in_port=&quot;veth_l0&quot; actions=output:&quot;veth_r0&quot;</span><br><span class="line"> cookie=0x0, duration=2686.050s, table=0, n_packets=8, n_bytes=648, priority=10,in_port=&quot;veth_r0&quot; actions=output:&quot;veth_l0&quot;</span><br><span class="line"> cookie=0x0, duration=2720.196s, table=0, n_packets=0, n_bytes=0, priority=0 actions=NORMA</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Shorten-Packet-Path-in-Openstack-with-conntrack-support"><a href="#Shorten-Packet-Path-in-Openstack-with-conntrack-support" class="headerlink" title="Shorten Packet Path in Openstack with conntrack support"></a>Shorten Packet Path in Openstack with conntrack support</h3><ul>
<li>Ovs in Openstack without conntrack support<br><img src="old-ovs-in-openstack.png" alt="Ovs in Openstack without conntrack support"></li>
<li>Ovs in Openstack with conntrack support<br><img src="new-ovs-conntract.png" alt="Ovs in Openstack with conntrack support"></li>
<li>Query conntrack info in kernel<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /proc/net/nf_conntrack</span><br><span class="line">$ cat /proc/sys/net/nf_conntrack_max</span><br><span class="line">$ nstat</span><br><span class="line">$ cat /proc/net/snmp</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="http://docs.openvswitch.org/en/latest/intro/install/general/" >Open vSwitch on Linux<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://docs.openvswitch.org/en/latest/tutorials/ovs-conntrack/" >Open vSwitch Conntrack<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://redhatstackblog.redhat.com/2016/07/22/how-connection-tracking-in-open-vswitch-helps-openstack-performance/" >How connection tracking in Open vSwitch helps OpenStack performance<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>Open vSwitch</tag>
        <tag>conntrack</tag>
      </tags>
  </entry>
  <entry>
    <title>The Papers</title>
    <url>/2021/01/13/papers/</url>
    <content><![CDATA[<h3 id="the-Computer-Architecture"><a href="#the-Computer-Architecture" class="headerlink" title="the Computer Architecture"></a>the Computer Architecture</h3><ul>
<li><a class="link"   href="http://abelgo.cn/cs101/papers/Neumann.pdf" >The First Draft Report on the EDVAC<i class="fas fa-external-link-alt"></i></a>, 1945</li>
<li><a class="link"   href="https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-zellweger.pdf" >Decoupling Cores, Kernels, and Operating Systems<i class="fas fa-external-link-alt"></i></a>, 2014<ul>
<li><a class="link"   href="https://www.sigops.org/s/conferences/sosp/2009/papers/baumann-sosp09.pdf" >The Multikernel: A new OS architecture for scalable multicore systems<i class="fas fa-external-link-alt"></i></a>, 2009</li>
</ul>
</li>
<li><a class="link"   href="https://www.usenix.org/conference/osdi18/presentation/shan" >LegoOS: A Disseminated, Distributed OS for Hardware Resource Disaggregation<i class="fas fa-external-link-alt"></i></a>, 2018</li>
<li><a class="link"   href="https://cacm.acm.org/magazines/2019/2/234352-a-new-golden-age-for-computer-architecture/fulltext" >A New Golden Age for Computer Architecture<i class="fas fa-external-link-alt"></i></a>, 2019</li>
<li><a class="link"   href="https://rcs.uwaterloo.ca/~ali/papers/sosp21-aurora.pdf" >The Aurora Single Level Store Operating System<i class="fas fa-external-link-alt"></i></a>, 2021</li>
</ul>
<h3 id="the-Hypervisor"><a href="#the-Hypervisor" class="headerlink" title="the Hypervisor"></a>the Hypervisor</h3><ul>
<li><a class="link"   href="https://www.princeton.edu/~rblee/ELE572Papers/Fall04Readings/secureOS/popek_virtualizable.pdf" >Formal Requirements for Virtualizable Third Generation Architectures<i class="fas fa-external-link-alt"></i></a>, 1974</li>
<li><a class="link"   href="http://www.cs.columbia.edu/~nieh/pubs/isca2016_armvirt.pdf" >ARM Virtualization: Performance and Architectural Implications<i class="fas fa-external-link-alt"></i></a>, 2016</li>
</ul>
<ul>
<li><a class="link"   href="https://sites.google.com/site/sfma2019eurosys/Program" >The Multihype: Virtualizing Heterogeneous-ISA Architectures<i class="fas fa-external-link-alt"></i></a>, 2019<ul>
<li><a class="link"   href="https://dl.acm.org/doi/10.1145/2678373.2665692" >Harnessing ISA Diversity: Design of a heterogeneous-ISA Chip Multiprocessor<i class="fas fa-external-link-alt"></i></a>, 2014</li>
<li><a class="link"   href="https://dl.acm.org/doi/10.1145/2892242.2892246" >Building a kvm-based hypervisor for a heterogeneous system architecture compliant system<i class="fas fa-external-link-alt"></i></a>, 2016</li>
</ul>
</li>
</ul>
<h3 id="the-Cloud"><a href="#the-Cloud" class="headerlink" title="the Cloud"></a>the Cloud</h3><ul>
<li><a class="link"   href="https://www2.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-28.pdf" >Above the Clouds: A Berkeley View of Cloud Computing<i class="fas fa-external-link-alt"></i></a>, 2009</li>
<li><a class="link"   href="https://www.usenix.org/conference/osdi16/technical-sessions/presentation/arnautov" >SCONE: Secure Linux Containers with Intel SGX<i class="fas fa-external-link-alt"></i></a>, 2016</li>
<li><a class="link"   href="https://www.usenix.org/conference/atc18/presentation/oakes" >SOCK: Rapid Task Provisioning with Serverless-Optimized Containers<i class="fas fa-external-link-alt"></i></a>, 2018</li>
<li><a class="link"   href="https://arxiv.org/pdf/1807.11248.pdf" >Comparison of FaaS Orchestration Systems<i class="fas fa-external-link-alt"></i></a>, 2018</li>
<li><a class="link"   href="https://www.usenix.org/system/files/osdi18-klimovic.pdf" >Pocket: Elastic Ephemeral Storage for Serverless Analytics<i class="fas fa-external-link-alt"></i></a>, 2018</li>
<li><a class="link"   href="https://www2.eecs.berkeley.edu/Pubs/TechRpts/2019/EECS-2019-3.pdf" >Cloud Programming Simplified: A Berkeley View on Serverless Computing<i class="fas fa-external-link-alt"></i></a>, 2019</li>
<li><a class="link"   href="https://sigops.org/s/conferences/hotos/2021/papers/hotos21-s02-stoica.pdf" >From Cloud Computing to Sky Computing<i class="fas fa-external-link-alt"></i></a>, 2021</li>
</ul>
<h3 id="the-AI"><a href="#the-AI" class="headerlink" title="the AI"></a>the AI</h3><ul>
<li><a class="link"   href="https://arxiv.org/pdf/1712.05855.pdf" >A Berkeley View of Systems Challenges for AI<i class="fas fa-external-link-alt"></i></a>, 2017</li>
</ul>
<h3 id="the-Industrial-Practice"><a href="#the-Industrial-Practice" class="headerlink" title="the Industrial Practice"></a>the Industrial Practice</h3><ul>
<li><a class="link"   href="https://people.freebsd.org/~lstewart/articles/cpumemory.pdf" >What Every Programmer Should Know About Memory<i class="fas fa-external-link-alt"></i></a>, 2007</li>
<li><a class="link"   href="https://dl.acm.org/doi/10.1145/3292006.3300030" >A Practical Intel SGX Setting for Linux Containers in the Cloud<i class="fas fa-external-link-alt"></i></a>, 2019</li>
</ul>
<h3 id="SCI-HUB"><a href="#SCI-HUB" class="headerlink" title="SCI-HUB"></a><a class="link"   href="https://sci-hub.se/" >SCI-HUB<i class="fas fa-external-link-alt"></i></a></h3><ul>
<li><a class="link"   href="https://www.acm.org/conferences/best-paper-awards" >ACM Conferences Best Paper Awards<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.usenix.org/conferences/best-papers" >usenix Best Papers<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://scholar.google.com/" >Google Scholar<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.semanticscholar.org/" >SEMANTIC SCHOLAR<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.google.com/search?q=sci+hub&oq=sci+hub&aqs=chrome..69i57j69i60l3j69i65j69i60l3.1655j0j7&sourceid=chrome&ie=UTF-8" >try new link of SCI-HUB<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>SCHOLAR</category>
      </categories>
      <tags>
        <tag>paper</tag>
      </tags>
  </entry>
  <entry>
    <title>Path MTU Discovery</title>
    <url>/2018/02/20/path-MTU-discovery/</url>
    <content><![CDATA[<p>Path MTU Discovery (PMTUD) is a standardized technique in computer networking for determining the maximum transmission unit (MTU) size on the network path between two Internet Protocol (IP) hosts, usually with the goal of avoiding IP fragmentation. IPv4 <a class="link"   href="https://tools.ietf.org/html/rfc1191" >RFC1191<i class="fas fa-external-link-alt"></i></a> and IPv6 <a class="link"   href="https://tools.ietf.org/html/rfc1981" >RFC1981<i class="fas fa-external-link-alt"></i></a>.</p>
<h3 id="Path-MTU-Discovery-with-UDP"><a href="#Path-MTU-Discovery-with-UDP" class="headerlink" title="Path MTU Discovery with UDP"></a>Path MTU Discovery with UDP</h3><p>For a protocol such as UDP, in which the calling application is generally in control of the outgoing datagram size, it is useful if there is some way to determine an appropriate datagram size if fragmentation is to be avoided. Conventional PMTUD uses ICMP PTB messages in determining the largest packet size along a routing path that can be used without inducing fragmentation. These messages are typically processed below the UDP layer and are not directly visible to an application, so either an API call is used for the application to learn the best current estimate of the path MTU size for each destination with which it has communicated, or the IP layer can perform PMTUD independently without the application knowing. The IP layer often caches PMTUD information on a per-destination basis and times it out if it is not refreshed.</p>
<h3 id="Path-MTU-Discovery-with-TCP"><a href="#Path-MTU-Discovery-with-TCP" class="headerlink" title="Path MTU Discovery with TCP"></a>Path MTU Discovery with TCP</h3><p>How PMTUD is used by TCP? TCP’s regular PMTUD process operates as follows: When a connection is established, TCP uses the minimum of the MTU of the outgoing interface, or the MSS announced by the other end, as the basis for selecting its send maximum segment size (SMSS). PMTUD does not allow TCP to exceed the MSS announced by the other end. If the other end does not specify an MSS, the sender assumes a default of 536 bytes, but this situation is now rare. It is also possible for an implementation to save path MTU information on a per-destination basis to help in selecting its segment size. <em>Note that the path MTU in each direction of a connection could be different</em>.</p>
<p>Once the initial SMSS is chosen, all IPv4 datagrams sent by TCP on that connection have the IPv4 DF bit field set. For TCP/IPv6, this is not necessary because there is no DF bit field; all datagrams are assumed to have it set implicitly. If a PTB(packet too big) is received, TCP decreases the segment size and retransmits using a different segment size. If the PTB contains the suggested next-hop MTU, the segment size can be set to the next-hop MTU minus the sizes of the IPv4 (or IPv6) and TCP headers. If the next-hop MTU value is not present (e.g., an older ICMP error was returned that lacks this information), the sender may try a variety of values (e.g., binary search for a usable value). This also affects TCP’s congestion control management. For PLPMTUD(Packetization Layer Path MTU Discovery), <a class="link"   href="https://tools.ietf.org/html/rfc4821" >RFC4821<i class="fas fa-external-link-alt"></i></a>, the situation is similar, except PTB messages are not used. Instead, the protocol performing PMTUD must be able to detect message discards quickly and perform its own datagram size adjustments.<br>Because routes can change dynamically, when some time has passed since the last decrease of the segment size, a larger value (up to the initial SMSS) can be tried. Guidance in <a class="link"   href="https://tools.ietf.org/html/rfc1191" >RFC1191<i class="fas fa-external-link-alt"></i></a> and <a class="link"   href="https://tools.ietf.org/html/rfc1981" >RFC1981<i class="fas fa-external-link-alt"></i></a> recommends that this time interval be about 10 minutes.</p>
<h3 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h3><p>Many network security devices block all ICMP messages for perceived security benefits, including the errors that are necessary for the proper operation of PMTUD. This can result in connections that complete the TCP three-way handshake correctly, but then hang when data is transferred. This state is referred to as a <em>black hole</em> connection.</p>
]]></content>
      <categories>
        <category>STANDARD</category>
      </categories>
      <tags>
        <tag>protocol</tag>
        <tag>Path MTU</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM virtualization with Qemu</title>
    <url>/2018/12/16/qemu-kvm/</url>
    <content><![CDATA[<h3 id="Qemu-Threads"><a href="#Qemu-Threads" class="headerlink" title="Qemu Threads"></a>Qemu Threads</h3><ul>
<li>main thread: main_loop()/vl.c, main_loop_wait()/main-loop.c<ul>
<li>Waits for file descriptors to become readable or writable. File descriptors play a critical role because files, sockets, pipes, and various other resources are all file descriptors. File descriptors can be added using qemu_set_fd_handler().</li>
<li>Runs expired timers. Timers can be added using qemu_mod_timer().</li>
<li>Runs bottom-halves (BHs), which are like timers that expire immediately. BHs are used to avoid reentrancy and overflowing the call stack. BHs can be added using qemu_bh_schedule().</li>
</ul>
</li>
<li>io thread: iothread_run()</li>
<li>vcpu thread: qemu_kvm_cpu_thread_fn()</li>
</ul>
<h3 id="KVM-and-Qemu-Interaction-Diagram"><a href="#KVM-and-Qemu-Interaction-Diagram" class="headerlink" title="KVM and Qemu Interaction Diagram"></a>KVM and Qemu Interaction Diagram</h3><ul>
<li>KVM and Qemu Interaction Diagram<br><img src="kvm-qemu-interaction.png" alt="KVM and Qemu interaction diagram"></li>
</ul>
<h3 id="GuestOS-KVM-and-Qemu-Iteraction-Diagram-virtio-net"><a href="#GuestOS-KVM-and-Qemu-Iteraction-Diagram-virtio-net" class="headerlink" title="GuestOS, KVM and Qemu Iteraction Diagram: virtio-net"></a>GuestOS, KVM and Qemu Iteraction Diagram: virtio-net</h3><ul>
<li>GuestOS, KVM and Qemu Iteraction Diagram: virtio-net<br><img src="virtio-net.png" alt="GuestOS, KVM and Qemu Iteraction Diagram: virtio-net"></li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="http://blog.vmsplice.net/2011/03/qemu-internals-overall-architecture-and.html" >QEMU Internals: Overall architecture and threading model<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>virtualization</tag>
        <tag>qemu</tag>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Recursion, divide and conquer</title>
    <url>/2018/08/12/recursive/</url>
    <content><![CDATA[<h3 id="the-stack"><a href="#the-stack" class="headerlink" title="the stack"></a>the stack</h3><p>Base actions are push and pop, just like FILO(first in last out) queue.</p>
<h3 id="base-case-and-recursive-case"><a href="#base-case-and-recursive-case" class="headerlink" title="base case and recursive case"></a>base case and recursive case</h3><p>Every recursive function has two parts: the base case, and the recursive case.</p>
<h3 id="divide-and-conquer"><a href="#divide-and-conquer" class="headerlink" title="divide and conquer"></a>divide and conquer</h3><p>Suppose you’re a farmer with a plot of land. You want to divide this farm evenly into square plots. You want the plots to be as big as possible. Just divide to get the largest square, and repeat the step with the remaining part.</p>
<h3 id="inductive-proofs"><a href="#inductive-proofs" class="headerlink" title="inductive proofs"></a>inductive proofs</h3><p>For example, suppose I want to prove that I can climb to the top of a ladder. In the inductive case, if my legs are on a rung, I can put my legs on the next rung. So if I’m on rung 2, I can climb to rung 3. That’s the inductive case.</p>
<h3 id="Tower-of-Hanoi"><a href="#Tower-of-Hanoi" class="headerlink" title="Tower of Hanoi"></a>Tower of Hanoi</h3><p>The objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules:</p>
<ul>
<li>Only one disk can be moved at a time.</li>
<li>Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod.</li>
<li>No disk may be placed on top of a smaller disk.</li>
</ul>
<p>With 3 disks, the puzzle can be solved in 7 moves. The minimal number of moves required to solve a Tower of Hanoi puzzle is 2^n − 1, where n is the number of disks.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">static int times = 0;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">  * @param n, layers of tower</span><br><span class="line">  * @param A, the source</span><br><span class="line">  * @param B, the destination</span><br><span class="line">  * @param C, the swap</span><br><span class="line">  */ </span><br><span class="line">static void hanoi(int n, char A, char B, char C);</span><br><span class="line"></span><br><span class="line">static void hanoi(int n, char A, char B, char C)</span><br><span class="line">&#123;</span><br><span class="line">    if (n &gt; 0) &#123;</span><br><span class="line">        hanoi(n - 1, A, C, B);</span><br><span class="line">        printf(&quot;%c -&gt; %c &quot;, A, C);</span><br><span class="line">        hanoi(n - 1, C, B, A);</span><br><span class="line"></span><br><span class="line">        times++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int layer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    layer = 3, times = 0;</span><br><span class="line">    hanoi(layer, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;);</span><br><span class="line">    printf(&quot;layer = %d, times %d = 2^%d - 1\n&quot;, layer, times, layer);</span><br><span class="line"></span><br><span class="line">    layer = 4, times = 0;</span><br><span class="line">    hanoi(layer, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;);</span><br><span class="line">    printf(&quot;layer = %d, times %d = 2^%d - 1\n&quot;, layer, times, layer);</span><br><span class="line"></span><br><span class="line">    layer = 7, times = 0;</span><br><span class="line">    hanoi(layer, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;);</span><br><span class="line">    printf(&quot;layer = %d, times %d = 2^%d - 1\n&quot;, layer, times, layer);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Fibonacci-sequence"><a href="#Fibonacci-sequence" class="headerlink" title="Fibonacci sequence"></a>Fibonacci sequence</h3><p>A typical recursive example, F(1)=1, F(2)=1, F(n)=F(n-1)+F(n-2) (n&gt;=2，n∈N)<br>As described above, the base case is F(1)=1, F(2)=1, and the recursive case is F(n)=F(n-1)+F(n-2).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">static unsigned long fibonacci(int n)</span><br><span class="line">&#123;</span><br><span class="line">  if (n == 1 || n == 2) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return fibonacci(n - 1) + fibonacci(n - 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  int n;</span><br><span class="line"></span><br><span class="line">  if (argc != 2) &#123;</span><br><span class="line">    printf(&quot;argc invalid\n&quot;);</span><br><span class="line">    return -1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  n = atoi(argv[1]);</span><br><span class="line">  printf(&quot;fibonacci n = %d\n&quot;, n);</span><br><span class="line"></span><br><span class="line">  printf(&quot;f(%d) = %lu\n&quot;, n, fibonacci(n));</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Some other fibonacci interesting sequences</p>
<ul>
<li>Fibonacci Brick Wall Patterns, The point of this activity is to see how many ways you can build a brick wall using the given amount of bricks.<ul>
<li>Each wall needs to be two units tall.</li>
<li>Each brick standing on end is two units tall.</li>
<li>Each brick laying on it’s side is one unit tall.</li>
<li>You are first given one, then two, three, etc.</li>
<li>For one brick there is only one method of building a wall. Two methods for two, and three methods for three.</li>
<li>How many ways are there to build a wall with four bricks, five?Show your work, and how does this tie into the Fibonacci sequence?</li>
</ul>
</li>
</ul>
<h3 id="quick-sort"><a href="#quick-sort" class="headerlink" title="quick sort"></a>quick sort</h3><p>Another typical recursive example.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">static int array[] = &#123;15, 9, 23, 21, 111, 101, 98, 101, 0, 1&#125;;</span><br><span class="line">static int asize = sizeof(array) / sizeof(int);</span><br><span class="line"></span><br><span class="line">static void dump_array(int array[], int size, const char *prefix)</span><br><span class="line">&#123;</span><br><span class="line">  int i;</span><br><span class="line"></span><br><span class="line">  if (NULL != prefix) &#123;</span><br><span class="line">    printf(&quot;%s: &quot;, prefix);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  for (i = 0; i &lt; asize; i++) &#123;</span><br><span class="line">    printf(&quot;%d &quot;, array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int partition(int array[], int size)</span><br><span class="line">&#123;</span><br><span class="line">  int i, pivot;</span><br><span class="line">  int s;</span><br><span class="line"></span><br><span class="line">  pivot = size / 2;</span><br><span class="line"></span><br><span class="line">  for (i = 0; i &lt; size; i++) &#123;</span><br><span class="line">    if (i == pivot) continue;</span><br><span class="line"></span><br><span class="line">    if (array[i] &lt; array[pivot]) &#123; /* if &lt; pivot, and on the right */</span><br><span class="line">      if (i == (pivot + 1)) &#123;</span><br><span class="line">        s = array[pivot];</span><br><span class="line">        array[pivot] = array[i];</span><br><span class="line">        array[i] = s;</span><br><span class="line"></span><br><span class="line">        pivot = i;</span><br><span class="line">      &#125; else if (i &gt; pivot) &#123;</span><br><span class="line">        s = array[i];</span><br><span class="line">        array[i] = array[pivot + 1];</span><br><span class="line">        array[pivot + 1] = array[pivot];</span><br><span class="line">        array[pivot] = s;</span><br><span class="line"></span><br><span class="line">        pivot += 1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (array[i] &gt; array[pivot]) &#123; /* if &gt; pivot, and on the left */</span><br><span class="line">      if (i &lt; pivot) &#123;</span><br><span class="line">        s = array[pivot];</span><br><span class="line">        array[pivot] = array[i];</span><br><span class="line">        array[i] = s;</span><br><span class="line"></span><br><span class="line">        pivot = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return pivot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void qsort(int array[], int size)</span><br><span class="line">&#123;</span><br><span class="line">  int pivot;</span><br><span class="line"></span><br><span class="line">  if (size &lt; 2) return;</span><br><span class="line"></span><br><span class="line">  pivot = partition(array, size);</span><br><span class="line"></span><br><span class="line">  qsort(&amp;array[0], pivot);</span><br><span class="line">  qsort(&amp;array[pivot + 1], size - pivot - 1);</span><br><span class="line"></span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">  dump_array(array, asize, &quot;Before sort&quot;);</span><br><span class="line"></span><br><span class="line">  qsort(array, asize);</span><br><span class="line"></span><br><span class="line">  dump_array(array, asize, &quot; After sort&quot;);</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Pascal’s-triangle"><a href="#Pascal’s-triangle" class="headerlink" title="Pascal’s triangle"></a><a class="link"   href="https://en.wikipedia.org/wiki/Pascal%27s_triangle" >Pascal’s triangle<i class="fas fa-external-link-alt"></i></a></h3><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li>程序员的数学（日 结城浩）</li>
<li><a class="link"   href="https://algs4.cs.princeton.edu/home/" >Algorithms, 4th Edition<i class="fas fa-external-link-alt"></i></a></li>
<li>Grokking Algorithms: An illustrated guide for programmers and other curious people</li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
        <tag>quick sort</tag>
      </tags>
  </entry>
  <entry>
    <title>ATA, SATA, SCSI and SAS</title>
    <url>/2018/11/06/sas-sata/</url>
    <content><![CDATA[<h3 id="Abbreviations"><a href="#Abbreviations" class="headerlink" title="Abbreviations"></a>Abbreviations</h3><table>
<thead>
<tr>
<th align="left">Abbreviation</th>
<th align="left">Acronym for</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ATA, IDE</td>
<td align="left">Advanced Technology Attachment, Integrated Drive Electronics</td>
</tr>
<tr>
<td align="left">SATA</td>
<td align="left">Serial ATA</td>
</tr>
<tr>
<td align="left">SCSI</td>
<td align="left">Small Computer System Interface</td>
</tr>
<tr>
<td align="left">SAS</td>
<td align="left">Serial Attached SCSI</td>
</tr>
</tbody></table>
<h3 id="Standard-Committes"><a href="#Standard-Committes" class="headerlink" title="Standard Committes"></a>Standard Committes</h3><ul>
<li><a class="link"   href="http://www.incits.org/" >incits<i class="fas fa-external-link-alt"></i></a>:  InterNational Committee for Information Technology Standards<ul>
<li><a class="link"   href="http://t10.org/" >t10<i class="fas fa-external-link-alt"></i></a>: Technical Committee T10, SCSI Storage Interfaces</li>
<li><a class="link"   href="http://t13.org/" >t13<i class="fas fa-external-link-alt"></i></a>: Technical Committee T13, ATA Interfaces</li>
<li><a class="link"   href="http://www.incits.org/committees/" >committees<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
</ul>
<h3 id="Industry-Alliances"><a href="#Industry-Alliances" class="headerlink" title="Industry Alliances"></a>Industry Alliances</h3><ul>
<li><a class="link"   href="http://www.scsita.org/content/" >SCSI Trade Alliance<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Roadmaps"><a href="#Roadmaps" class="headerlink" title="Roadmaps"></a>Roadmaps</h3><ul>
<li>SAS Roadmap<br><img src="SAS_roadmap.jpg" alt="SAS Roadmap"></li>
</ul>
<h3 id="Compare"><a href="#Compare" class="headerlink" title="Compare"></a>Compare</h3><ul>
<li><a class="link"   href="https://www.webopedia.com/DidYouKnow/Computer_Science/sas_sata.asp" >SAS, SATA, SCSI and ATA<i class="fas fa-external-link-alt"></i></a></li>
<li>SAS vs SATA: reliability, error bit rate, MTBF, error recovery/detection, silent data corruption, RV compensation feedback mechanism <ul>
<li><a class="link"   href="https://www.intel.com/content/www/us/en/support/articles/000005782/server-products.html" >Intel<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.diffen.com/difference/SATA_vs_Serial_Attached_SCSI#SATA_and_SATA_Revisions" >Diffen<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.enterprisestorageforum.com/storage-networking/sas-vs-sata.html" >EnterpriseStorageForum<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="https://www.computerworld.com/article/2574104/data-center/serial-vs--parallel-storage.html" >Serial vs Parallel<i class="fas fa-external-link-alt"></i></a>: signal skewing, crosstalk</li>
</ul>
]]></content>
      <categories>
        <category>INDUSTRY</category>
      </categories>
      <tags>
        <tag>storage</tag>
        <tag>interface</tag>
      </tags>
  </entry>
  <entry>
    <title>Segment Tree</title>
    <url>/2020/01/05/segment-tree/</url>
    <content><![CDATA[<h3 id="Segment-Tree"><a href="#Segment-Tree" class="headerlink" title="Segment Tree"></a>Segment Tree</h3><p>Segment Tree is used in cases where there are multiple range queries on array and modifications of elements of the same array. For example, finding the sum of all the elements in an array from indices  L to R, or finding the minimum (famously known as Range Minumum Query problem) of all the elements in an array from indices L to R. </p>
<pre><code>Problem:
Description of Range Minimum Query
Given an array A of size N, there are two types of queries on this array.
  1 qlr: In this query you need to print the minimum in the sub-array A[l:r].
  2 uxy: In this query you need to update A[x]=y.

Input:
First line of the test case contains two integers, N and Q, size of array A and number of queries.
Second line contains N space separated integers, elements of A.
Next Q lines contain one of the two queries.

Output:
For each type 1 query, print the minimum element in the sub-array A[l:r].

Contraints:
1&lt;=N,Q,y&lt;=10^5
1&lt;=l,r,x&lt;=N

SAMPLE INPUT
5 5
1 5 2 4 3
q 1 5
q 1 3
q 3 5
u 3 6
q 1 5

SAMPLE OUTPUT 
1
1
2
1
</code></pre>
<h3 id="Segment-Tree-Layout"><a href="#Segment-Tree-Layout" class="headerlink" title="Segment Tree Layout"></a>Segment Tree Layout</h3><p><img src="problem-tree.png" alt="Segment Tree Layout"></p>
<h3 id="Code-Implementation"><a href="#Code-Implementation" class="headerlink" title="Code Implementation"></a>Code Implementation</h3><ul>
<li><p>Main</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;limits.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int Power2RoundUp(int size)</span><br><span class="line">&#123;</span><br><span class="line">    int cnt = 0;</span><br><span class="line">    </span><br><span class="line">    do &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        size = (size &gt;&gt; 1);</span><br><span class="line">    &#125; while (size &gt; 0);</span><br><span class="line">    </span><br><span class="line">    return (1 &lt;&lt; (cnt + 1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void PrintfSegTree(int *st, int size, int init)</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    </span><br><span class="line">    printf(&quot;----------\n&quot;);</span><br><span class="line">    for (i = 0; i &lt; size; i++) &#123;</span><br><span class="line">        if (st[i] != init) &#123;</span><br><span class="line">            printf(&quot;%d: %d\n&quot;, i, st[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Write your code here</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i;</span><br><span class="line">    int size, roundUp, opts;</span><br><span class="line">    int *arr, *st;</span><br><span class="line">    char opt;</span><br><span class="line">    int x, y;</span><br><span class="line">    </span><br><span class="line">    scanf(&quot;%d %d\n&quot;, &amp;size, &amp;opts);</span><br><span class="line">    if (size &lt;= 0) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    roundUp = Power2RoundUp(size);</span><br><span class="line">    arr = malloc(sizeof(int) * size);</span><br><span class="line">    st = malloc(sizeof(int) * roundUp);</span><br><span class="line">    if (!arr || !st) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    i = 0;</span><br><span class="line">    while ((++i) &lt;= size &amp;&amp; (scanf(&quot;%d&quot;, &amp;arr[i - 1]) != EOF)) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    for (i = 0; i &lt; roundUp; i++) &#123;</span><br><span class="line">        st[i] = INT_MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    ConstructSegTree(st, arr, size);</span><br><span class="line">    //PrintfSegTree(st, roundUp, INT_MAX);</span><br><span class="line">    </span><br><span class="line">    i = 0;</span><br><span class="line">    while ((++i) &lt;= opts &amp;&amp; (scanf(&quot;\n%c %d %d&quot;, &amp;opt, &amp;x, &amp;y) != EOF)) &#123;</span><br><span class="line">        int target;</span><br><span class="line">        </span><br><span class="line">        switch (opt) &#123;</span><br><span class="line">            case &#x27;q&#x27;:</span><br><span class="line">                target = INT_MAX;</span><br><span class="line">                QuerySegTree(st, 1, 0, size - 1, x - 1, y - 1, &amp;target);</span><br><span class="line">                printf(&quot;%d\n&quot;, target);</span><br><span class="line">                break;</span><br><span class="line">            case &#x27;u&#x27;:</span><br><span class="line">                //PrintfSegTree(st, roundUp, INT_MAX);</span><br><span class="line">                UpdateSegTree(st, 1, 0, size - 1, x - 1, y);</span><br><span class="line">                //PrintfSegTree(st, roundUp, INT_MAX);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    free(arr);</span><br><span class="line">    free(st);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Construct</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void _Construct(int *st, int sti, int *arr, int l, int r)</span><br><span class="line">&#123;</span><br><span class="line">    if (l == r) &#123;</span><br><span class="line">        st[sti] = arr[l];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _Construct(st, 2 * sti, arr, l, (l + r) / 2);</span><br><span class="line">    _Construct(st, 2 * sti + 1, arr, (l + r) / 2 + 1, r);</span><br><span class="line">    </span><br><span class="line">    st[sti] = st[2 * sti] &lt; st[2 * sti + 1] ? st[2 * sti] : st[2 * sti + 1] ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ConstructSegTree(int *st, int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">    _Construct(st , 1, arr, 0, size - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Update</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void UpdateSegTree(int *st, int sti, int l, int r, int idx, int value)</span><br><span class="line">&#123;</span><br><span class="line">    if (idx &lt; l || idx &gt; r) &#123; // not in range</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (l == r &amp;&amp; idx == l) &#123;</span><br><span class="line">        st[sti] = value;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UpdateSegTree(st, 2 * sti, l, (l + r) / 2, idx, value);</span><br><span class="line">    UpdateSegTree(st, 2 * sti + 1, (l + r) / 2 + 1, r, idx, value);</span><br><span class="line">    </span><br><span class="line">    st[sti] = st[2 * sti] &lt; st[2 * sti + 1] ? st[2 * sti] : st[2 * sti + 1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Query</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void QuerySegTree(int *st, int sti, int l, int r, int ql, int qr, int *target)</span><br><span class="line">&#123;</span><br><span class="line">    if (r &lt; ql || l &gt; qr) &#123; // out query range</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (ql &lt;= l &amp;&amp; r &lt;= qr) &#123; // in query range</span><br><span class="line">        if (st[sti] &lt; *target) &#123;</span><br><span class="line">            *target = st[sti];</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    QuerySegTree(st, 2 * sti, l, (l + r) / 2, ql, qr, target);</span><br><span class="line">    QuerySegTree(st, 2 * sti + 1, (l + r) / 2 + 1, r, ql, qr, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Cautions</p>
</li>
</ul>
<p>– index 0 is ommited of segment tree array</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://www.hackerearth.com/zh/practice/" >HackerEarth Practice<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.hackerearth.com/zh/practice/algorithms/searching/linear-search/tutorial/" >HackerEarth Algorithms<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.hackerearth.com/zh/practice/data-structures/advanced-data-structures/segment-trees/tutorial/" >HackerEarth Data Structure<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>segment tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Softether VPN Client for Ubuntu</title>
    <url>/2021/09/18/softether-vpn-client-for-ubuntu/</url>
    <content><![CDATA[<h3 id="I-Download-and-Install"><a href="#I-Download-and-Install" class="headerlink" title="I. Download and Install"></a>I. Download and Install</h3><ul>
<li>download softether linux client<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/SoftEtherVPN/SoftEtherVPN_Stable/releases/download/v4.38-9760-rtm/softether-vpnclient-v4.38-9760-rtm-2021.08.17-linux-arm64-64bit.tar.gz</span><br><span class="line">tar -xvf softether-vpnclient-v4.38-9760-rtm-2021.08.17-linux-arm64-64bit.tar.gz</span><br></pre></td></tr></table></figure></li>
<li>install client and check<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vpnclient</span><br><span class="line">./.install.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./vpncmd </span><br><span class="line">vpncmd command - SoftEther VPN Command Line Management Utility</span><br><span class="line">SoftEther VPN Command Line Management Utility (vpncmd command)</span><br><span class="line">Version 4.38 Build 9760   (English)</span><br><span class="line">Compiled 2021/08/17 22:32:49 by buildsan at crosswin</span><br><span class="line">Copyright (c) SoftEther VPN Project. All Rights Reserved.</span><br><span class="line"></span><br><span class="line">By using vpncmd program, the following can be achieved. </span><br><span class="line"></span><br><span class="line">1. Management of VPN Server or VPN Bridge </span><br><span class="line">2. Management of VPN Client</span><br><span class="line">3. Use of VPN Tools (certificate creation and Network Traffic Speed Test Tool)</span><br><span class="line"></span><br><span class="line">Select 1, 2 or 3: 3</span><br><span class="line"></span><br><span class="line">VPN Tools has been launched. By inputting HELP, you can view a list of the commands that can be used.</span><br><span class="line"></span><br><span class="line">VPN Tools&gt;help</span><br><span class="line">You can use the following 6 commands: </span><br><span class="line"> About         - Display the version information</span><br><span class="line"> Check         - Check whether SoftEther VPN Operation is Possible</span><br><span class="line"> MakeCert      - Create New X.509 Certificate and Private Key (1024 bit)</span><br><span class="line"> MakeCert2048  - Create New X.509 Certificate and Private Key (2048 bit)</span><br><span class="line"> TrafficClient - Run Network Traffic Speed Test Tool in Client Mode</span><br><span class="line"> TrafficServer - Run Network Traffic Speed Test Tool in Server Mode</span><br><span class="line"></span><br><span class="line">To reference the usage for each command, input &quot;command name ?&quot; to view a help.</span><br><span class="line">The command completed successfully.</span><br><span class="line"></span><br><span class="line">VPN Tools&gt;check</span><br><span class="line">Check command - Check whether SoftEther VPN Operation is Possible</span><br><span class="line">---------------------------------------------------</span><br><span class="line">SoftEther VPN Operation Environment Check Tool</span><br><span class="line"></span><br><span class="line">Copyright (c) SoftEther VPN Project.</span><br><span class="line">All Rights Reserved.</span><br><span class="line"></span><br><span class="line">If this operation environment check tool is run on a system and that system passes, it is most likely that SoftEther VPN software can operate on that system. This check may take a while. Please wait...</span><br><span class="line"></span><br><span class="line">Checking &#x27;Kernel System&#x27;... </span><br><span class="line">              Pass</span><br><span class="line">Checking &#x27;Memory Operation System&#x27;... </span><br><span class="line">              Pass</span><br><span class="line">Checking &#x27;ANSI / Unicode string processing system&#x27;... </span><br><span class="line">              Pass</span><br><span class="line">Checking &#x27;File system&#x27;... </span><br><span class="line">              Pass</span><br><span class="line">Checking &#x27;Thread processing system&#x27;... </span><br><span class="line">              Pass</span><br><span class="line">Checking &#x27;Network system&#x27;... </span><br><span class="line">              Pass</span><br><span class="line"></span><br><span class="line">All checks passed. It is most likely that SoftEther VPN Server / Bridge can operate normally on this system.</span><br><span class="line"></span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="II-Config-Client"><a href="#II-Config-Client" class="headerlink" title="II. Config Client"></a>II. Config Client</h3><ul>
<li>start client<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /home/down/vpn/vpnclient/vpnclient start</span><br></pre></td></tr></table></figure></li>
<li>vpncmd help<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo ./vpncmd </span><br><span class="line">vpncmd command - SoftEther VPN Command Line Management Utility</span><br><span class="line">SoftEther VPN Command Line Management Utility (vpncmd command)</span><br><span class="line">Version 4.38 Build 9760   (English)</span><br><span class="line">Compiled 2021/08/17 22:32:49 by buildsan at crosswin</span><br><span class="line">Copyright (c) SoftEther VPN Project. All Rights Reserved.</span><br><span class="line"></span><br><span class="line">By using vpncmd program, the following can be achieved. </span><br><span class="line"></span><br><span class="line">1. Management of VPN Server or VPN Bridge </span><br><span class="line">2. Management of VPN Client</span><br><span class="line">3. Use of VPN Tools (certificate creation and Network Traffic Speed Test Tool)</span><br><span class="line"></span><br><span class="line">Select 1, 2 or 3: 2</span><br><span class="line"></span><br><span class="line">Specify the host name or IP address of the computer that the destination VPN Client is operating on. </span><br><span class="line">If nothing is input and Enter is pressed, connection will be made to localhost (this computer).</span><br><span class="line">Hostname of IP Address of Destination: </span><br><span class="line"></span><br><span class="line">Connected to VPN Client &quot;localhost&quot;.</span><br><span class="line"></span><br><span class="line">VPN Client&gt;help</span><br><span class="line">You can use the following 66 commands: </span><br><span class="line"> About                    - Display the version information</span><br><span class="line"> AccountAnonymousSet      - Set User Authentication Type of VPN Connection Setting to Anonymous Authentication</span><br><span class="line"> AccountCertGet           - Get Client Certificate to Use for Cascade Connection</span><br><span class="line"> AccountCertSet           - Set User Authentication Type of VPN Connection Setting to Client Certificate Authentication</span><br><span class="line"> AccountCompressDisable   - Disable Data Compression when Communicating by VPN Connection Setting</span><br><span class="line"> AccountCompressEnable    - Enable Data Compression when Communicating by VPN Connection Setting</span><br><span class="line"> AccountConnect           - Start Connection to VPN Server using VPN Connection Setting</span><br><span class="line"> AccountCreate            - Create New VPN Connection Setting</span><br><span class="line"> AccountDelete            - Delete VPN Connection Setting</span><br><span class="line"> AccountDetailSet         - Set Advanced Settings for VPN Connection Setting</span><br><span class="line"> AccountDisconnect        - Disconnect VPN Connection Setting During Connection</span><br><span class="line"> AccountEncryptDisable    - Disable Encryption when Communicating by VPN Connection Setting</span><br><span class="line"> AccountEncryptEnable     - Enable Encryption when Communicating by VPN Connection Setting</span><br><span class="line"> AccountExport            - Export VPN Connection Setting</span><br><span class="line"> AccountGet               - Get Setting of VPN Connection Setting </span><br><span class="line"> AccountImport            - Import VPN Connection Setting</span><br><span class="line"> AccountList              - Get List of VPN Connection Settings</span><br><span class="line"> AccountNicSet            - Set Virtual Network Adapter for VPN Connection Setting to Use</span><br><span class="line"> AccountPasswordSet       - Set User Authentication Type of VPN Connection Setting to Password Authentication</span><br><span class="line"> AccountProxyHttp         - Set Connection Method of VPN Connection Setting to be via an HTTP Proxy Server</span><br><span class="line"> AccountProxyNone         - Specify Direct TCP/IP Connection as the Connection Method of VPN Connection Setting</span><br><span class="line"> AccountProxySocks        - Set Connection Method of VPN Connection Setting to be via an SOCKS Proxy Server</span><br><span class="line"> AccountRename            - Change VPN Connection Setting Name</span><br><span class="line"> AccountRetrySet          - Set Interval between Connection Retries for Connection Failures or Disconnections of VPN Connection Setting</span><br><span class="line"> AccountSecureCertSet     - Set User Authentication Type of VPN Connection Setting to Smart Card Authentication</span><br><span class="line"> AccountServerCertDelete  - Delete Server Individual Certificate for VPN Connection Setting</span><br><span class="line"> AccountServerCertDisable - Disable VPN Connection Setting Server Certificate Verification Option</span><br><span class="line"> AccountServerCertEnable  - Enable VPN Connection Setting Server Certificate Verification Option</span><br><span class="line"> AccountServerCertGet     - Get Server Individual Certificate for VPN Connection Setting</span><br><span class="line"> AccountServerCertSet     - Set Server Individual Certificate for VPN Connection Setting</span><br><span class="line"> AccountSet               - Set the VPN Connection Setting Connection Destination</span><br><span class="line"> AccountStartupRemove     - Remove Startup Connection of VPN Connection Setting </span><br><span class="line"> AccountStartupSet        - Set VPN Connection Setting as Startup Connection</span><br><span class="line"> AccountStatusGet         - Get Current VPN Connection Setting Status</span><br><span class="line"> AccountStatusHide        - Set Connection Status and Error Screen to be Hidden when Connecting to VPN Server</span><br><span class="line"> AccountStatusShow        - Set Connection Status and Error Screen to Display when Connecting to VPN Server</span><br><span class="line"> AccountUsernameSet       - Set User Name of User to Use Connection of VPN Connection Setting</span><br><span class="line"> CertAdd                  - Add Trusted CA Certificate</span><br><span class="line"> CertDelete               - Delete Trusted CA Certificate</span><br><span class="line"> CertGet                  - Get Trusted CA Certificate</span><br><span class="line"> CertList                 - Get List of Trusted CA Certificates</span><br><span class="line"> Check                    - Check whether SoftEther VPN Operation is Possible</span><br><span class="line"> KeepDisable              - Disable the Keep Alive Internet Connection Function</span><br><span class="line"> KeepEnable               - Enable the Keep Alive Internet Connection Function</span><br><span class="line"> KeepGet                  - Get the Keep Alive Internet Connection Function</span><br><span class="line"> KeepSet                  - Set the Keep Alive Internet Connection Function</span><br><span class="line"> MakeCert                 - Create New X.509 Certificate and Private Key (1024 bit)</span><br><span class="line"> MakeCert2048             - Create New X.509 Certificate and Private Key (2048 bit)</span><br><span class="line"> NicCreate                - Create New Virtual Network Adapter</span><br><span class="line"> NicDelete                - Delete Virtual Network Adapter</span><br><span class="line"> NicDisable               - Disable Virtual Network Adapter</span><br><span class="line"> NicEnable                - Enable Virtual Network Adapter</span><br><span class="line"> NicGetSetting            - Get Virtual Network Adapter Setting</span><br><span class="line"> NicList                  - Get List of Virtual Network Adapters</span><br><span class="line"> NicSetSetting            - Change Virtual Network Adapter Setting</span><br><span class="line"> NicUpgrade               - Upgrade Virtual Network Adapter Device Driver</span><br><span class="line"> PasswordGet              - Get Password Setting to Connect to VPN Client Service</span><br><span class="line"> PasswordSet              - Set the password to connect to the VPN Client service.</span><br><span class="line"> RemoteDisable            - Deny Remote Management of VPN Client Service</span><br><span class="line"> RemoteEnable             - Allow Remote Management of VPN Client Service</span><br><span class="line"> SecureGet                - Get ID of Smart Card Type to Use</span><br><span class="line"> SecureList               - Get List of Usable Smart Card Types</span><br><span class="line"> SecureSelect             - Select the Smart Card Type to Use</span><br><span class="line"> TrafficClient            - Run Network Traffic Speed Test Tool in Client Mode</span><br><span class="line"> TrafficServer            - Run Network Traffic Speed Test Tool in Server Mode</span><br><span class="line"> VersionGet               - Get Version Information of VPN Client Service</span><br><span class="line"></span><br><span class="line">To reference the usage for each command, input &quot;command name ?&quot; to view a help.</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure></li>
<li>create nic<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VPN Client&gt;NicCreate</span><br><span class="line">NicCreate command - Create New Virtual Network Adapter</span><br><span class="line">Virtual Network Adapter Name: aws</span><br><span class="line"></span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure></li>
<li>create account<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VPN Client&gt;AccountCreate</span><br><span class="line">AccountCreate command - Create New VPN Connection Setting</span><br><span class="line">Name of VPN Connection Setting: aws</span><br><span class="line"></span><br><span class="line">Destination VPN Server Host Name and Port Number: 13.230.1.6:443</span><br><span class="line"></span><br><span class="line">Destination Virtual Hub Name: VPN</span><br><span class="line"></span><br><span class="line">Connecting User Name: rpi1 </span><br><span class="line"></span><br><span class="line">Used Virtual Network Adapter Name: aws</span><br><span class="line"></span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure></li>
<li>set password<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VPN Client&gt;AccountPasswordSet</span><br><span class="line">AccountPasswordSet command - Set User Authentication Type of VPN Connection Setting to Password Authentication</span><br><span class="line">Name of VPN Connection Setting: aws</span><br><span class="line"></span><br><span class="line">Please enter the password. To cancel press the Ctrl+D key.</span><br><span class="line"></span><br><span class="line">Password: ********</span><br><span class="line">Confirm input: ********</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Specify standard or radius: standard</span><br><span class="line"></span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure>
<h3 id="III-Connect-and-Query-Status"><a href="#III-Connect-and-Query-Status" class="headerlink" title="III. Connect and Query Status"></a>III. Connect and Query Status</h3></li>
<li>connect<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VPN Client&gt;AccountConnect</span><br><span class="line">AccountConnect command - Start Connection to VPN Server using VPN Connection Setting</span><br><span class="line">Name of VPN Connection Setting: aws</span><br><span class="line"></span><br><span class="line">The command completed successfully.</span><br><span class="line"></span><br><span class="line">VPN Client&gt;AccountList</span><br><span class="line">AccountList command - Get List of VPN Connection Settings</span><br><span class="line">Item                        |Value</span><br><span class="line">----------------------------+-----------------------------------------</span><br><span class="line">VPN Connection Setting Name |aws</span><br><span class="line">Status                      |Connected</span><br><span class="line">VPN Server Hostname         |13.230.1.6:443 (Direct TCP/IP Connection)</span><br><span class="line">Virtual Hub                 |VPN</span><br><span class="line">Virtual Network Adapter Name|aws</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure></li>
<li>disconnect<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VPN Client&gt;AccountDisconnect </span><br><span class="line">AccountDisconnect command - Disconnect VPN Connection Setting During Connection</span><br><span class="line">Name of VPN Connection Setting: aws</span><br><span class="line"></span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="enable-ip-forward-and-config-route"><a href="#enable-ip-forward-and-config-route" class="headerlink" title="enable ip forward and config route"></a>enable ip forward and config route</h3><ul>
<li><p>enable ipv4 forward<br>uncommnet /etc/sysctl.conf ‘s <em>#net.ipv4.ip_forward = 1</em> field.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo sysctl -p</span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure></li>
<li><p>dhcp ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ifconfig vpn_aws</span><br><span class="line">vpn_aws: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet6 fe80::5c8a:2fff:fea2:9bcd  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 5e:8a:2f:a2:9b:cd  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 480  bytes 36783 (36.7 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 404  bytes 34409 (34.4 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">		</span><br><span class="line">$ sudo dhclient vpn_aws</span><br><span class="line"></span><br><span class="line">$ ifconfig vpn_aws</span><br><span class="line">vpn_aws: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.30.11  netmask 255.255.255.0  broadcast 192.168.30.255</span><br><span class="line">        inet6 fe80::5c8a:2fff:fea2:9bcd  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 5e:8a:2f:a2:9b:cd  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 503  bytes 38923 (38.9 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 269644  bytes 188780458 (188.7 MB)</span><br><span class="line">        TX errors 0  dropped 42599 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure></li>
<li><p>config route</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ip route </span><br><span class="line">default via 192.168.30.1 dev vpn_aws </span><br><span class="line">default via 192.168.124.1 dev wlan0 proto dhcp metric 600 </span><br><span class="line">169.254.0.0/16 dev wlan0 scope link metric 1000 </span><br><span class="line">192.168.30.0/24 dev vpn_aws proto kernel scope link src 192.168.30.11 </span><br><span class="line">192.168.124.0/24 dev wlan0 proto kernel scope link src 192.168.124.8 metric 600 </span><br><span class="line"></span><br><span class="line">$ sudo ip route add 13.230.1.6/32 via 192.168.124.1 dev wlan0</span><br><span class="line">$ sudo ip route del default via 192.168.124.1 dev wlan0 proto dhcp metric 600</span><br><span class="line"></span><br><span class="line">$ ip route</span><br><span class="line">default via 192.168.30.1 dev vpn_aws </span><br><span class="line">13.230.1.6 via 192.168.124.1 dev wlan0 </span><br><span class="line">169.254.0.0/16 dev wlan0 scope link metric 1000 </span><br><span class="line">192.168.30.0/24 dev vpn_aws proto kernel scope link src 192.168.30.11 </span><br><span class="line">192.168.124.0/24 dev wlan0 proto kernel scope link src 192.168.124.8 metric 600 </span><br></pre></td></tr></table></figure></li>
<li><p>set nameserver</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ su root</span><br><span class="line">$ echo &quot;nameserver 8.8.8.8&quot; &gt;&gt; /etc/resolv.conf</span><br><span class="line">$ ping 8.8.8.8 -c4</span><br></pre></td></tr></table></figure></li>
<li><p>done</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ping google.com.au -c4</span><br><span class="line">PING google.com.au (172.217.25.99) 56(84) bytes of data.</span><br><span class="line">64 bytes from nrt13s51-in-f99.1e100.net (172.217.25.99): icmp_seq=1 ttl=104 time=197 ms</span><br><span class="line">64 bytes from nrt13s51-in-f99.1e100.net (172.217.25.99): icmp_seq=2 ttl=104 time=194 ms</span><br><span class="line">64 bytes from nrt13s51-in-f99.1e100.net (172.217.25.99): icmp_seq=3 ttl=104 time=194 ms</span><br><span class="line">64 bytes from nrt13s51-in-f99.1e100.net (172.217.25.99): icmp_seq=4 ttl=104 time=194 ms</span><br><span class="line"></span><br><span class="line">--- google.com.au ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3004ms</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Summarize-everytime"><a href="#Summarize-everytime" class="headerlink" title="Summarize(everytime)"></a>Summarize(everytime)</h3><ul>
<li><p>start vpn</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /home/down/vpn/vpnclient/vpnclient start; sleep 5</span><br><span class="line">sudo dhclient vpn_aws</span><br><span class="line">sudo ip route add 13.230.1.6/32 via 192.168.124.1 dev wlan0</span><br><span class="line">sudo ip route del default via 192.168.124.1 dev wlan0</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Notes</strong>: the account should be set startup mode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VPN Client&gt;AccountStartupSet</span><br><span class="line">AccountStartupSet command - Set VPN Connection Setting as Startup Connection</span><br><span class="line">Name of VPN Connection Setting: aws</span><br><span class="line"></span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure></li>
<li><p>stop vpn</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ifconfig down vpn_aws</span><br><span class="line">sudo /home/down/vpn/vpnclient/vpnclient stop; sleep 5</span><br><span class="line">sudo ip route del 13.230.1.6/32</span><br><span class="line">sudo ip route del default</span><br><span class="line">sudo ip route add default via 192.168.124.1 dev wlan0 proto dhcp metric 600</span><br><span class="line">sudo dhclient -x wlan0; sudo dhclient wlan0</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a class="link"   href="https://www.youtube.com/watch?v=i2zN1IFKNYU" >How to install and set up Softether VPN Client for Ubuntu Linux via free VPN Gate servers<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>TOOLS</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>vpn client</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Softether VPN on Cloud</title>
    <url>/2018/08/25/softether-vpn-on-cloud/</url>
    <content><![CDATA[<h3 id="I-Start-a-Compute-Instance-on-Cloud"><a href="#I-Start-a-Compute-Instance-on-Cloud" class="headerlink" title="I. Start a Compute Instance on Cloud"></a>I. Start a Compute Instance on Cloud</h3><p>You can start the instance in <a class="link"   href="https://aws.amazon.com/" >aws<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://azure.microsoft.com/en-us/" >azure<i class="fas fa-external-link-alt"></i></a> or <a class="link"   href="https://www.alibabacloud.com/en" >aliyun<i class="fas fa-external-link-alt"></i></a>, make sure ports 22(tcp), 443(tcp), 500(tcp and udp), 992(tcp and udp), 1194(tcp and udp), 4500(tcp and udp), and 5555(tcp and udp) are opened. Recommanded images are ubuntu or centos.</p>
<h3 id="II-Install-SoftEther-on-the-Instance"><a href="#II-Install-SoftEther-on-the-Instance" class="headerlink" title="II. Install SoftEther on the Instance"></a>II. Install SoftEther on the Instance</h3><p>First, get <a class="link"   href="https://www.softether.org/" >softether VPN<i class="fas fa-external-link-alt"></i></a>, wget <a class="link"   href="https://www.softether-download.com/files/softether/v4.25-9656-rtm-2018.01.15-tree/Linux/SoftEther_VPN_Server/64bit_-_Intel_x64_or_AMD64/softether-vpnserver-v4.25-9656-rtm-2018.01.15-linux-x64-64bit.tar.gz" >https://www.softether-download.com/files/softether/v4.25-9656-rtm-2018.01.15-tree/Linux/SoftEther_VPN_Server/64bit_-_Intel_x64_or_AMD64/softether-vpnserver-v4.25-9656-rtm-2018.01.15-linux-x64-64bit.tar.gz<i class="fas fa-external-link-alt"></i></a>, you also can get the other versions <a class="link"   href="https://www.softether-download.com/files/softether/" >here<i class="fas fa-external-link-alt"></i></a>.<br>Then extract the file, and change into the extracted directory, type <a href="">./.install</a> and hit Enter, to compile vpn in your enviroment.</p>
<h3 id="III-Start-vpn-Server-and-Configure"><a href="#III-Start-vpn-Server-and-Configure" class="headerlink" title="III. Start vpn Server and Configure"></a>III. Start vpn Server and Configure</h3><h4 id="Start-vpn-server"><a href="#Start-vpn-server" class="headerlink" title="Start vpn server"></a>Start vpn server</h4><p>Type <a href="">./vpnserver start</a> to start the vpn server<br>You can stop the vpnserver with type <a href="">./vpnserver stop</a></p>
<h4 id="Check-to-make-sure-SoftEther-is-working"><a href="#Check-to-make-sure-SoftEther-is-working" class="headerlink" title="Check to make sure SoftEther is working"></a>Check to make sure SoftEther is working</h4><p>Here we will run a quick check to make sure everything is working as desired.</p>
<p>Type <a href="">cd ./vpnserver</a> and hit Enter<br>Type <a href="">./vpncmd</a> and hit Enter<br>Type <a href="">3</a> to choose the third option and hit Enter<br>Type <a href="">check</a> and hit Enter to run the test</p>
<h4 id="Configuring-SoftEther"><a href="#Configuring-SoftEther" class="headerlink" title="Configuring SoftEther"></a>Configuring SoftEther</h4><p>Next we need to configure SoftEther so we can connect to it from our PC client.</p>
<p> <strong>1</strong> While you’re still in the vpnserver directory, type <a href="">./vpncmd</a><br> <strong>2</strong> Choose option <a href="">1</a> and hit Enter<br> <strong>3</strong> For the hostname IP, input the IP address of the EC2 server instance followed by a colon and port 5555. You can find the IP of your server instance on the EC2 dashboard. The input should look like this: 123.123.123.123:5555<br> <strong>4</strong> In the next step, leave the input blank and hit Enter to connect from the Server Admin node<br> <strong>5</strong> The prompt should now read “VPN Server&gt;”. Enter <a href="">ServerPasswordSet</a> and hit Enter<br> <strong>6</strong> Enter a password of your choice and type it again to confirm<br> <strong>7</strong> Next, type <a href="">HubCreate <em>VPN</em></a> and enter a new password that you will use to log in when you are not in Server Admin mode<br> <strong>8</strong> Type <a href="">Hub <em>VPN</em></a> and hit Enter<br> <strong>9</strong> Type <a href="">SecureNatEnable</a><br><strong>10</strong> Type <a href="">UserCreate <em>paul</em></a>, replacing <em>“paul”</em> with a username of your choice.<br><strong>11</strong> You will be asked to enter a Group Name, Full Name, and Description for the new user. Leave the Group Name blank, and use whatever you want for the other two.<br><strong>12</strong> Type <a href="">UserPasswordSet <em>paul</em></a>, replacing <em>“paul”</em> with the username you just created. Enter and confirm a password for that user. <strong>For android/ios the password  with special characters are not recommended except alphabet or digtial</strong>.<br><strong>13</strong> Repeat steps 10-12 for as many users as you wish.<br><strong>14</strong> A couple notes here. In step 9, we use Secure NAT as the means to connect hubs to the server network. Another option is Local Bridge connection, but it’s more complicated and requires you set up a DHCP server. Secure NAT takes care of the DHCP server for you.<br><strong>15</strong> Type <a href="">Hub</a> without the hub name, then hit enter to exit Hub admin, return to the upper menu server admin. You can also type <a href="">Exit</a> to exit vpncmd immediately.</p>
<p>In step 12, we use the UserPasswordSet command to enable password authentication on a particular user. SoftEther supports several other types of authentication, which can vary between users. They include NT domain, anonymous, RADIUS, individual certificate, and signed certificate authentication.</p>
<p>Create group/user and set user password console output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ./vpncmd </span><br><span class="line">vpncmd command - SoftEther VPN Command Line Management Utility</span><br><span class="line">SoftEther VPN Command Line Management Utility (vpncmd command)</span><br><span class="line">Version 4.25 Build 9656   (English)</span><br><span class="line">Compiled 2018/01/15 10:17:04 by yagi at pc33</span><br><span class="line">Copyright (c) SoftEther VPN Project. All Rights Reserved.</span><br><span class="line"></span><br><span class="line">By using vpncmd program, the following can be achieved. </span><br><span class="line"></span><br><span class="line">1. Management of VPN Server or VPN Bridge </span><br><span class="line">2. Management of VPN Client</span><br><span class="line">3. Use of VPN Tools (certificate creation and Network Traffic Speed Test Tool)</span><br><span class="line"></span><br><span class="line">Select 1, 2 or 3: 1</span><br><span class="line"></span><br><span class="line">Specify the host name or IP address of the computer that the destination VPN Server or VPN Bridge is operating on. </span><br><span class="line">By specifying according to the format &#x27;host name:port number&#x27;, you can also specify the port number. </span><br><span class="line">(When the port number is unspecified, 443 is used.)</span><br><span class="line">If nothing is input and the Enter key is pressed, the connection will be made to the port number 8888 of localhost (this computer).</span><br><span class="line">Hostname of IP Address of Destination: </span><br><span class="line"></span><br><span class="line">If connecting to the server by Virtual Hub Admin Mode, please input the Virtual Hub name. </span><br><span class="line">If connecting by server admin mode, please press Enter without inputting anything.</span><br><span class="line">Specify Virtual Hub Name:    </span><br><span class="line">Password: **************</span><br><span class="line"></span><br><span class="line">Connection has been established with VPN Server &quot;localhost&quot; (port 443).</span><br><span class="line"></span><br><span class="line">You have administrator privileges for the entire VPN Server.</span><br><span class="line"></span><br><span class="line">VPN Server&gt;Hub VPN8</span><br><span class="line">VPN Server/VPN8&gt;Grouplist</span><br><span class="line">GroupList command - Get List of Groups</span><br><span class="line">Item       |Value</span><br><span class="line">-----------+--------</span><br><span class="line">Group Name |self</span><br><span class="line">Full Name  |self</span><br><span class="line">Description|for self</span><br><span class="line">Num Users  |3</span><br><span class="line">The command completed successfully.</span><br><span class="line"></span><br><span class="line">VPN Server/VPN8&gt;GroupCreate guest</span><br><span class="line">GroupCreate command - Create Group</span><br><span class="line">Group Full Name: guest</span><br><span class="line"></span><br><span class="line">Group Description: for guest</span><br><span class="line"></span><br><span class="line">The command completed successfully.</span><br><span class="line"></span><br><span class="line">VPN Server/VPN8&gt;?</span><br><span class="line">VPN Server/VPN8&gt;UserCreate desktop</span><br><span class="line">UserCreate command - Create User </span><br><span class="line">Assigned Group Name: self</span><br><span class="line"></span><br><span class="line">User Full Name: desktop</span><br><span class="line"></span><br><span class="line">User Description: for desktop</span><br><span class="line"></span><br><span class="line">The command completed successfully.</span><br><span class="line"></span><br><span class="line">VPN Server/VPN8&gt;UserPasswordSet desktop</span><br><span class="line">UserPasswordSet command - Set Password Authentication for User Auth Type and Set Password</span><br><span class="line">Please enter the password. To cancel press the Ctrl+D key.</span><br><span class="line"></span><br><span class="line">Password: *******</span><br><span class="line">Confirm input: *******</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">The command completed successfully.</span><br><span class="line">VPN Server/VPN8&gt;exit</span><br></pre></td></tr></table></figure>

<h4 id="Set-up-L2TP-IPSec-on-the-VPN-server"><a href="#Set-up-L2TP-IPSec-on-the-VPN-server" class="headerlink" title="Set up L2TP/IPSec on the VPN server"></a>Set up L2TP/IPSec on the VPN server</h4><p>We decided to use L2TP/IPSec as the VPN protocol in this tutorial for three main reason: a) it’s more secure than PPTP, b) it’s easier to set up than OpenVPN, and c) it works across multiple operating systems, unlike the Windows-only SSTP.</p>
<p><strong>1</strong> While still in vpncmd’s “VPN Server&gt;” prompt, enter <a href="">IPsecEnable</a><br><strong>2</strong> Next you are given a series of configuration prompts. Below we’ll give our recommended answers:</p>
<ul>
<li>Enable L2TP over IPsec Server Function – <a href="">yes</a>, enable the VPN for use on multiple devices including Windows PC, Mac OSX, iOS, and Android</li>
<li>Enable Raw L2TP Server Function – <a href="">no</a>, do not allow connections without encryption</li>
<li>Enable EtherIP / L2TPv3 over IPsec Server Function – <a href="">yes</a>, allow routers with this built-in function to connect</li>
</ul>
<p><strong>3</strong> Next comes the pre-shared key. This is a password with a maximum of nine characters. Enter whatever you like.<br><strong>4</strong> For “Default Virtual HUB in a case of omitting the HUB on the Username:”, simply enter <em>VPN</em></p>
<p>That’s it! Make sure you write down all the passwords you’ve created above and what each one is for.</p>
<h3 id="IV-Client-Configure"><a href="#IV-Client-Configure" class="headerlink" title="IV. Client Configure"></a>IV. Client Configure</h3><p>For windonws or macos, you could download the vpn client to connect the vpn server:</p>
<ul>
<li><a class="link"   href="https://www.softether.org/4-docs/2-howto/9.L2TPIPsec_Setup_Guide_for_SoftEther_VPN_Server/4.Windows_L2TP_Client_Setup" >Windows L2TP Client Setup<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.softether.org/4-docs/2-howto/9.L2TPIPsec_Setup_Guide_for_SoftEther_VPN_Server/5.Mac_OS_X_L2TP_Client_Setup" >Mac OS X L2TP Client Setup<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>For ios mobile device, <a class="link"   href="https://www.softether.org/4-docs/2-howto/9.L2TPIPsec_Setup_Guide_for_SoftEther_VPN_Server/2.iPhone_iPad_L2TP_Client_Setting" >iPhone/iPad L2TP Client Setup<i class="fas fa-external-link-alt"></i></a><br>For android mobile device, <a class="link"   href="https://www.softether.org/4-docs/2-howto/9.L2TPIPsec_Setup_Guide_for_SoftEther_VPN_Server/3.Android_L2TP_Client_Setup" >Android L2TP Client Setup<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Tips-for-AWS-Ubuntu"><a href="#Tips-for-AWS-Ubuntu" class="headerlink" title="Tips for AWS Ubuntu"></a>Tips for AWS Ubuntu</h3><ol>
<li>Set password after intall: sudo passwd</li>
<li>Install compile enviroment: apt-get update; apt-get install gcc make</li>
<li>Auto start and log manage, <em>vpnsm.sh</em><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash </span><br><span class="line"></span><br><span class="line">if [ X&quot;$1&quot; = &quot;Xstart&quot; ]; then</span><br><span class="line">    /home/ubuntu/vpnserver/vpnserver stop</span><br><span class="line">    /home/ubuntu/vpnserver/vpnserver start</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ X&quot;$1&quot; = &quot;Xlog&quot; ]; then</span><br><span class="line">    rm -rf /home/ubuntu/vpnserver/server_log/* /home/ubuntu/vpnserver/security_log/* /home/ubuntu/vpnserver/packet_log/*</span><br><span class="line">    /home/ubuntu/vpnserver/vpnserver stop</span><br><span class="line">    /home/ubuntu/vpnserver/vpnserver start</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure></li>
<li>Add startup service for ubuntu, <em>systemctl enable vpnstartup.service</em><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/systemd/system/vpnstartup.service</span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">ExecStart=/home/ubuntu/vpnsm.sh start</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li>
<li>Create crontab task for ubuntu<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Example of job definition:</span><br><span class="line"># .---------------- minute (0 - 59)</span><br><span class="line"># |  .------------- hour (0 - 23)</span><br><span class="line"># |  |  .---------- day of month (1 - 31)</span><br><span class="line"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"># |  |  |  |  |</span><br><span class="line"># *  *  *  *  * user-name command to be executed</span><br><span class="line">50 3    * * *   root    /home/ubuntu/vpnsm.sh log</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a class="link"   href="https://www.softether.org/4-docs/2-howto" >SoftetherVPN Howto<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.comparitech.com/blog/vpn-privacy/how-to-set-up-your-own-free-vpn-with-softether-and-amazon-web-services/" >How to make a free VPN with SoftEther and an AWS EC2 Linux instance<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>TOOLS</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>Key Ponits of TCP/IP</title>
    <url>/2018/02/19/tcp-ip/</url>
    <content><![CDATA[<h3 id="TCP-Timer"><a href="#TCP-Timer" class="headerlink" title="TCP Timer"></a>TCP Timer</h3><ul>
<li><p>Retransmission timer<br>When TCP sends a group of segments, it normally sets a single retransmission timer, waiting for the other end to acknowledge reception. TCP does not set a different retransmission timer for every segment. Rather, it sets a timer when it sends a window of data and updates the timeout as ACKs arrive. If an acknowledgment is not received in time, a segment is retransmitted.</p>
</li>
<li><p>Keepalive timer<br>Under some circumstances, it is useful for a client or server to become aware of the termination or loss of connection with its peer. In other circumstances, it is desirable to keep a minimal amount of data flowing over a connection, even if the applications do not have any to exchange. TCP keepalive provides a capability useful for both cases. Keepalive is a method for TCP to probe its peer without affecting the content of the data stream. It is driven by a keepalive timer. When the timer fires, a keepalive probe (keepalive for short) is sent, and the peer receiving the probe responds with an ACK.</p>
</li>
<li><p>Persist timer in zero-window scenario<br>If an acknowledgment (containing a window update) is lost, we could end up with both sides waiting for the other: the receiver waiting to receive data (because it provided the sender with a nonzero window and expects to see incoming data) and the sender waiting to <em>receive the window update</em> allowing it to send. To prevent this form of deadlock from occurring, the sender uses a <em>persist timer</em> to query the receiver periodically, to find out if the window size has increased. The persist timer triggers the transmission of <em>window probes</em>. Also see in <a class="link"   href="https://www.rfc-editor.org/rfc/rfc1122.txt" >RFC1122<i class="fas fa-external-link-alt"></i></a>.</p>
</li>
</ul>
<h3 id="TCP-Sliding-Windows"><a href="#TCP-Sliding-Windows" class="headerlink" title="TCP Sliding Windows"></a>TCP Sliding Windows</h3><ul>
<li>TCP Sliding Windows<br><img src="sliding-window.jpg" alt="TCP Sliding Windows"></li>
</ul>
<h3 id="TCP-Congestion-Control"><a href="#TCP-Congestion-Control" class="headerlink" title="TCP Congestion Control"></a>TCP Congestion Control</h3><ul>
<li><p>Self-Clock based on ACK</p>
</li>
<li><p>TCP Timeout and Retransmission Timeout</p>
</li>
<li><p>High Bandwidth-Delay-Product, with scaling window size</p>
</li>
<li><p>Slow Start, Congestion Avoidance, Fast Retransmit, and Fast Recovery Algorithms, <a class="link"   href="https://tools.ietf.org/html/rfc2001" >RFC2001<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li><p>Slow start: each time an ACK is received, the congestion window is increased by one segment. The sender can transmit up to the minimum of the congestion window and the advertised window.</p>
</li>
<li><p>Congestion window, cwnd, the flow control imposed by the sender. While the advertised window if flow control imposed by the receiver. The former is based on the sender’s assessment of perceived network congestion; the latter is related to the amount of available buffer space at the receiver for this connection.</p>
</li>
<li><p>Fast retransmit, If three or more duplicate ACKs are received in a row, it is a strong indication that a segment has been lost.  TCP then performs a retransmission of what appears to be the missing segment, without waiting for a retransmission timer to expire.</p>
</li>
<li><p>Congestion avoidance, except cwnd, another varible is needed, ssthresh, a slow start threshold.</p>
</li>
<li><p>If cwnd is less than or equal to ssthresh, TCP is in slow start; otherwise TCP is performing congestion avoidance.</p>
</li>
<li><p>After fast retransmit sends what appears to be the missing segment, congestion avoidance, but not slow start is performed.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Initialization for a given connection sets cwnd to one segment</span><br><span class="line">   and ssthresh to 65535 bytes.</span><br><span class="line"></span><br><span class="line">2. The TCP output routine never sends more than the minimum of cwnd</span><br><span class="line">   and the receiver&#x27;s advertised window.</span><br><span class="line"></span><br><span class="line">3. When congestion occurs (indicated by a timeout or the reception</span><br><span class="line">   of duplicate ACKs), one-half of the current window size (the</span><br><span class="line">   minimum of cwnd and the receiver&#x27;s advertised window, but at</span><br><span class="line">   least two segments) is saved in ssthresh.  Additionally, if the</span><br><span class="line">   congestion is indicated by a timeout, cwnd is set to one segment</span><br><span class="line">   (i.e., slow start).</span><br><span class="line"></span><br><span class="line">4. When new data is acknowledged by the other end, increase cwnd,</span><br><span class="line">   but the way it increases depends on whether TCP is performing</span><br><span class="line">   slow start or congestion avoidance.</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>Congestion avoidance dictates that cwnd be incremented by segsize*segsize/cwnd each time an ACK is received, where segsize is the segment size and cwnd is maintained in bytes. This is a <em>linear growth</em> of cwnd, compared to slow start’s <em>exponential growth</em>.</p>
<ul>
<li><p>TCP Congestion Control illustrate<br><img src="congestion_control.jpg" alt="TCP Congestion Control illustrate"></p>
</li>
<li><p>Bandwith Utilization of Competion Between Multiple-Flows<br><img src="competion-between-multiple-flows.jpg" alt="Bandwith Utilization of Competion Between Multiple-Flows"></p>
</li>
</ul>
<h3 id="TCP-Connection-Establishment-and-Termination"><a href="#TCP-Connection-Establishment-and-Termination" class="headerlink" title="TCP Connection Establishment and Termination"></a>TCP Connection Establishment and Termination</h3><ul>
<li>Connection Set-Up: Three-Way Handshake<br><img src="tcpopen3way.png" alt="Connection Set-Up: Three-Way Handshake"></li>
<li>Connection Close: Modified Three-Way Handshake<br><img src="tcpclose.png" alt="Connection Close: Modified Three-Way Handshake"></li>
<li>TCP State Machine<br><img src="tcpfsm.png" alt="TCP State Transition"></li>
</ul>
<h3 id="Some-Problems"><a href="#Some-Problems" class="headerlink" title="Some Problems"></a>Some Problems</h3><ul>
<li>Without any flow control, mixed with tcp and udp streams, tcp streams are always starved.</li>
<li>Silly window syndrome, when it occurs, small data segments are exchanged across the connection instead of full-size segments, <a class="link"   href="https://tools.ietf.org/html/rfc0813" >RFC0813<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://tools.ietf.org/html/rfc1122" >RFC1122<i class="fas fa-external-link-alt"></i></a>.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. When operating as a receiver, small windows are not advertised. The receive</span><br><span class="line">   algorithm specified by [RFC1122] is to not send a segment advertising a</span><br><span class="line">   larger window than is currently being advertised (which can be 0) until the</span><br><span class="line">   window can be increased by either one full-size segment (i.e., the receive</span><br><span class="line">   MSS) or by one-half of the receiver’s buffer space, whichever is smaller.</span><br><span class="line">   Note that there are two cases where this rule can come into play: when buffer</span><br><span class="line">   space has become available because of an application consuming data</span><br><span class="line">   from the network, and when TCP must respond to a window probe.</span><br><span class="line">2. When sending, small segments are not sent and the Nagle algorithm governs</span><br><span class="line">   when to send. Senders avoid SWS by not transmitting a segment</span><br><span class="line">   unless at least one of the following conditions is true:</span><br><span class="line">   a. A full-size (send MSS bytes) segment can be sent.</span><br><span class="line">   b. TCP can send at least one-half of the maximum-size window that the</span><br><span class="line">	  other end has ever advertised on this connection.</span><br><span class="line">   c. TCP can send everything it has to send and either (i) an ACK is not currently</span><br><span class="line">	  expected (i.e., we have no outstanding unacknowledged data) or</span><br><span class="line">	  (ii) the Nagle algorithm is disabled for this connection.</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Other-Choice-but-TCP"><a href="#Other-Choice-but-TCP" class="headerlink" title="Other Choice but TCP"></a>Other Choice but TCP</h3><ul>
<li><a class="link"   href="https://tools.ietf.org/html/rfc4960" >SCTP(Stream Control Transmission Protocol)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://tools.ietf.org/html/rfc4340" >DCCP(Datagram Congestion Control Protocol)<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li>TCP/IP Illustrated, Volume I The Protocols(Second Edition)</li>
<li><a class="link"   href="http://intronetworks.cs.luc.edu/current/html/tcp.html" >An Introduction to Computer Networks: Chapter 12, TCP Transport<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>STANDARD</category>
      </categories>
      <tags>
        <tag>protocols</tag>
        <tag>tcp/ip</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP SYN Packet</title>
    <url>/2018/02/21/tcp-syn-packet/</url>
    <content><![CDATA[<p>Except the purpose to establish the connection, some other important information in tcp SYN packet but usually be ignored. </p>
<h3 id="Example-of-SYN-packet-tcp-header"><a href="#Example-of-SYN-packet-tcp-header" class="headerlink" title="Example of SYN packet tcp header"></a>Example of SYN packet tcp header</h3><ul>
<li>TCP Header Layout<br><img src="tcp-header-layout.jpg" alt="TCP Header Layout"></li>
<li>TCP SYN Packet Parsed by wireshark<br><img src="tcp-syn-packet.jpg" alt="TCP SYN Packet"></li>
</ul>
<h3 id="Summary-of-tcp-header-options-up-to-40-Bytes"><a href="#Summary-of-tcp-header-options-up-to-40-Bytes" class="headerlink" title="Summary of tcp header options(up to 40 Bytes)"></a>Summary of tcp header options(up to 40 Bytes)</h3><table>
<thead>
<tr>
<th align="left">Kind</th>
<th align="left">Length</th>
<th align="left">Name</th>
<th align="left">Reference</th>
<th align="left">Description and Purpose</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">EOL</td>
<td align="left"><a class="link"   href="https://www.rfc-editor.org/rfc/rfc793.txt" >RFC0793<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">End of Option List</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">NOP</td>
<td align="left"><a class="link"   href="https://www.rfc-editor.org/rfc/rfc793.txt" >RFC0793<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">No Operation(used for padding/alignment)</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">4</td>
<td align="left">MSS</td>
<td align="left"><a class="link"   href="https://www.rfc-editor.org/rfc/rfc793.txt" >RFC0793<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">Maximum Segemnt Size</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">3</td>
<td align="left">WSOPT</td>
<td align="left"><a class="link"   href="https://www.rfc-editor.org/rfc/rfc1323.txt" >RFC1323<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">Window Scaling Factor(left-shift amount on window)</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">2</td>
<td align="left">SACK-Permitted</td>
<td align="left"><a class="link"   href="https://www.rfc-editor.org/rfc/rfc2018.txt" >RFC2018<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">Sender supports SACK options</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">Var.</td>
<td align="left">SACK</td>
<td align="left"><a class="link"   href="https://www.rfc-editor.org/rfc/rfc2018.txt" >RFC2018<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">SACK block(out-of-order data received)</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">10</td>
<td align="left">TSOPT</td>
<td align="left"><a class="link"   href="https://www.rfc-editor.org/rfc/rfc1323.txt" >RFC1323<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">Timestamps option</td>
</tr>
<tr>
<td align="left">28</td>
<td align="left">4</td>
<td align="left">UTO</td>
<td align="left"><a class="link"   href="https://www.rfc-editor.org/rfc/rfc5482.txt" >RFC5482<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">User Timeout(abort after idle time)</td>
</tr>
<tr>
<td align="left">29</td>
<td align="left">Var.</td>
<td align="left">TCP-AO</td>
<td align="left"><a class="link"   href="https://www.rfc-editor.org/rfc/rfc5925.txt" >RFC5925<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">Authentication option(using various algorithms)</td>
</tr>
<tr>
<td align="left">253</td>
<td align="left">Var.</td>
<td align="left">Experimental</td>
<td align="left"><a class="link"   href="https://www.rfc-editor.org/rfc/rfc4727.txt" >RFC4727<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">Reserved for experimental use</td>
</tr>
<tr>
<td align="left">254</td>
<td align="left">Var.</td>
<td align="left">Experimental</td>
<td align="left"><a class="link"   href="https://www.rfc-editor.org/rfc/rfc4727.txt" >RFC4727<i class="fas fa-external-link-alt"></i></a></td>
<td align="left">Reserved for experimental use</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>STANDARD</category>
      </categories>
      <tags>
        <tag>protocols</tag>
        <tag>tcp syn</tag>
      </tags>
  </entry>
  <entry>
    <title>Unified Virt Architecture</title>
    <url>/2021/10/06/unified-virt-architecture/</url>
    <content><![CDATA[<h3 id="0-Intel’s-DataCenter-of-Future"><a href="#0-Intel’s-DataCenter-of-Future" class="headerlink" title="0. Intel’s DataCenter of Future"></a>0. Intel’s DataCenter of Future</h3><p><img src="./intel-data-center-future-16x9.png.rendition.intel.web.1648.927.png" alt="Intel&#39;s DataCentre of Future"></p>
<h3 id="I-Unified-Architecture-Conception"><a href="#I-Unified-Architecture-Conception" class="headerlink" title="I. Unified Architecture Conception"></a>I. Unified Architecture Conception</h3><p><img src="./Unified-Virt-Architecture-Conception.png" alt="Unified Virt Architecture"></p>
<ul>
<li>Key Points<ul>
<li>Decoupling orchestration with the hypervisor, VisorOS to be a custom hypervisor dedicated OS(ecological closure)</li>
<li>Stateless VisorOS, which run in memory(only kernel and initrd), upgrade within reboot</li>
<li>Offload and non-offload with symmetric architecture</li>
</ul>
</li>
</ul>
<h3 id="II-Unified-Architecture-Implementation"><a href="#II-Unified-Architecture-Implementation" class="headerlink" title="II. Unified Architecture Implementation"></a>II. Unified Architecture Implementation</h3><ul>
<li>APIs: remote control with vsock<ul>
<li><a class="link"   href="https://libvirt.org/uri.html#URI_remote" >Libvirt Remote URIs<i class="fas fa-external-link-alt"></i></a><ul>
<li><a class="link"   href="https://docs.openstack.org/image-guide/virt-manager.html" >OpenStack Use the virt-manager X11 GUI<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li><a class="link"   href="https://www.openvswitch.org/support/dist-docs/ovsdb.7.html" >Open vSwitch CONNECTION METHODS<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li>Stateless(Immutable) OS<ul>
<li>IBM’s RedHat, <a class="link"   href="https://getfedora.org/en/coreos?stream=stable" >CoreOS<i class="fas fa-external-link-alt"></i></a></li>
<li>SuSE, <a class="link"   href="https://microos.opensuse.org/" >MicroOS<i class="fas fa-external-link-alt"></i></a></li>
<li>Ubuntu, <a class="link"   href="https://ubuntu.com/core" >Core<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://ubuntu.com/blog/ubuntu-server-21-10s" >Minimised system<i class="fas fa-external-link-alt"></i></a></li>
<li>Microsoft’s <a class="link"   href="https://kinvolk.io/" >Kinvolk<i class="fas fa-external-link-alt"></i></a>, <a class="link"   href="https://www.flatcar-linux.org/faq/" >Flatcar<i class="fas fa-external-link-alt"></i></a></li>
<li>AWS, <a class="link"   href="https://aws.amazon.com/bottlerocket/" >Bottlerocket<i class="fas fa-external-link-alt"></i></a></li>
<li>Intel, <a class="link"   href="https://clearlinux.org/features/stateless" >Clear Linux<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
<li>Offload SDK<ul>
<li><a class="link"   href="https://developer.nvidia.com/networking/doca" >Nvidia DPU Bluefield<i class="fas fa-external-link-alt"></i></a><br><img src="./DPU-offload-application-example.png" alt="DPU-offload application example"></li>
<li><a class="link"   href="https://www.intel.com/content/www/us/en/products/network-io/smartnic.html" >Intel IPUs<i class="fas fa-external-link-alt"></i></a><br><img src="./IPU-use-cases.png" alt="IPU&#39;s use cases"></li>
</ul>
</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://resource.nvidia.com/en-us-linely-whitepaper" >DPU-Based Hardware Acceleration: A Software Perspective<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.intel.com/content/www/us/en/newsroom/news/infrastructure-processing-unit-data-center.html#gs.d2wcl0" >Intel Unveils Infrastructure Processing Unit<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.intel.com/content/dam/www/central-libraries/us/en/documents/ipu-based-cloud-infrastructure-white-paper.pdf" >IPU based Cloud Infrastructure White Paper<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://developer.nvidia.com/networking/doca" >Nvidia DPUs DOCA<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://xcp-ng.org/blog/2021/07/12/dpus-and-the-future-of-virtualization/" >DPUs and the future of virtualization<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.camptocamp.com/de/news-events/news_immutability_and_loose_coupling" >Immutability &amp; loose coupling: a match made in heaven<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>INSIGHT</category>
      </categories>
      <tags>
        <tag>offload</tag>
        <tag>virt architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn Vim</title>
    <url>/2018/09/08/vim/</url>
    <content><![CDATA[<h3 id="Vim-Modes"><a href="#Vim-Modes" class="headerlink" title="Vim Modes"></a>Vim Modes</h3><ul>
<li>Vim modes switch<br><img src="vim-modes.png" alt="Vim Modes Switch"></li>
<li>Remap &lt;Esc&gt; key, changing <a class="link"   href="http://learnvimscriptthehardway.stevelosh.com/chapters/06.html" >the leader key<i class="fas fa-external-link-alt"></i></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat ~/.vimrc </span><br><span class="line">inoremap jk &lt;Esc&gt;</span><br><span class="line">let mapleader=&quot;&lt;Space&gt;&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Free-Online-Resources-to-Learn-Vim"><a href="#Free-Online-Resources-to-Learn-Vim" class="headerlink" title="Free Online Resources to Learn Vim"></a>Free Online Resources to Learn Vim</h3><ul>
<li><a class="link"   href="https://www.vim.org/" >vim<i class="fas fa-external-link-alt"></i></a>, vimtutor</li>
<li><a class="link"   href="https://www.openvim.com/" >openvim<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://vimcasts.org/" >vimcasts<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://www.vimgenius.com/" >vim genius<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://vim.rtorr.com/" >vim cheet sheet<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.vim.org/scripts/script.php?script_id=3409" >HJKL-learning game<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://vim-adventures.com/" >vim-adventures game<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Vedios-and-Blogs"><a href="#Vedios-and-Blogs" class="headerlink" title="Vedios and Blogs"></a>Vedios and Blogs</h3><ul>
<li><a class="link"   href="http://derekwyatt.org/vim/tutorials/index.html" >vim vedios<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://vimeo.com/search?q=welcom+to+vim" >basics of vim<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.labnol.org/internet/learning-vim-for-beginners/28820/" >Learning Vim for Beginners<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://medium.com/actualize-network/how-to-learn-vim-a-four-week-plan-cd8b376a9b85" >How To Learn Vim: A Four Week Plan<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="Frequent-Commands"><a href="#Frequent-Commands" class="headerlink" title="Frequent Commands"></a>Frequent Commands</h3><ul>
<li>One line<ul>
<li>Ctrl+Y → Move viewport down</li>
<li>Ctrl+E → Move viewport up (Extra lines)</li>
</ul>
</li>
<li>Full screen<ul>
<li>Ctrl+F → Move viewport Forward</li>
<li>Ctrl+B → Move viewport Backward</li>
</ul>
</li>
<li>Half a screen<ul>
<li>Ctrl+U → Move viewport Up</li>
<li>Ctrl+D → Move viewport Down</li>
</ul>
</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a class="link"   href="https://danielmiessler.com/study/vim/" >A vim Tutorial and Primer<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://learnvimscriptthehardway.stevelosh.com/" >Learn Vimscript the Hard Way<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>TOOLS</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtualization: aarch64 vs x86_64</title>
    <url>/2019/10/05/virtualization-aarch64-vs-x86_64/</url>
    <content><![CDATA[<h1 id="Virtualization-Generations"><a href="#Virtualization-Generations" class="headerlink" title="Virtualization Generations"></a>Virtualization Generations</h1><p>Full-virtualization -&gt; Para-virtualization -&gt; Hardware-assisted virtualization -&gt; Hardware-offload virtualization -&gt; ?</p>
<h1 id="Types-of-virtualization"><a href="#Types-of-virtualization" class="headerlink" title="Types of virtualization"></a>Types of virtualization</h1><p>To understand virtualization, hpervisor should be addressed firtst. Hypervisor enables communication between hardware and a virtual machine so that the virtualizaion accomplished with this abstraction layer(hypervisor). While there is another word virtual machine monitor(VMM), those two terms are typically treated as synonyms. But there is a slightly distinction, a virtual machine monitor is a software that mnages CPU, memory, I/O data transfer, interrupt, and the instruction set on a given virtualized environment, a hypervisor may refer to an operating system(OS) with the VMM.</p>
<p>Typically, a hypervisor can be divided into two Type 1 and Type 2 hypervisor based on the different level of implementation. Type 1 is sitting on hardware and the communication between hardware and virtual machine is direct, somtime called ‘bare metal hypervisor’. Type 2 hypervisor is on the operating system to manage virtual machine easily with the support of hardware configuration from operating system.</p>
<table>
<thead>
<tr>
<th align="left">Types</th>
<th align="left">Level of Implementation</th>
<th align="left">Typical Hypervisor</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Type 1</td>
<td align="left">bare metal</td>
<td align="left">ESXi, XEN, Hyper-V</td>
</tr>
<tr>
<td align="left">Type 2</td>
<td align="left">with OS</td>
<td align="left">Virtual Box, KVM</td>
</tr>
</tbody></table>
<p>Virtualization also divided into full virtualizaton, para-virtualization and hardware-assited virtualization(direct access to resources without binary translation or emulation) from the view of GuestOS.</p>
<h1 id="Virtualization-overhead-and-micro-benchmark"><a href="#Virtualization-overhead-and-micro-benchmark" class="headerlink" title="Virtualization overhead and micro-benchmark"></a>Virtualization overhead and micro-benchmark</h1><p>The hypervisor introduces overheads in emulating inter-processor interrupts (IPIs), TLB invalidation(TLB flush IPI), and transitions to/from idle modes, among others. Semantic gap between the guest OS and hypervisor also causes double scheduling, where the guest and host-level CPU schedulers make independent, but inefficient, scheduling decisions.</p>
<table>
<thead>
<tr>
<th align="left">Name</th>
<th align="left">Descripton</th>
<th align="left">Measure method</th>
<th align="left">Measure Tool</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Hypercall</td>
<td align="left">Transition freom VM to hypervisor and return to VM without doing any work in the hypervisor.</td>
<td align="left">Measures bidirectional base trasition cost of hypervisor operatons.</td>
<td align="left">NA</td>
</tr>
<tr>
<td align="left">Interrupt Controller Trap</td>
<td align="left">Trap from VM to emulated interrupt controller then return to VM.</td>
<td align="left">Measures a frequent operation for many device drivers and baseline for accessing I/O devices emulated in the hypervisor.</td>
<td align="left">NA</td>
</tr>
<tr>
<td align="left">Virtual IPI</td>
<td align="left">Issure a virtual IPI freom a vCPU to another vCPU running on a different pCPU, both pCPUs executing VM code.</td>
<td align="left">Measures time between sending the virtual IPI until the receiveing vCPU handles it, a frequent operation in multi-core OSes that affects many workloads.</td>
<td align="left">NA</td>
</tr>
<tr>
<td align="left">Virtual IRQ Completion</td>
<td align="left">VM acknowledging and completing a virtual interrupt.</td>
<td align="left">Measures a frequent operation taht happerns for every injected virtual interrupt.</td>
<td align="left">NA</td>
</tr>
<tr>
<td align="left">VM Switch</td>
<td align="left">Switching freom one VM to another on the same physical core.</td>
<td align="left">Measures a central cost when over-subscribing physical CPUs.</td>
<td align="left">NA</td>
</tr>
<tr>
<td align="left">I/O Latency In</td>
<td align="left">Measures latency between a driver in the VM signaling the virtual I/O device in the hypervisor and the virtual I/O device receiving the signal.</td>
<td align="left">For KVM , this involves trapping to the host kernel. For xen, this involves trapping to xen then raising a virtual interrupt to Dom0</td>
<td align="left">NA</td>
</tr>
<tr>
<td align="left">I/O Latentcy Out</td>
<td align="left">Measures latency between the virtual I/O device in the hypervisor signaling the VM and the VM receiving the corresponding virtual interrupt.</td>
<td align="left">For KVM , this involves signaling the vCPU thread and injecting a virtual interrupt for the virtio device. For XEN, this involves trapping to Xen then raising a virtual interrupt to DomU.</td>
<td align="left">NA</td>
</tr>
</tbody></table>
<p>All measures unit in cycles by call tsc(Time Stamp Counter).</p>
<h1 id="Hardware-assisted-virtualization-technology"><a href="#Hardware-assisted-virtualization-technology" class="headerlink" title="Hardware-assisted virtualization technology"></a>Hardware-assisted virtualization technology</h1><ul>
<li><p>CPU Virtualization</p>
<ul>
<li>VHE and VTx<ul>
<li>aarch64, Virtualization Host Extensions(VHE), vmid/asid<br><img src="arch64-vhe.png" alt="Virtualization Host Extensions(VHE)"></li>
<li>x86_64 VTx: vmcs, root and non-root mode, vpid.<br><img src="x86_64-vt-x_cpu-virtualization.png" alt="x86_64 CPU Virtualization with VT-x"></li>
</ul>
</li>
<li>Privilege levels<ul>
<li>aarch64 excpetion level, EL 0(userspace applications), EL 1(guest kernel), EL 2(host kernel/hypervisor), EL 3(secure)</li>
<li>x86_64 ring, ring 0(hypervisor under root mode, guest under non-root mode), ring 1, ring 2, ring3(applications)<br><img src="x86_64-ring.png" alt="x86_64 rings"></li>
</ul>
</li>
</ul>
</li>
<li><p>Memory Virtualization</p>
<ul>
<li>GVA to PHA translation<ul>
<li>aarch64, stage 2 translation, GVA –mmu-&gt; IPA/GPA –mmu-&gt; HPA<br><img src="arch64-stage-2.png" alt="Stage 2 translation"></li>
<li>x86_64, extended page tables(EPT)<br><img src="x86_64-ept.png" alt="EPT"></li>
</ul>
</li>
</ul>
</li>
<li><p>IO &amp; Timers &amp; Interrupt  Virtualization</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">types</th>
<th align="left">x86_64</th>
<th align="left">aarch64</th>
</tr>
</thead>
<tbody><tr>
<td align="left">IO</td>
<td align="left">IOMMU(vIOMMU)</td>
<td align="left">SMMU(vSMMU)</td>
</tr>
<tr>
<td align="left">Timers</td>
<td align="left">pmtimer</td>
<td align="left">the generic timers</td>
</tr>
<tr>
<td align="left">Virtual interrupt</td>
<td align="left">APIC(vAPIC)</td>
<td align="left">GIC(vGIC)</td>
</tr>
</tbody></table>
<pre><code>Timers Notes:
    Real time is expressed in nanoseconds passed since machine boot and is maintained to the accuracy of the processor’s cycle counter and can be frequency-locked to an external time source (for example, via NTP).
    A domain’s virtual time only advances while it is executing: this is typically used by the guest OS scheduler to ensure correct sharing of its timeslice between application processes.
    Finally, wall-clock time is specified as an offset to be added to the current real time. This allows the wall-clock time to be adjusted without affecting the forward progress of real time.
</code></pre>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a class="link"   href="https://developer.arm.com/architectures/learn-the-architecture/armv8-a-virtualization" >Learn the architecture of armv8 virtualization<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html" >Intel® 64 and IA-32 Architectures Developer’s Manual<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.usenix.org/system/files/conference/atc17/atc17-dall.pdf" >Optimizing the Design and Implementation of the Linux ARM Hypervisor<i class="fas fa-external-link-alt"></i></a>, 2017 USENIX Annual Technical Conference</li>
</ul>
]]></content>
      <categories>
        <category>virtualization</category>
      </categories>
      <tags>
        <tag>virtualization</tag>
        <tag>aarch64</tag>
        <tag>x86_64</tag>
      </tags>
  </entry>
  <entry>
    <title>Why 25G Nic</title>
    <url>/2018/08/03/why-25g-nic/</url>
    <content><![CDATA[<h3 id="Backgroud"><a href="#Backgroud" class="headerlink" title="Backgroud"></a>Backgroud</h3><p>Choose 25g nic or 40g nic in server?</p>
<h3 id="About-PCIe-full-duplex-communication"><a href="#About-PCIe-full-duplex-communication" class="headerlink" title="About PCIe, full-duplex communication"></a>About PCIe, full-duplex communication</h3><ul>
<li><p>Lanes and Links<br><img src="pcie-lanes-and-links-.jpg" alt="Lanes and Links"></p>
</li>
<li><p>PCI Express link performance, each direction<br><img src="PCI-Express-link-performance-.jpg" alt="PCI Express link performance, each direction"></p>
</li>
</ul>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>For PCIe 3.0x8, 25G dual-ports NIC is better for PCIe bandwidth efficient.</p>
<h3 id="Append"><a href="#Append" class="headerlink" title="Append"></a>Append</h3><ul>
<li>PCIe Standard: <a class="link"   href="https://pcisig.com/" >PCI-SIG<i class="fas fa-external-link-alt"></i></a></li>
<li>PCIe Roadmap<br><img src="pcie-roadmap.png" alt="PCIe Roadmap"></li>
</ul>
]]></content>
      <categories>
        <category>INDUSTRY</category>
      </categories>
      <tags>
        <tag>hardware</tag>
        <tag>pcie</tag>
        <tag>nic</tag>
      </tags>
  </entry>
  <entry>
    <title>Wubi Input</title>
    <url>/2018/02/16/wubi-input/</url>
    <content><![CDATA[<h3 id="Wubi-Input-Base-Code"><a href="#Wubi-Input-Base-Code" class="headerlink" title="Wubi Input Base Code"></a>Wubi Input Base Code</h3><p><img src="wubi-input.jpg" alt="Wubi Input Base Code"></p>
]]></content>
      <categories>
        <category>TOOLS</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>wubi</tag>
      </tags>
  </entry>
</search>
